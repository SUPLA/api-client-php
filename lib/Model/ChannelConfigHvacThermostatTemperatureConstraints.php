<?php
/**
 * ChannelConfigHvacThermostatTemperatureConstraints
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelConfigHvacThermostatTemperatureConstraints Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ChannelConfigHvacThermostatTemperatureConstraints implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelConfigHvacThermostat_temperatureConstraints';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'roomMin' => 'float',
        'roomMax' => 'float',
        'auxMin' => 'float',
        'auxMax' => 'float',
        'histeresisMin' => 'float',
        'histeresisMax' => 'float',
        'autoOffsetMin' => 'float',
        'autoOffsetMax' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'roomMin' => 'float',
        'roomMax' => 'float',
        'auxMin' => 'float',
        'auxMax' => 'float',
        'histeresisMin' => 'float',
        'histeresisMax' => 'float',
        'autoOffsetMin' => 'float',
        'autoOffsetMax' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'roomMin' => 'roomMin',
        'roomMax' => 'roomMax',
        'auxMin' => 'auxMin',
        'auxMax' => 'auxMax',
        'histeresisMin' => 'histeresisMin',
        'histeresisMax' => 'histeresisMax',
        'autoOffsetMin' => 'autoOffsetMin',
        'autoOffsetMax' => 'autoOffsetMax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'roomMin' => 'setRoomMin',
        'roomMax' => 'setRoomMax',
        'auxMin' => 'setAuxMin',
        'auxMax' => 'setAuxMax',
        'histeresisMin' => 'setHisteresisMin',
        'histeresisMax' => 'setHisteresisMax',
        'autoOffsetMin' => 'setAutoOffsetMin',
        'autoOffsetMax' => 'setAutoOffsetMax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'roomMin' => 'getRoomMin',
        'roomMax' => 'getRoomMax',
        'auxMin' => 'getAuxMin',
        'auxMax' => 'getAuxMax',
        'histeresisMin' => 'getHisteresisMin',
        'histeresisMax' => 'getHisteresisMax',
        'autoOffsetMin' => 'getAutoOffsetMin',
        'autoOffsetMax' => 'getAutoOffsetMax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['roomMin'] = $data['roomMin'] ?? null;
        $this->container['roomMax'] = $data['roomMax'] ?? null;
        $this->container['auxMin'] = $data['auxMin'] ?? null;
        $this->container['auxMax'] = $data['auxMax'] ?? null;
        $this->container['histeresisMin'] = $data['histeresisMin'] ?? null;
        $this->container['histeresisMax'] = $data['histeresisMax'] ?? null;
        $this->container['autoOffsetMin'] = $data['autoOffsetMin'] ?? null;
        $this->container['autoOffsetMax'] = $data['autoOffsetMax'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets roomMin
     *
     * @return float|null
     */
    public function getRoomMin()
    {
        return $this->container['roomMin'];
    }

    /**
     * Sets roomMin
     *
     * @param float|null $roomMin roomMin
     *
     * @return self
     */
    public function setRoomMin($roomMin)
    {
        $this->container['roomMin'] = $roomMin;

        return $this;
    }

    /**
     * Gets roomMax
     *
     * @return float|null
     */
    public function getRoomMax()
    {
        return $this->container['roomMax'];
    }

    /**
     * Sets roomMax
     *
     * @param float|null $roomMax roomMax
     *
     * @return self
     */
    public function setRoomMax($roomMax)
    {
        $this->container['roomMax'] = $roomMax;

        return $this;
    }

    /**
     * Gets auxMin
     *
     * @return float|null
     */
    public function getAuxMin()
    {
        return $this->container['auxMin'];
    }

    /**
     * Sets auxMin
     *
     * @param float|null $auxMin auxMin
     *
     * @return self
     */
    public function setAuxMin($auxMin)
    {
        $this->container['auxMin'] = $auxMin;

        return $this;
    }

    /**
     * Gets auxMax
     *
     * @return float|null
     */
    public function getAuxMax()
    {
        return $this->container['auxMax'];
    }

    /**
     * Sets auxMax
     *
     * @param float|null $auxMax auxMax
     *
     * @return self
     */
    public function setAuxMax($auxMax)
    {
        $this->container['auxMax'] = $auxMax;

        return $this;
    }

    /**
     * Gets histeresisMin
     *
     * @return float|null
     */
    public function getHisteresisMin()
    {
        return $this->container['histeresisMin'];
    }

    /**
     * Sets histeresisMin
     *
     * @param float|null $histeresisMin histeresisMin
     *
     * @return self
     */
    public function setHisteresisMin($histeresisMin)
    {
        $this->container['histeresisMin'] = $histeresisMin;

        return $this;
    }

    /**
     * Gets histeresisMax
     *
     * @return float|null
     */
    public function getHisteresisMax()
    {
        return $this->container['histeresisMax'];
    }

    /**
     * Sets histeresisMax
     *
     * @param float|null $histeresisMax histeresisMax
     *
     * @return self
     */
    public function setHisteresisMax($histeresisMax)
    {
        $this->container['histeresisMax'] = $histeresisMax;

        return $this;
    }

    /**
     * Gets autoOffsetMin
     *
     * @return float|null
     */
    public function getAutoOffsetMin()
    {
        return $this->container['autoOffsetMin'];
    }

    /**
     * Sets autoOffsetMin
     *
     * @param float|null $autoOffsetMin autoOffsetMin
     *
     * @return self
     */
    public function setAutoOffsetMin($autoOffsetMin)
    {
        $this->container['autoOffsetMin'] = $autoOffsetMin;

        return $this;
    }

    /**
     * Gets autoOffsetMax
     *
     * @return float|null
     */
    public function getAutoOffsetMax()
    {
        return $this->container['autoOffsetMax'];
    }

    /**
     * Sets autoOffsetMax
     *
     * @param float|null $autoOffsetMax autoOffsetMax
     *
     * @return self
     */
    public function setAutoOffsetMax($autoOffsetMax)
    {
        $this->container['autoOffsetMax'] = $autoOffsetMax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


