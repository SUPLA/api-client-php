<?php
/**
 * ChannelConfigHvacThermostatTemperatures
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelConfigHvacThermostatTemperatures Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChannelConfigHvacThermostatTemperatures implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelConfigHvacThermostat_temperatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'freezeProtection' => 'float',
        'heatProtection' => 'float',
        'auxMinSetpoint' => 'float',
        'auxMaxSetpoint' => 'float',
        'histeresis' => 'float',
        'eco' => 'float',
        'comfort' => 'float',
        'boost' => 'float',
        'belowAlarm' => 'float',
        'aboveAlarm' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'freezeProtection' => 'float',
        'heatProtection' => 'float',
        'auxMinSetpoint' => 'float',
        'auxMaxSetpoint' => 'float',
        'histeresis' => 'float',
        'eco' => 'float',
        'comfort' => 'float',
        'boost' => 'float',
        'belowAlarm' => 'float',
        'aboveAlarm' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'freezeProtection' => false,
        'heatProtection' => false,
        'auxMinSetpoint' => false,
        'auxMaxSetpoint' => false,
        'histeresis' => false,
        'eco' => false,
        'comfort' => false,
        'boost' => false,
        'belowAlarm' => false,
        'aboveAlarm' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'freezeProtection' => 'freezeProtection',
        'heatProtection' => 'heatProtection',
        'auxMinSetpoint' => 'auxMinSetpoint',
        'auxMaxSetpoint' => 'auxMaxSetpoint',
        'histeresis' => 'histeresis',
        'eco' => 'eco',
        'comfort' => 'comfort',
        'boost' => 'boost',
        'belowAlarm' => 'belowAlarm',
        'aboveAlarm' => 'aboveAlarm'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'freezeProtection' => 'setFreezeProtection',
        'heatProtection' => 'setHeatProtection',
        'auxMinSetpoint' => 'setAuxMinSetpoint',
        'auxMaxSetpoint' => 'setAuxMaxSetpoint',
        'histeresis' => 'setHisteresis',
        'eco' => 'setEco',
        'comfort' => 'setComfort',
        'boost' => 'setBoost',
        'belowAlarm' => 'setBelowAlarm',
        'aboveAlarm' => 'setAboveAlarm'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'freezeProtection' => 'getFreezeProtection',
        'heatProtection' => 'getHeatProtection',
        'auxMinSetpoint' => 'getAuxMinSetpoint',
        'auxMaxSetpoint' => 'getAuxMaxSetpoint',
        'histeresis' => 'getHisteresis',
        'eco' => 'getEco',
        'comfort' => 'getComfort',
        'boost' => 'getBoost',
        'belowAlarm' => 'getBelowAlarm',
        'aboveAlarm' => 'getAboveAlarm'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('freezeProtection', $data ?? [], null);
        $this->setIfExists('heatProtection', $data ?? [], null);
        $this->setIfExists('auxMinSetpoint', $data ?? [], null);
        $this->setIfExists('auxMaxSetpoint', $data ?? [], null);
        $this->setIfExists('histeresis', $data ?? [], null);
        $this->setIfExists('eco', $data ?? [], null);
        $this->setIfExists('comfort', $data ?? [], null);
        $this->setIfExists('boost', $data ?? [], null);
        $this->setIfExists('belowAlarm', $data ?? [], null);
        $this->setIfExists('aboveAlarm', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets freezeProtection
     *
     * @return float|null
     */
    public function getFreezeProtection()
    {
        return $this->container['freezeProtection'];
    }

    /**
     * Sets freezeProtection
     *
     * @param float|null $freezeProtection freezeProtection
     *
     * @return self
     */
    public function setFreezeProtection($freezeProtection)
    {
        if (is_null($freezeProtection)) {
            throw new \InvalidArgumentException('non-nullable freezeProtection cannot be null');
        }
        $this->container['freezeProtection'] = $freezeProtection;

        return $this;
    }

    /**
     * Gets heatProtection
     *
     * @return float|null
     */
    public function getHeatProtection()
    {
        return $this->container['heatProtection'];
    }

    /**
     * Sets heatProtection
     *
     * @param float|null $heatProtection heatProtection
     *
     * @return self
     */
    public function setHeatProtection($heatProtection)
    {
        if (is_null($heatProtection)) {
            throw new \InvalidArgumentException('non-nullable heatProtection cannot be null');
        }
        $this->container['heatProtection'] = $heatProtection;

        return $this;
    }

    /**
     * Gets auxMinSetpoint
     *
     * @return float|null
     */
    public function getAuxMinSetpoint()
    {
        return $this->container['auxMinSetpoint'];
    }

    /**
     * Sets auxMinSetpoint
     *
     * @param float|null $auxMinSetpoint auxMinSetpoint
     *
     * @return self
     */
    public function setAuxMinSetpoint($auxMinSetpoint)
    {
        if (is_null($auxMinSetpoint)) {
            throw new \InvalidArgumentException('non-nullable auxMinSetpoint cannot be null');
        }
        $this->container['auxMinSetpoint'] = $auxMinSetpoint;

        return $this;
    }

    /**
     * Gets auxMaxSetpoint
     *
     * @return float|null
     */
    public function getAuxMaxSetpoint()
    {
        return $this->container['auxMaxSetpoint'];
    }

    /**
     * Sets auxMaxSetpoint
     *
     * @param float|null $auxMaxSetpoint auxMaxSetpoint
     *
     * @return self
     */
    public function setAuxMaxSetpoint($auxMaxSetpoint)
    {
        if (is_null($auxMaxSetpoint)) {
            throw new \InvalidArgumentException('non-nullable auxMaxSetpoint cannot be null');
        }
        $this->container['auxMaxSetpoint'] = $auxMaxSetpoint;

        return $this;
    }

    /**
     * Gets histeresis
     *
     * @return float|null
     */
    public function getHisteresis()
    {
        return $this->container['histeresis'];
    }

    /**
     * Sets histeresis
     *
     * @param float|null $histeresis histeresis
     *
     * @return self
     */
    public function setHisteresis($histeresis)
    {
        if (is_null($histeresis)) {
            throw new \InvalidArgumentException('non-nullable histeresis cannot be null');
        }
        $this->container['histeresis'] = $histeresis;

        return $this;
    }

    /**
     * Gets eco
     *
     * @return float|null
     */
    public function getEco()
    {
        return $this->container['eco'];
    }

    /**
     * Sets eco
     *
     * @param float|null $eco eco
     *
     * @return self
     */
    public function setEco($eco)
    {
        if (is_null($eco)) {
            throw new \InvalidArgumentException('non-nullable eco cannot be null');
        }
        $this->container['eco'] = $eco;

        return $this;
    }

    /**
     * Gets comfort
     *
     * @return float|null
     */
    public function getComfort()
    {
        return $this->container['comfort'];
    }

    /**
     * Sets comfort
     *
     * @param float|null $comfort comfort
     *
     * @return self
     */
    public function setComfort($comfort)
    {
        if (is_null($comfort)) {
            throw new \InvalidArgumentException('non-nullable comfort cannot be null');
        }
        $this->container['comfort'] = $comfort;

        return $this;
    }

    /**
     * Gets boost
     *
     * @return float|null
     */
    public function getBoost()
    {
        return $this->container['boost'];
    }

    /**
     * Sets boost
     *
     * @param float|null $boost boost
     *
     * @return self
     */
    public function setBoost($boost)
    {
        if (is_null($boost)) {
            throw new \InvalidArgumentException('non-nullable boost cannot be null');
        }
        $this->container['boost'] = $boost;

        return $this;
    }

    /**
     * Gets belowAlarm
     *
     * @return float|null
     */
    public function getBelowAlarm()
    {
        return $this->container['belowAlarm'];
    }

    /**
     * Sets belowAlarm
     *
     * @param float|null $belowAlarm belowAlarm
     *
     * @return self
     */
    public function setBelowAlarm($belowAlarm)
    {
        if (is_null($belowAlarm)) {
            throw new \InvalidArgumentException('non-nullable belowAlarm cannot be null');
        }
        $this->container['belowAlarm'] = $belowAlarm;

        return $this;
    }

    /**
     * Gets aboveAlarm
     *
     * @return float|null
     */
    public function getAboveAlarm()
    {
        return $this->container['aboveAlarm'];
    }

    /**
     * Sets aboveAlarm
     *
     * @param float|null $aboveAlarm aboveAlarm
     *
     * @return self
     */
    public function setAboveAlarm($aboveAlarm)
    {
        if (is_null($aboveAlarm)) {
            throw new \InvalidArgumentException('non-nullable aboveAlarm cannot be null');
        }
        $this->container['aboveAlarm'] = $aboveAlarm;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


