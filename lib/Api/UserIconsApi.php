<?php
/**
 * UserIconsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Supla\ApiClient\ApiException;
use Supla\ApiClient\Configuration;
use Supla\ApiClient\HeaderSelector;
use Supla\ApiClient\ObjectSerializer;

/**
 * UserIconsApi Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserIconsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createUserIcon' => [
            'multipart/form-data',
        ],
        'createUserIconBase64' => [
            'application/json',
        ],
        'deleteUserIcon' => [
            'application/json',
        ],
        'getUserIcon' => [
            'application/json',
        ],
        'getUserIconImage' => [
            'application/json',
        ],
        'getUserIcons' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createUserIcon
     *
     * Create a new User Icon
     *
     * Supla API Client
     *
     * @param  string|null $function function (optional)
     * @param  int|null $sourceIcon ID of an existing user icon to replace with these new files. Optional. (optional)
     * @param  \SplFileObject|null $image1 image1 (optional)
     * @param  \SplFileObject|null $image2 image2 (optional)
     * @param  \SplFileObject|null $image3 image3 (optional)
     * @param  \SplFileObject|null $image4 image4 (optional)
     * @param  \SplFileObject|null $imageDark1 imageDark1 (optional)
     * @param  \SplFileObject|null $imageDark2 imageDark2 (optional)
     * @param  \SplFileObject|null $imageDark3 imageDark3 (optional)
     * @param  \SplFileObject|null $imageDark4 imageDark4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIcon'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\UserIcon
     */
    public function createUserIcon($function = null, $sourceIcon = null, $image1 = null, $image2 = null, $image3 = null, $image4 = null, $imageDark1 = null, $imageDark2 = null, $imageDark3 = null, $imageDark4 = null, string $contentType = self::contentTypes['createUserIcon'][0])
    {
        list($response) = $this->createUserIconWithHttpInfo($function, $sourceIcon, $image1, $image2, $image3, $image4, $imageDark1, $imageDark2, $imageDark3, $imageDark4, $contentType);
        return $response;
    }

    /**
     * Operation createUserIconWithHttpInfo
     *
     * Create a new User Icon
     *
     * Supla API Client
     *
     * @param  string|null $function (optional)
     * @param  int|null $sourceIcon ID of an existing user icon to replace with these new files. Optional. (optional)
     * @param  \SplFileObject|null $image1 (optional)
     * @param  \SplFileObject|null $image2 (optional)
     * @param  \SplFileObject|null $image3 (optional)
     * @param  \SplFileObject|null $image4 (optional)
     * @param  \SplFileObject|null $imageDark1 (optional)
     * @param  \SplFileObject|null $imageDark2 (optional)
     * @param  \SplFileObject|null $imageDark3 (optional)
     * @param  \SplFileObject|null $imageDark4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIcon'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\UserIcon, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserIconWithHttpInfo($function = null, $sourceIcon = null, $image1 = null, $image2 = null, $image3 = null, $image4 = null, $imageDark1 = null, $imageDark2 = null, $imageDark3 = null, $imageDark4 = null, string $contentType = self::contentTypes['createUserIcon'][0])
    {
        $request = $this->createUserIconRequest($function, $sourceIcon, $image1, $image2, $image3, $image4, $imageDark1, $imageDark2, $imageDark3, $imageDark4, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Supla\ApiClient\Model\UserIcon' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\UserIcon' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\UserIcon', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\UserIcon';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\UserIcon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUserIconAsync
     *
     * Create a new User Icon
     *
     * Supla API Client
     *
     * @param  string|null $function (optional)
     * @param  int|null $sourceIcon ID of an existing user icon to replace with these new files. Optional. (optional)
     * @param  \SplFileObject|null $image1 (optional)
     * @param  \SplFileObject|null $image2 (optional)
     * @param  \SplFileObject|null $image3 (optional)
     * @param  \SplFileObject|null $image4 (optional)
     * @param  \SplFileObject|null $imageDark1 (optional)
     * @param  \SplFileObject|null $imageDark2 (optional)
     * @param  \SplFileObject|null $imageDark3 (optional)
     * @param  \SplFileObject|null $imageDark4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserIconAsync($function = null, $sourceIcon = null, $image1 = null, $image2 = null, $image3 = null, $image4 = null, $imageDark1 = null, $imageDark2 = null, $imageDark3 = null, $imageDark4 = null, string $contentType = self::contentTypes['createUserIcon'][0])
    {
        return $this->createUserIconAsyncWithHttpInfo($function, $sourceIcon, $image1, $image2, $image3, $image4, $imageDark1, $imageDark2, $imageDark3, $imageDark4, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUserIconAsyncWithHttpInfo
     *
     * Create a new User Icon
     *
     * Supla API Client
     *
     * @param  string|null $function (optional)
     * @param  int|null $sourceIcon ID of an existing user icon to replace with these new files. Optional. (optional)
     * @param  \SplFileObject|null $image1 (optional)
     * @param  \SplFileObject|null $image2 (optional)
     * @param  \SplFileObject|null $image3 (optional)
     * @param  \SplFileObject|null $image4 (optional)
     * @param  \SplFileObject|null $imageDark1 (optional)
     * @param  \SplFileObject|null $imageDark2 (optional)
     * @param  \SplFileObject|null $imageDark3 (optional)
     * @param  \SplFileObject|null $imageDark4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserIconAsyncWithHttpInfo($function = null, $sourceIcon = null, $image1 = null, $image2 = null, $image3 = null, $image4 = null, $imageDark1 = null, $imageDark2 = null, $imageDark3 = null, $imageDark4 = null, string $contentType = self::contentTypes['createUserIcon'][0])
    {
        $returnType = '\Supla\ApiClient\Model\UserIcon';
        $request = $this->createUserIconRequest($function, $sourceIcon, $image1, $image2, $image3, $image4, $imageDark1, $imageDark2, $imageDark3, $imageDark4, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUserIcon'
     *
     * @param  string|null $function (optional)
     * @param  int|null $sourceIcon ID of an existing user icon to replace with these new files. Optional. (optional)
     * @param  \SplFileObject|null $image1 (optional)
     * @param  \SplFileObject|null $image2 (optional)
     * @param  \SplFileObject|null $image3 (optional)
     * @param  \SplFileObject|null $image4 (optional)
     * @param  \SplFileObject|null $imageDark1 (optional)
     * @param  \SplFileObject|null $imageDark2 (optional)
     * @param  \SplFileObject|null $imageDark3 (optional)
     * @param  \SplFileObject|null $imageDark4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUserIconRequest($function = null, $sourceIcon = null, $image1 = null, $image2 = null, $image3 = null, $image4 = null, $imageDark1 = null, $imageDark2 = null, $imageDark3 = null, $imageDark4 = null, string $contentType = self::contentTypes['createUserIcon'][0])
    {












        $resourcePath = '/user-icons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($function !== null) {
            $formParams['function'] = ObjectSerializer::toFormValue($function);
        }
        // form params
        if ($sourceIcon !== null) {
            $formParams['sourceIcon'] = ObjectSerializer::toFormValue($sourceIcon);
        }
        // form params
        if ($image1 !== null) {
            $multipart = true;
            $formParams['image1'] = [];
            $paramFiles = is_array($image1) ? $image1 : [$image1];
            foreach ($paramFiles as $paramFile) {
                $formParams['image1'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($image2 !== null) {
            $multipart = true;
            $formParams['image2'] = [];
            $paramFiles = is_array($image2) ? $image2 : [$image2];
            foreach ($paramFiles as $paramFile) {
                $formParams['image2'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($image3 !== null) {
            $multipart = true;
            $formParams['image3'] = [];
            $paramFiles = is_array($image3) ? $image3 : [$image3];
            foreach ($paramFiles as $paramFile) {
                $formParams['image3'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($image4 !== null) {
            $multipart = true;
            $formParams['image4'] = [];
            $paramFiles = is_array($image4) ? $image4 : [$image4];
            foreach ($paramFiles as $paramFile) {
                $formParams['image4'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($imageDark1 !== null) {
            $multipart = true;
            $formParams['imageDark1'] = [];
            $paramFiles = is_array($imageDark1) ? $imageDark1 : [$imageDark1];
            foreach ($paramFiles as $paramFile) {
                $formParams['imageDark1'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($imageDark2 !== null) {
            $multipart = true;
            $formParams['imageDark2'] = [];
            $paramFiles = is_array($imageDark2) ? $imageDark2 : [$imageDark2];
            foreach ($paramFiles as $paramFile) {
                $formParams['imageDark2'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($imageDark3 !== null) {
            $multipart = true;
            $formParams['imageDark3'] = [];
            $paramFiles = is_array($imageDark3) ? $imageDark3 : [$imageDark3];
            foreach ($paramFiles as $paramFile) {
                $formParams['imageDark3'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($imageDark4 !== null) {
            $multipart = true;
            $formParams['imageDark4'] = [];
            $paramFiles = is_array($imageDark4) ? $imageDark4 : [$imageDark4];
            foreach ($paramFiles as $paramFile) {
                $formParams['imageDark4'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createUserIconBase64
     *
     * Create a new User Icon sent in Base64 format.
     *
     * Supla API Client
     *
     * @param  \Supla\ApiClient\Model\CreateUserIconBase64Request $createUserIconBase64Request Request with Base64-encoded images to save as a new icon. The number of images required to be sent with the request is determined by the chosen function identifier (it must match the &#x60;function.possibleVisualStates&#x60; count). Each image represents the respective visual state from &#x60;function.possibleVisualStates&#x60; array. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIconBase64'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\UserIcon
     */
    public function createUserIconBase64($createUserIconBase64Request, string $contentType = self::contentTypes['createUserIconBase64'][0])
    {
        list($response) = $this->createUserIconBase64WithHttpInfo($createUserIconBase64Request, $contentType);
        return $response;
    }

    /**
     * Operation createUserIconBase64WithHttpInfo
     *
     * Create a new User Icon sent in Base64 format.
     *
     * Supla API Client
     *
     * @param  \Supla\ApiClient\Model\CreateUserIconBase64Request $createUserIconBase64Request Request with Base64-encoded images to save as a new icon. The number of images required to be sent with the request is determined by the chosen function identifier (it must match the &#x60;function.possibleVisualStates&#x60; count). Each image represents the respective visual state from &#x60;function.possibleVisualStates&#x60; array. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIconBase64'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\UserIcon, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserIconBase64WithHttpInfo($createUserIconBase64Request, string $contentType = self::contentTypes['createUserIconBase64'][0])
    {
        $request = $this->createUserIconBase64Request($createUserIconBase64Request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Supla\ApiClient\Model\UserIcon' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\UserIcon' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\UserIcon', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\UserIcon';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\UserIcon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createUserIconBase64Async
     *
     * Create a new User Icon sent in Base64 format.
     *
     * Supla API Client
     *
     * @param  \Supla\ApiClient\Model\CreateUserIconBase64Request $createUserIconBase64Request Request with Base64-encoded images to save as a new icon. The number of images required to be sent with the request is determined by the chosen function identifier (it must match the &#x60;function.possibleVisualStates&#x60; count). Each image represents the respective visual state from &#x60;function.possibleVisualStates&#x60; array. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIconBase64'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserIconBase64Async($createUserIconBase64Request, string $contentType = self::contentTypes['createUserIconBase64'][0])
    {
        return $this->createUserIconBase64AsyncWithHttpInfo($createUserIconBase64Request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createUserIconBase64AsyncWithHttpInfo
     *
     * Create a new User Icon sent in Base64 format.
     *
     * Supla API Client
     *
     * @param  \Supla\ApiClient\Model\CreateUserIconBase64Request $createUserIconBase64Request Request with Base64-encoded images to save as a new icon. The number of images required to be sent with the request is determined by the chosen function identifier (it must match the &#x60;function.possibleVisualStates&#x60; count). Each image represents the respective visual state from &#x60;function.possibleVisualStates&#x60; array. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIconBase64'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createUserIconBase64AsyncWithHttpInfo($createUserIconBase64Request, string $contentType = self::contentTypes['createUserIconBase64'][0])
    {
        $returnType = '\Supla\ApiClient\Model\UserIcon';
        $request = $this->createUserIconBase64Request($createUserIconBase64Request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createUserIconBase64'
     *
     * @param  \Supla\ApiClient\Model\CreateUserIconBase64Request $createUserIconBase64Request Request with Base64-encoded images to save as a new icon. The number of images required to be sent with the request is determined by the chosen function identifier (it must match the &#x60;function.possibleVisualStates&#x60; count). Each image represents the respective visual state from &#x60;function.possibleVisualStates&#x60; array. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createUserIconBase64'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createUserIconBase64Request($createUserIconBase64Request, string $contentType = self::contentTypes['createUserIconBase64'][0])
    {

        // verify the required parameter 'createUserIconBase64Request' is set
        if ($createUserIconBase64Request === null || (is_array($createUserIconBase64Request) && count($createUserIconBase64Request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createUserIconBase64Request when calling createUserIconBase64'
            );
        }


        $resourcePath = '/user-icons.base64';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createUserIconBase64Request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createUserIconBase64Request));
            } else {
                $httpBody = $createUserIconBase64Request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteUserIcon
     *
     * Delete the User Icon
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserIcon'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteUserIcon($id, string $contentType = self::contentTypes['deleteUserIcon'][0])
    {
        $this->deleteUserIconWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteUserIconWithHttpInfo
     *
     * Delete the User Icon
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserIcon'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUserIconWithHttpInfo($id, string $contentType = self::contentTypes['deleteUserIcon'][0])
    {
        $request = $this->deleteUserIconRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteUserIconAsync
     *
     * Delete the User Icon
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserIconAsync($id, string $contentType = self::contentTypes['deleteUserIcon'][0])
    {
        return $this->deleteUserIconAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteUserIconAsyncWithHttpInfo
     *
     * Delete the User Icon
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteUserIconAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteUserIcon'][0])
    {
        $returnType = '';
        $request = $this->deleteUserIconRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteUserIcon'
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteUserIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteUserIconRequest($id, string $contentType = self::contentTypes['deleteUserIcon'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteUserIcon'
            );
        }


        $resourcePath = '/user-icons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserIcon
     *
     * Get User Icon
     *
     * Supla API Client
     *
     * @param  int $id id (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcon'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\UserIcon
     */
    public function getUserIcon($id, $include = null, string $contentType = self::contentTypes['getUserIcon'][0])
    {
        list($response) = $this->getUserIconWithHttpInfo($id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getUserIconWithHttpInfo
     *
     * Get User Icon
     *
     * Supla API Client
     *
     * @param  int $id (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcon'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\UserIcon, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserIconWithHttpInfo($id, $include = null, string $contentType = self::contentTypes['getUserIcon'][0])
    {
        $request = $this->getUserIconRequest($id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\UserIcon' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\UserIcon' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\UserIcon', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\UserIcon';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\UserIcon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserIconAsync
     *
     * Get User Icon
     *
     * Supla API Client
     *
     * @param  int $id (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserIconAsync($id, $include = null, string $contentType = self::contentTypes['getUserIcon'][0])
    {
        return $this->getUserIconAsyncWithHttpInfo($id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserIconAsyncWithHttpInfo
     *
     * Get User Icon
     *
     * Supla API Client
     *
     * @param  int $id (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserIconAsyncWithHttpInfo($id, $include = null, string $contentType = self::contentTypes['getUserIcon'][0])
    {
        $returnType = '\Supla\ApiClient\Model\UserIcon';
        $request = $this->getUserIconRequest($id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserIcon'
     *
     * @param  int $id (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserIconRequest($id, $include = null, string $contentType = self::contentTypes['getUserIcon'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getUserIcon'
            );
        }



        $resourcePath = '/user-icons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserIconImage
     *
     * Get User Icon image at specified index
     *
     * Supla API Client
     *
     * @param  int $id id (required)
     * @param  int $imageIndex imageIndex (required)
     * @param  bool|null $dark dark (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIconImage'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function getUserIconImage($id, $imageIndex, $dark = null, string $contentType = self::contentTypes['getUserIconImage'][0])
    {
        list($response) = $this->getUserIconImageWithHttpInfo($id, $imageIndex, $dark, $contentType);
        return $response;
    }

    /**
     * Operation getUserIconImageWithHttpInfo
     *
     * Get User Icon image at specified index
     *
     * Supla API Client
     *
     * @param  int $id (required)
     * @param  int $imageIndex (required)
     * @param  bool|null $dark (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIconImage'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserIconImageWithHttpInfo($id, $imageIndex, $dark = null, string $contentType = self::contentTypes['getUserIconImage'][0])
    {
        $request = $this->getUserIconImageRequest($id, $imageIndex, $dark, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserIconImageAsync
     *
     * Get User Icon image at specified index
     *
     * Supla API Client
     *
     * @param  int $id (required)
     * @param  int $imageIndex (required)
     * @param  bool|null $dark (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIconImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserIconImageAsync($id, $imageIndex, $dark = null, string $contentType = self::contentTypes['getUserIconImage'][0])
    {
        return $this->getUserIconImageAsyncWithHttpInfo($id, $imageIndex, $dark, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserIconImageAsyncWithHttpInfo
     *
     * Get User Icon image at specified index
     *
     * Supla API Client
     *
     * @param  int $id (required)
     * @param  int $imageIndex (required)
     * @param  bool|null $dark (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIconImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserIconImageAsyncWithHttpInfo($id, $imageIndex, $dark = null, string $contentType = self::contentTypes['getUserIconImage'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->getUserIconImageRequest($id, $imageIndex, $dark, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserIconImage'
     *
     * @param  int $id (required)
     * @param  int $imageIndex (required)
     * @param  bool|null $dark (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIconImage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserIconImageRequest($id, $imageIndex, $dark = null, string $contentType = self::contentTypes['getUserIconImage'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getUserIconImage'
            );
        }

        // verify the required parameter 'imageIndex' is set
        if ($imageIndex === null || (is_array($imageIndex) && count($imageIndex) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $imageIndex when calling getUserIconImage'
            );
        }



        $resourcePath = '/user-icons/{id}/{imageIndex}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dark,
            'dark', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($imageIndex !== null) {
            $resourcePath = str_replace(
                '{' . 'imageIndex' . '}',
                ObjectSerializer::toPathValue($imageIndex),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['image/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserIcons
     *
     * List User Icons
     *
     * Supla API Client
     *
     * @param  string[]|null $function function (optional)
     * @param  int[]|null $ids ids (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcons'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\UserIcon[]
     */
    public function getUserIcons($function = null, $ids = null, $include = null, string $contentType = self::contentTypes['getUserIcons'][0])
    {
        list($response) = $this->getUserIconsWithHttpInfo($function, $ids, $include, $contentType);
        return $response;
    }

    /**
     * Operation getUserIconsWithHttpInfo
     *
     * List User Icons
     *
     * Supla API Client
     *
     * @param  string[]|null $function (optional)
     * @param  int[]|null $ids (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcons'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\UserIcon[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserIconsWithHttpInfo($function = null, $ids = null, $include = null, string $contentType = self::contentTypes['getUserIcons'][0])
    {
        $request = $this->getUserIconsRequest($function, $ids, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\UserIcon[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\UserIcon[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\UserIcon[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\UserIcon[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\UserIcon[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserIconsAsync
     *
     * List User Icons
     *
     * Supla API Client
     *
     * @param  string[]|null $function (optional)
     * @param  int[]|null $ids (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserIconsAsync($function = null, $ids = null, $include = null, string $contentType = self::contentTypes['getUserIcons'][0])
    {
        return $this->getUserIconsAsyncWithHttpInfo($function, $ids, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserIconsAsyncWithHttpInfo
     *
     * List User Icons
     *
     * Supla API Client
     *
     * @param  string[]|null $function (optional)
     * @param  int[]|null $ids (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserIconsAsyncWithHttpInfo($function = null, $ids = null, $include = null, string $contentType = self::contentTypes['getUserIcons'][0])
    {
        $returnType = '\Supla\ApiClient\Model\UserIcon[]';
        $request = $this->getUserIconsRequest($function, $ids, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserIcons'
     *
     * @param  string[]|null $function (optional)
     * @param  int[]|null $ids (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserIcons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserIconsRequest($function = null, $ids = null, $include = null, string $contentType = self::contentTypes['getUserIcons'][0])
    {





        $resourcePath = '/user-icons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $function,
            'function', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
