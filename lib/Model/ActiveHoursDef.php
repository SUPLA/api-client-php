<?php
/**
 * ActiveHoursDef
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ActiveHoursDef Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ActiveHoursDef implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActiveHoursDef';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_1' => 'int[]',
        '_2' => 'int[]',
        '_3' => 'int[]',
        '_4' => 'int[]',
        '_5' => 'int[]',
        '_6' => 'int[]',
        '_7' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_1' => null,
        '_2' => null,
        '_3' => null,
        '_4' => null,
        '_5' => null,
        '_6' => null,
        '_7' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_1' => '1',
        '_2' => '2',
        '_3' => '3',
        '_4' => '4',
        '_5' => '5',
        '_6' => '6',
        '_7' => '7'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_1' => 'set1',
        '_2' => 'set2',
        '_3' => 'set3',
        '_4' => 'set4',
        '_5' => 'set5',
        '_6' => 'set6',
        '_7' => 'set7'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_1' => 'get1',
        '_2' => 'get2',
        '_3' => 'get3',
        '_4' => 'get4',
        '_5' => 'get5',
        '_6' => 'get6',
        '_7' => 'get7'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_1'] = $data['_1'] ?? null;
        $this->container['_2'] = $data['_2'] ?? null;
        $this->container['_3'] = $data['_3'] ?? null;
        $this->container['_4'] = $data['_4'] ?? null;
        $this->container['_5'] = $data['_5'] ?? null;
        $this->container['_6'] = $data['_6'] ?? null;
        $this->container['_7'] = $data['_7'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _1
     *
     * @return int[]|null
     */
    public function get1()
    {
        return $this->container['_1'];
    }

    /**
     * Sets _1
     *
     * @param int[]|null $_1 _1
     *
     * @return self
     */
    public function set1($_1)
    {
        $this->container['_1'] = $_1;

        return $this;
    }

    /**
     * Gets _2
     *
     * @return int[]|null
     */
    public function get2()
    {
        return $this->container['_2'];
    }

    /**
     * Sets _2
     *
     * @param int[]|null $_2 _2
     *
     * @return self
     */
    public function set2($_2)
    {
        $this->container['_2'] = $_2;

        return $this;
    }

    /**
     * Gets _3
     *
     * @return int[]|null
     */
    public function get3()
    {
        return $this->container['_3'];
    }

    /**
     * Sets _3
     *
     * @param int[]|null $_3 _3
     *
     * @return self
     */
    public function set3($_3)
    {
        $this->container['_3'] = $_3;

        return $this;
    }

    /**
     * Gets _4
     *
     * @return int[]|null
     */
    public function get4()
    {
        return $this->container['_4'];
    }

    /**
     * Sets _4
     *
     * @param int[]|null $_4 _4
     *
     * @return self
     */
    public function set4($_4)
    {
        $this->container['_4'] = $_4;

        return $this;
    }

    /**
     * Gets _5
     *
     * @return int[]|null
     */
    public function get5()
    {
        return $this->container['_5'];
    }

    /**
     * Sets _5
     *
     * @param int[]|null $_5 _5
     *
     * @return self
     */
    public function set5($_5)
    {
        $this->container['_5'] = $_5;

        return $this;
    }

    /**
     * Gets _6
     *
     * @return int[]|null
     */
    public function get6()
    {
        return $this->container['_6'];
    }

    /**
     * Sets _6
     *
     * @param int[]|null $_6 _6
     *
     * @return self
     */
    public function set6($_6)
    {
        $this->container['_6'] = $_6;

        return $this;
    }

    /**
     * Gets _7
     *
     * @return int[]|null
     */
    public function get7()
    {
        return $this->container['_7'];
    }

    /**
     * Sets _7
     *
     * @param int[]|null $_7 _7
     *
     * @return self
     */
    public function set7($_7)
    {
        $this->container['_7'] = $_7;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


