<?php
/**
 * DeviceConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * DeviceConfig Class Doc Comment
 *
 * @category Class
 * @description Configuration of the IO Device.
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeviceConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeviceConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'statusLed' => 'string',
        'screenBrightness' => '\Supla\ApiClient\Model\DeviceConfigScreenBrightness',
        'buttonVolume' => 'int',
        'automaticTimeSync' => 'bool',
        'homeScreen' => '\Supla\ApiClient\Model\DeviceConfigHomeScreen',
        'userInterface' => '\Supla\ApiClient\Model\DeviceConfigUserInterface',
        'userInterfaceConstraints' => '\Supla\ApiClient\Model\DeviceConfigUserInterfaceConstraints',
        'homeScreenContentAvailable' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'statusLed' => null,
        'screenBrightness' => null,
        'buttonVolume' => null,
        'automaticTimeSync' => null,
        'homeScreen' => null,
        'userInterface' => null,
        'userInterfaceConstraints' => null,
        'homeScreenContentAvailable' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'statusLed' => false,
        'screenBrightness' => false,
        'buttonVolume' => false,
        'automaticTimeSync' => false,
        'homeScreen' => false,
        'userInterface' => false,
        'userInterfaceConstraints' => false,
        'homeScreenContentAvailable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'statusLed' => 'statusLed',
        'screenBrightness' => 'screenBrightness',
        'buttonVolume' => 'buttonVolume',
        'automaticTimeSync' => 'automaticTimeSync',
        'homeScreen' => 'homeScreen',
        'userInterface' => 'userInterface',
        'userInterfaceConstraints' => 'userInterfaceConstraints',
        'homeScreenContentAvailable' => 'homeScreenContentAvailable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'statusLed' => 'setStatusLed',
        'screenBrightness' => 'setScreenBrightness',
        'buttonVolume' => 'setButtonVolume',
        'automaticTimeSync' => 'setAutomaticTimeSync',
        'homeScreen' => 'setHomeScreen',
        'userInterface' => 'setUserInterface',
        'userInterfaceConstraints' => 'setUserInterfaceConstraints',
        'homeScreenContentAvailable' => 'setHomeScreenContentAvailable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'statusLed' => 'getStatusLed',
        'screenBrightness' => 'getScreenBrightness',
        'buttonVolume' => 'getButtonVolume',
        'automaticTimeSync' => 'getAutomaticTimeSync',
        'homeScreen' => 'getHomeScreen',
        'userInterface' => 'getUserInterface',
        'userInterfaceConstraints' => 'getUserInterfaceConstraints',
        'homeScreenContentAvailable' => 'getHomeScreenContentAvailable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('statusLed', $data ?? [], null);
        $this->setIfExists('screenBrightness', $data ?? [], null);
        $this->setIfExists('buttonVolume', $data ?? [], null);
        $this->setIfExists('automaticTimeSync', $data ?? [], null);
        $this->setIfExists('homeScreen', $data ?? [], null);
        $this->setIfExists('userInterface', $data ?? [], null);
        $this->setIfExists('userInterfaceConstraints', $data ?? [], null);
        $this->setIfExists('homeScreenContentAvailable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['buttonVolume']) && ($this->container['buttonVolume'] > 100)) {
            $invalidProperties[] = "invalid value for 'buttonVolume', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['buttonVolume']) && ($this->container['buttonVolume'] < 0)) {
            $invalidProperties[] = "invalid value for 'buttonVolume', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets statusLed
     *
     * @return string|null
     */
    public function getStatusLed()
    {
        return $this->container['statusLed'];
    }

    /**
     * Sets statusLed
     *
     * @param string|null $statusLed statusLed
     *
     * @return self
     */
    public function setStatusLed($statusLed)
    {
        if (is_null($statusLed)) {
            throw new \InvalidArgumentException('non-nullable statusLed cannot be null');
        }
        $this->container['statusLed'] = $statusLed;

        return $this;
    }

    /**
     * Gets screenBrightness
     *
     * @return \Supla\ApiClient\Model\DeviceConfigScreenBrightness|null
     */
    public function getScreenBrightness()
    {
        return $this->container['screenBrightness'];
    }

    /**
     * Sets screenBrightness
     *
     * @param \Supla\ApiClient\Model\DeviceConfigScreenBrightness|null $screenBrightness screenBrightness
     *
     * @return self
     */
    public function setScreenBrightness($screenBrightness)
    {
        if (is_null($screenBrightness)) {
            throw new \InvalidArgumentException('non-nullable screenBrightness cannot be null');
        }
        $this->container['screenBrightness'] = $screenBrightness;

        return $this;
    }

    /**
     * Gets buttonVolume
     *
     * @return int|null
     */
    public function getButtonVolume()
    {
        return $this->container['buttonVolume'];
    }

    /**
     * Sets buttonVolume
     *
     * @param int|null $buttonVolume buttonVolume
     *
     * @return self
     */
    public function setButtonVolume($buttonVolume)
    {
        if (is_null($buttonVolume)) {
            throw new \InvalidArgumentException('non-nullable buttonVolume cannot be null');
        }

        if (($buttonVolume > 100)) {
            throw new \InvalidArgumentException('invalid value for $buttonVolume when calling DeviceConfig., must be smaller than or equal to 100.');
        }
        if (($buttonVolume < 0)) {
            throw new \InvalidArgumentException('invalid value for $buttonVolume when calling DeviceConfig., must be bigger than or equal to 0.');
        }

        $this->container['buttonVolume'] = $buttonVolume;

        return $this;
    }

    /**
     * Gets automaticTimeSync
     *
     * @return bool|null
     */
    public function getAutomaticTimeSync()
    {
        return $this->container['automaticTimeSync'];
    }

    /**
     * Sets automaticTimeSync
     *
     * @param bool|null $automaticTimeSync automaticTimeSync
     *
     * @return self
     */
    public function setAutomaticTimeSync($automaticTimeSync)
    {
        if (is_null($automaticTimeSync)) {
            throw new \InvalidArgumentException('non-nullable automaticTimeSync cannot be null');
        }
        $this->container['automaticTimeSync'] = $automaticTimeSync;

        return $this;
    }

    /**
     * Gets homeScreen
     *
     * @return \Supla\ApiClient\Model\DeviceConfigHomeScreen|null
     */
    public function getHomeScreen()
    {
        return $this->container['homeScreen'];
    }

    /**
     * Sets homeScreen
     *
     * @param \Supla\ApiClient\Model\DeviceConfigHomeScreen|null $homeScreen homeScreen
     *
     * @return self
     */
    public function setHomeScreen($homeScreen)
    {
        if (is_null($homeScreen)) {
            throw new \InvalidArgumentException('non-nullable homeScreen cannot be null');
        }
        $this->container['homeScreen'] = $homeScreen;

        return $this;
    }

    /**
     * Gets userInterface
     *
     * @return \Supla\ApiClient\Model\DeviceConfigUserInterface|null
     */
    public function getUserInterface()
    {
        return $this->container['userInterface'];
    }

    /**
     * Sets userInterface
     *
     * @param \Supla\ApiClient\Model\DeviceConfigUserInterface|null $userInterface userInterface
     *
     * @return self
     */
    public function setUserInterface($userInterface)
    {
        if (is_null($userInterface)) {
            throw new \InvalidArgumentException('non-nullable userInterface cannot be null');
        }
        $this->container['userInterface'] = $userInterface;

        return $this;
    }

    /**
     * Gets userInterfaceConstraints
     *
     * @return \Supla\ApiClient\Model\DeviceConfigUserInterfaceConstraints|null
     */
    public function getUserInterfaceConstraints()
    {
        return $this->container['userInterfaceConstraints'];
    }

    /**
     * Sets userInterfaceConstraints
     *
     * @param \Supla\ApiClient\Model\DeviceConfigUserInterfaceConstraints|null $userInterfaceConstraints userInterfaceConstraints
     *
     * @return self
     */
    public function setUserInterfaceConstraints($userInterfaceConstraints)
    {
        if (is_null($userInterfaceConstraints)) {
            throw new \InvalidArgumentException('non-nullable userInterfaceConstraints cannot be null');
        }
        $this->container['userInterfaceConstraints'] = $userInterfaceConstraints;

        return $this;
    }

    /**
     * Gets homeScreenContentAvailable
     *
     * @return string|null
     */
    public function getHomeScreenContentAvailable()
    {
        return $this->container['homeScreenContentAvailable'];
    }

    /**
     * Sets homeScreenContentAvailable
     *
     * @param string|null $homeScreenContentAvailable homeScreenContentAvailable
     *
     * @return self
     */
    public function setHomeScreenContentAvailable($homeScreenContentAvailable)
    {
        if (is_null($homeScreenContentAvailable)) {
            throw new \InvalidArgumentException('non-nullable homeScreenContentAvailable cannot be null');
        }
        $this->container['homeScreenContentAvailable'] = $homeScreenContentAvailable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


