<?php
/**
 * ChannelState
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 22.07
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelState Class Doc Comment
 *
 * @category Class
 * @description The channel&#39;s state. The value and the format depends on the channel&#39;s function. Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Functions-states).
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ChannelState implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connected' => 'bool',
        'brightness' => 'int',
        'on' => 'bool',
        'color' => 'string',
        'colorBrightness' => 'int',
        'depth' => 'int',
        'distance' => 'int',
        'value' => 'float',
        'support' => 'int',
        'totalCost' => 'float',
        'pricePerUnit' => 'float',
        'currency' => 'string',
        'phases' => '\Supla\ApiClient\Model\ChannelStateElectricityMeterPhase[]',
        'hi' => 'bool',
        'partialHi' => 'bool',
        'humidity' => 'float',
        'temperature' => 'float',
        'impulsesPerUnit' => 'int',
        'counter' => 'int',
        'calculatedValue' => 'float',
        'unit' => 'string',
        'currentOverload' => 'bool',
        'isCalibrating' => 'bool',
        'notCalibrated' => 'bool',
        'shut' => 'int',
        'closed' => 'bool',
        'manuallyClosed' => 'bool',
        'flooding' => 'bool',
        'executing' => 'bool',
        'initiatorTypeId' => 'int',
        'initiatorType' => 'string',
        'initiatorId' => 'int',
        'initiatorName' => 'string',
        'millisecondsFromStart' => 'int',
        'millisecondsToEnd' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'connected' => null,
        'brightness' => null,
        'on' => null,
        'color' => null,
        'colorBrightness' => null,
        'depth' => null,
        'distance' => null,
        'value' => null,
        'support' => null,
        'totalCost' => null,
        'pricePerUnit' => null,
        'currency' => null,
        'phases' => null,
        'hi' => null,
        'partialHi' => null,
        'humidity' => null,
        'temperature' => null,
        'impulsesPerUnit' => null,
        'counter' => null,
        'calculatedValue' => null,
        'unit' => null,
        'currentOverload' => null,
        'isCalibrating' => null,
        'notCalibrated' => null,
        'shut' => null,
        'closed' => null,
        'manuallyClosed' => null,
        'flooding' => null,
        'executing' => null,
        'initiatorTypeId' => null,
        'initiatorType' => null,
        'initiatorId' => null,
        'initiatorName' => null,
        'millisecondsFromStart' => null,
        'millisecondsToEnd' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connected' => 'connected',
        'brightness' => 'brightness',
        'on' => 'on',
        'color' => 'color',
        'colorBrightness' => 'color_brightness',
        'depth' => 'depth',
        'distance' => 'distance',
        'value' => 'value',
        'support' => 'support',
        'totalCost' => 'totalCost',
        'pricePerUnit' => 'pricePerUnit',
        'currency' => 'currency',
        'phases' => 'phases',
        'hi' => 'hi',
        'partialHi' => 'partial_hi',
        'humidity' => 'humidity',
        'temperature' => 'temperature',
        'impulsesPerUnit' => 'impulsesPerUnit',
        'counter' => 'counter',
        'calculatedValue' => 'calculatedValue',
        'unit' => 'unit',
        'currentOverload' => 'currentOverload',
        'isCalibrating' => 'is_calibrating',
        'notCalibrated' => 'not_calibrated',
        'shut' => 'shut',
        'closed' => 'closed',
        'manuallyClosed' => 'manuallyClosed',
        'flooding' => 'flooding',
        'executing' => 'executing',
        'initiatorTypeId' => 'initiatorTypeId',
        'initiatorType' => 'initiatorType',
        'initiatorId' => 'initiatorId',
        'initiatorName' => 'initiatorName',
        'millisecondsFromStart' => 'millisecondsFromStart',
        'millisecondsToEnd' => 'millisecondsToEnd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connected' => 'setConnected',
        'brightness' => 'setBrightness',
        'on' => 'setOn',
        'color' => 'setColor',
        'colorBrightness' => 'setColorBrightness',
        'depth' => 'setDepth',
        'distance' => 'setDistance',
        'value' => 'setValue',
        'support' => 'setSupport',
        'totalCost' => 'setTotalCost',
        'pricePerUnit' => 'setPricePerUnit',
        'currency' => 'setCurrency',
        'phases' => 'setPhases',
        'hi' => 'setHi',
        'partialHi' => 'setPartialHi',
        'humidity' => 'setHumidity',
        'temperature' => 'setTemperature',
        'impulsesPerUnit' => 'setImpulsesPerUnit',
        'counter' => 'setCounter',
        'calculatedValue' => 'setCalculatedValue',
        'unit' => 'setUnit',
        'currentOverload' => 'setCurrentOverload',
        'isCalibrating' => 'setIsCalibrating',
        'notCalibrated' => 'setNotCalibrated',
        'shut' => 'setShut',
        'closed' => 'setClosed',
        'manuallyClosed' => 'setManuallyClosed',
        'flooding' => 'setFlooding',
        'executing' => 'setExecuting',
        'initiatorTypeId' => 'setInitiatorTypeId',
        'initiatorType' => 'setInitiatorType',
        'initiatorId' => 'setInitiatorId',
        'initiatorName' => 'setInitiatorName',
        'millisecondsFromStart' => 'setMillisecondsFromStart',
        'millisecondsToEnd' => 'setMillisecondsToEnd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connected' => 'getConnected',
        'brightness' => 'getBrightness',
        'on' => 'getOn',
        'color' => 'getColor',
        'colorBrightness' => 'getColorBrightness',
        'depth' => 'getDepth',
        'distance' => 'getDistance',
        'value' => 'getValue',
        'support' => 'getSupport',
        'totalCost' => 'getTotalCost',
        'pricePerUnit' => 'getPricePerUnit',
        'currency' => 'getCurrency',
        'phases' => 'getPhases',
        'hi' => 'getHi',
        'partialHi' => 'getPartialHi',
        'humidity' => 'getHumidity',
        'temperature' => 'getTemperature',
        'impulsesPerUnit' => 'getImpulsesPerUnit',
        'counter' => 'getCounter',
        'calculatedValue' => 'getCalculatedValue',
        'unit' => 'getUnit',
        'currentOverload' => 'getCurrentOverload',
        'isCalibrating' => 'getIsCalibrating',
        'notCalibrated' => 'getNotCalibrated',
        'shut' => 'getShut',
        'closed' => 'getClosed',
        'manuallyClosed' => 'getManuallyClosed',
        'flooding' => 'getFlooding',
        'executing' => 'getExecuting',
        'initiatorTypeId' => 'getInitiatorTypeId',
        'initiatorType' => 'getInitiatorType',
        'initiatorId' => 'getInitiatorId',
        'initiatorName' => 'getInitiatorName',
        'millisecondsFromStart' => 'getMillisecondsFromStart',
        'millisecondsToEnd' => 'getMillisecondsToEnd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const INITIATOR_TYPE_ID_0 = 0;
    const INITIATOR_TYPE_ID_1 = 1;
    const INITIATOR_TYPE_ID_2 = 2;
    const INITIATOR_TYPE_ID_3 = 3;
    const INITIATOR_TYPE_ID_4 = 4;
    const INITIATOR_TYPE_ID_5 = 5;
    const INITIATOR_TYPE_ID_6 = 6;
    const INITIATOR_TYPE_ID_7 = 7;
    const INITIATOR_TYPE_ID_8 = 8;
    const INITIATOR_TYPE_UNKNOWN = 'UNKNOWN';
    const INITIATOR_TYPE_DEVICE = 'DEVICE';
    const INITIATOR_TYPE_CLIENT = 'CLIENT';
    const INITIATOR_TYPE_IPC = 'IPC';
    const INITIATOR_TYPE_MQTT = 'MQTT';
    const INITIATOR_TYPE_AMAZON_ALEXA = 'AMAZON_ALEXA';
    const INITIATOR_TYPE_GOOGLE_HOME = 'GOOGLE_HOME';
    const INITIATOR_TYPE_ACTION_TRIGGER = 'ACTION_TRIGGER';
    const INITIATOR_TYPE_SCENE = 'SCENE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInitiatorTypeIdAllowableValues()
    {
        return [
            self::INITIATOR_TYPE_ID_0,
            self::INITIATOR_TYPE_ID_1,
            self::INITIATOR_TYPE_ID_2,
            self::INITIATOR_TYPE_ID_3,
            self::INITIATOR_TYPE_ID_4,
            self::INITIATOR_TYPE_ID_5,
            self::INITIATOR_TYPE_ID_6,
            self::INITIATOR_TYPE_ID_7,
            self::INITIATOR_TYPE_ID_8,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInitiatorTypeAllowableValues()
    {
        return [
            self::INITIATOR_TYPE_UNKNOWN,
            self::INITIATOR_TYPE_DEVICE,
            self::INITIATOR_TYPE_CLIENT,
            self::INITIATOR_TYPE_IPC,
            self::INITIATOR_TYPE_MQTT,
            self::INITIATOR_TYPE_AMAZON_ALEXA,
            self::INITIATOR_TYPE_GOOGLE_HOME,
            self::INITIATOR_TYPE_ACTION_TRIGGER,
            self::INITIATOR_TYPE_SCENE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['connected'] = $data['connected'] ?? null;
        $this->container['brightness'] = $data['brightness'] ?? null;
        $this->container['on'] = $data['on'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['colorBrightness'] = $data['colorBrightness'] ?? null;
        $this->container['depth'] = $data['depth'] ?? null;
        $this->container['distance'] = $data['distance'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['support'] = $data['support'] ?? null;
        $this->container['totalCost'] = $data['totalCost'] ?? null;
        $this->container['pricePerUnit'] = $data['pricePerUnit'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['phases'] = $data['phases'] ?? null;
        $this->container['hi'] = $data['hi'] ?? null;
        $this->container['partialHi'] = $data['partialHi'] ?? null;
        $this->container['humidity'] = $data['humidity'] ?? null;
        $this->container['temperature'] = $data['temperature'] ?? null;
        $this->container['impulsesPerUnit'] = $data['impulsesPerUnit'] ?? null;
        $this->container['counter'] = $data['counter'] ?? null;
        $this->container['calculatedValue'] = $data['calculatedValue'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
        $this->container['currentOverload'] = $data['currentOverload'] ?? null;
        $this->container['isCalibrating'] = $data['isCalibrating'] ?? null;
        $this->container['notCalibrated'] = $data['notCalibrated'] ?? null;
        $this->container['shut'] = $data['shut'] ?? null;
        $this->container['closed'] = $data['closed'] ?? null;
        $this->container['manuallyClosed'] = $data['manuallyClosed'] ?? null;
        $this->container['flooding'] = $data['flooding'] ?? null;
        $this->container['executing'] = $data['executing'] ?? null;
        $this->container['initiatorTypeId'] = $data['initiatorTypeId'] ?? null;
        $this->container['initiatorType'] = $data['initiatorType'] ?? null;
        $this->container['initiatorId'] = $data['initiatorId'] ?? null;
        $this->container['initiatorName'] = $data['initiatorName'] ?? null;
        $this->container['millisecondsFromStart'] = $data['millisecondsFromStart'] ?? null;
        $this->container['millisecondsToEnd'] = $data['millisecondsToEnd'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['brightness']) && ($this->container['brightness'] > 100)) {
            $invalidProperties[] = "invalid value for 'brightness', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['brightness']) && ($this->container['brightness'] < 0)) {
            $invalidProperties[] = "invalid value for 'brightness', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['colorBrightness']) && ($this->container['colorBrightness'] > 100)) {
            $invalidProperties[] = "invalid value for 'colorBrightness', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['colorBrightness']) && ($this->container['colorBrightness'] < 0)) {
            $invalidProperties[] = "invalid value for 'colorBrightness', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['depth']) && ($this->container['depth'] < 0)) {
            $invalidProperties[] = "invalid value for 'depth', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['distance']) && ($this->container['distance'] < 0)) {
            $invalidProperties[] = "invalid value for 'distance', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['humidity']) && ($this->container['humidity'] > 100)) {
            $invalidProperties[] = "invalid value for 'humidity', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['humidity']) && ($this->container['humidity'] < 0)) {
            $invalidProperties[] = "invalid value for 'humidity', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shut']) && ($this->container['shut'] > 100)) {
            $invalidProperties[] = "invalid value for 'shut', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['shut']) && ($this->container['shut'] < 0)) {
            $invalidProperties[] = "invalid value for 'shut', must be bigger than or equal to 0.";
        }

        if ($this->container['executing'] === null) {
            $invalidProperties[] = "'executing' can't be null";
        }
        $allowedValues = $this->getInitiatorTypeIdAllowableValues();
        if (!is_null($this->container['initiatorTypeId']) && !in_array($this->container['initiatorTypeId'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'initiatorTypeId', must be one of '%s'",
                $this->container['initiatorTypeId'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInitiatorTypeAllowableValues();
        if (!is_null($this->container['initiatorType']) && !in_array($this->container['initiatorType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'initiatorType', must be one of '%s'",
                $this->container['initiatorType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connected
     *
     * @return bool|null
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param bool|null $connected connected
     *
     * @return self
     */
    public function setConnected($connected)
    {
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets brightness
     *
     * @return int|null
     */
    public function getBrightness()
    {
        return $this->container['brightness'];
    }

    /**
     * Sets brightness
     *
     * @param int|null $brightness current dimmer brightness value in percent
     *
     * @return self
     */
    public function setBrightness($brightness)
    {

        if (!is_null($brightness) && ($brightness > 100)) {
            throw new \InvalidArgumentException('invalid value for $brightness when calling ChannelState., must be smaller than or equal to 100.');
        }
        if (!is_null($brightness) && ($brightness < 0)) {
            throw new \InvalidArgumentException('invalid value for $brightness when calling ChannelState., must be bigger than or equal to 0.');
        }

        $this->container['brightness'] = $brightness;

        return $this;
    }

    /**
     * Gets on
     *
     * @return bool|null
     */
    public function getOn()
    {
        return $this->container['on'];
    }

    /**
     * Sets on
     *
     * @param bool|null $on on
     *
     * @return self
     */
    public function setOn($on)
    {
        $this->container['on'] = $on;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color integer (hex) value of a current color, ranging from `0x000001` to `0xFFFFFF`
     *
     * @return self
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets colorBrightness
     *
     * @return int|null
     */
    public function getColorBrightness()
    {
        return $this->container['colorBrightness'];
    }

    /**
     * Sets colorBrightness
     *
     * @param int|null $colorBrightness color brightness in percent
     *
     * @return self
     */
    public function setColorBrightness($colorBrightness)
    {

        if (!is_null($colorBrightness) && ($colorBrightness > 100)) {
            throw new \InvalidArgumentException('invalid value for $colorBrightness when calling ChannelState., must be smaller than or equal to 100.');
        }
        if (!is_null($colorBrightness) && ($colorBrightness < 0)) {
            throw new \InvalidArgumentException('invalid value for $colorBrightness when calling ChannelState., must be bigger than or equal to 0.');
        }

        $this->container['colorBrightness'] = $colorBrightness;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return int|null
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param int|null $depth depth
     *
     * @return self
     */
    public function setDepth($depth)
    {

        if (!is_null($depth) && ($depth < 0)) {
            throw new \InvalidArgumentException('invalid value for $depth when calling ChannelState., must be bigger than or equal to 0.');
        }

        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int|null
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int|null $distance distance
     *
     * @return self
     */
    public function setDistance($distance)
    {

        if (!is_null($distance) && ($distance < 0)) {
            throw new \InvalidArgumentException('invalid value for $distance when calling ChannelState., must be bigger than or equal to 0.');
        }

        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets support
     *
     * @return int|null
     */
    public function getSupport()
    {
        return $this->container['support'];
    }

    /**
     * Sets support
     *
     * @param int|null $support A bitmask indicating which measurements are supported by the electricity meter. See https://github.com/SUPLA/supla-cloud/blob/master/src/SuplaBundle/Enums/ElectricityMeterSupportBits.php for more info. All not supported measurements will not be present in the response.
     *
     * @return self
     */
    public function setSupport($support)
    {
        $this->container['support'] = $support;

        return $this;
    }

    /**
     * Gets totalCost
     *
     * @return float|null
     */
    public function getTotalCost()
    {
        return $this->container['totalCost'];
    }

    /**
     * Sets totalCost
     *
     * @param float|null $totalCost totalCost
     *
     * @return self
     */
    public function setTotalCost($totalCost)
    {
        $this->container['totalCost'] = $totalCost;

        return $this;
    }

    /**
     * Gets pricePerUnit
     *
     * @return float|null
     */
    public function getPricePerUnit()
    {
        return $this->container['pricePerUnit'];
    }

    /**
     * Sets pricePerUnit
     *
     * @param float|null $pricePerUnit pricePerUnit
     *
     * @return self
     */
    public function setPricePerUnit($pricePerUnit)
    {
        $this->container['pricePerUnit'] = $pricePerUnit;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets phases
     *
     * @return \Supla\ApiClient\Model\ChannelStateElectricityMeterPhase[]|null
     */
    public function getPhases()
    {
        return $this->container['phases'];
    }

    /**
     * Sets phases
     *
     * @param \Supla\ApiClient\Model\ChannelStateElectricityMeterPhase[]|null $phases phases
     *
     * @return self
     */
    public function setPhases($phases)
    {
        $this->container['phases'] = $phases;

        return $this;
    }

    /**
     * Gets hi
     *
     * @return bool|null
     */
    public function getHi()
    {
        return $this->container['hi'];
    }

    /**
     * Sets hi
     *
     * @param bool|null $hi hi
     *
     * @return self
     */
    public function setHi($hi)
    {
        $this->container['hi'] = $hi;

        return $this;
    }

    /**
     * Gets partialHi
     *
     * @return bool|null
     */
    public function getPartialHi()
    {
        return $this->container['partialHi'];
    }

    /**
     * Sets partialHi
     *
     * @param bool|null $partialHi partialHi
     *
     * @return self
     */
    public function setPartialHi($partialHi)
    {
        $this->container['partialHi'] = $partialHi;

        return $this;
    }

    /**
     * Gets humidity
     *
     * @return float|null
     */
    public function getHumidity()
    {
        return $this->container['humidity'];
    }

    /**
     * Sets humidity
     *
     * @param float|null $humidity value provided by the sensor, including possibly configured delta adjustment
     *
     * @return self
     */
    public function setHumidity($humidity)
    {

        if (!is_null($humidity) && ($humidity > 100)) {
            throw new \InvalidArgumentException('invalid value for $humidity when calling ChannelState., must be smaller than or equal to 100.');
        }
        if (!is_null($humidity) && ($humidity < 0)) {
            throw new \InvalidArgumentException('invalid value for $humidity when calling ChannelState., must be bigger than or equal to 0.');
        }

        $this->container['humidity'] = $humidity;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature value provided by the sensor, including possibly configured delta adjustment
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets impulsesPerUnit
     *
     * @return int|null
     */
    public function getImpulsesPerUnit()
    {
        return $this->container['impulsesPerUnit'];
    }

    /**
     * Sets impulsesPerUnit
     *
     * @param int|null $impulsesPerUnit impulsesPerUnit
     *
     * @return self
     */
    public function setImpulsesPerUnit($impulsesPerUnit)
    {
        $this->container['impulsesPerUnit'] = $impulsesPerUnit;

        return $this;
    }

    /**
     * Gets counter
     *
     * @return int|null
     */
    public function getCounter()
    {
        return $this->container['counter'];
    }

    /**
     * Sets counter
     *
     * @param int|null $counter counter
     *
     * @return self
     */
    public function setCounter($counter)
    {
        $this->container['counter'] = $counter;

        return $this;
    }

    /**
     * Gets calculatedValue
     *
     * @return float|null
     */
    public function getCalculatedValue()
    {
        return $this->container['calculatedValue'];
    }

    /**
     * Sets calculatedValue
     *
     * @param float|null $calculatedValue calculatedValue
     *
     * @return self
     */
    public function setCalculatedValue($calculatedValue)
    {
        $this->container['calculatedValue'] = $calculatedValue;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets currentOverload
     *
     * @return bool|null
     */
    public function getCurrentOverload()
    {
        return $this->container['currentOverload'];
    }

    /**
     * Sets currentOverload
     *
     * @param bool|null $currentOverload currentOverload
     *
     * @return self
     */
    public function setCurrentOverload($currentOverload)
    {
        $this->container['currentOverload'] = $currentOverload;

        return $this;
    }

    /**
     * Gets isCalibrating
     *
     * @return bool|null
     */
    public function getIsCalibrating()
    {
        return $this->container['isCalibrating'];
    }

    /**
     * Sets isCalibrating
     *
     * @param bool|null $isCalibrating isCalibrating
     *
     * @return self
     */
    public function setIsCalibrating($isCalibrating)
    {
        $this->container['isCalibrating'] = $isCalibrating;

        return $this;
    }

    /**
     * Gets notCalibrated
     *
     * @return bool|null
     */
    public function getNotCalibrated()
    {
        return $this->container['notCalibrated'];
    }

    /**
     * Sets notCalibrated
     *
     * @param bool|null $notCalibrated notCalibrated
     *
     * @return self
     */
    public function setNotCalibrated($notCalibrated)
    {
        $this->container['notCalibrated'] = $notCalibrated;

        return $this;
    }

    /**
     * Gets shut
     *
     * @return int|null
     */
    public function getShut()
    {
        return $this->container['shut'];
    }

    /**
     * Sets shut
     *
     * @param int|null $shut shut
     *
     * @return self
     */
    public function setShut($shut)
    {

        if (!is_null($shut) && ($shut > 100)) {
            throw new \InvalidArgumentException('invalid value for $shut when calling ChannelState., must be smaller than or equal to 100.');
        }
        if (!is_null($shut) && ($shut < 0)) {
            throw new \InvalidArgumentException('invalid value for $shut when calling ChannelState., must be bigger than or equal to 0.');
        }

        $this->container['shut'] = $shut;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool|null
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool|null $closed closed
     *
     * @return self
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets manuallyClosed
     *
     * @return bool|null
     */
    public function getManuallyClosed()
    {
        return $this->container['manuallyClosed'];
    }

    /**
     * Sets manuallyClosed
     *
     * @param bool|null $manuallyClosed manuallyClosed
     *
     * @return self
     */
    public function setManuallyClosed($manuallyClosed)
    {
        $this->container['manuallyClosed'] = $manuallyClosed;

        return $this;
    }

    /**
     * Gets flooding
     *
     * @return bool|null
     */
    public function getFlooding()
    {
        return $this->container['flooding'];
    }

    /**
     * Sets flooding
     *
     * @param bool|null $flooding flooding
     *
     * @return self
     */
    public function setFlooding($flooding)
    {
        $this->container['flooding'] = $flooding;

        return $this;
    }

    /**
     * Gets executing
     *
     * @return bool
     */
    public function getExecuting()
    {
        return $this->container['executing'];
    }

    /**
     * Sets executing
     *
     * @param bool $executing executing
     *
     * @return self
     */
    public function setExecuting($executing)
    {
        $this->container['executing'] = $executing;

        return $this;
    }

    /**
     * Gets initiatorTypeId
     *
     * @return int|null
     */
    public function getInitiatorTypeId()
    {
        return $this->container['initiatorTypeId'];
    }

    /**
     * Sets initiatorTypeId
     *
     * @param int|null $initiatorTypeId initiatorTypeId
     *
     * @return self
     */
    public function setInitiatorTypeId($initiatorTypeId)
    {
        $allowedValues = $this->getInitiatorTypeIdAllowableValues();
        if (!is_null($initiatorTypeId) && !in_array($initiatorTypeId, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'initiatorTypeId', must be one of '%s'",
                    $initiatorTypeId,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['initiatorTypeId'] = $initiatorTypeId;

        return $this;
    }

    /**
     * Gets initiatorType
     *
     * @return string|null
     */
    public function getInitiatorType()
    {
        return $this->container['initiatorType'];
    }

    /**
     * Sets initiatorType
     *
     * @param string|null $initiatorType initiatorType
     *
     * @return self
     */
    public function setInitiatorType($initiatorType)
    {
        $allowedValues = $this->getInitiatorTypeAllowableValues();
        if (!is_null($initiatorType) && !in_array($initiatorType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'initiatorType', must be one of '%s'",
                    $initiatorType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['initiatorType'] = $initiatorType;

        return $this;
    }

    /**
     * Gets initiatorId
     *
     * @return int|null
     */
    public function getInitiatorId()
    {
        return $this->container['initiatorId'];
    }

    /**
     * Sets initiatorId
     *
     * @param int|null $initiatorId initiatorId
     *
     * @return self
     */
    public function setInitiatorId($initiatorId)
    {
        $this->container['initiatorId'] = $initiatorId;

        return $this;
    }

    /**
     * Gets initiatorName
     *
     * @return string|null
     */
    public function getInitiatorName()
    {
        return $this->container['initiatorName'];
    }

    /**
     * Sets initiatorName
     *
     * @param string|null $initiatorName initiatorName
     *
     * @return self
     */
    public function setInitiatorName($initiatorName)
    {
        $this->container['initiatorName'] = $initiatorName;

        return $this;
    }

    /**
     * Gets millisecondsFromStart
     *
     * @return int|null
     */
    public function getMillisecondsFromStart()
    {
        return $this->container['millisecondsFromStart'];
    }

    /**
     * Sets millisecondsFromStart
     *
     * @param int|null $millisecondsFromStart millisecondsFromStart
     *
     * @return self
     */
    public function setMillisecondsFromStart($millisecondsFromStart)
    {
        $this->container['millisecondsFromStart'] = $millisecondsFromStart;

        return $this;
    }

    /**
     * Gets millisecondsToEnd
     *
     * @return int|null
     */
    public function getMillisecondsToEnd()
    {
        return $this->container['millisecondsToEnd'];
    }

    /**
     * Sets millisecondsToEnd
     *
     * @param int|null $millisecondsToEnd millisecondsToEnd
     *
     * @return self
     */
    public function setMillisecondsToEnd($millisecondsToEnd)
    {
        $this->container['millisecondsToEnd'] = $millisecondsToEnd;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


