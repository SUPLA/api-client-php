<?php
/**
 * GetChannelMeasurementLogs200ResponseOneOfInner3
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * GetChannelMeasurementLogs200ResponseOneOfInner3 Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetChannelMeasurementLogs200ResponseOneOfInner3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getChannelMeasurementLogs_200_response_oneOf_inner_3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dateTimestamp' => 'int',
        'phase1Fae' => 'int',
        'phase1Rae' => 'int',
        'phase1Fre' => 'int',
        'phase1Rre' => 'int',
        'phase2Fae' => 'int',
        'phase2Rae' => 'int',
        'phase2Fre' => 'int',
        'phase2Rre' => 'int',
        'phase3Fae' => 'int',
        'phase3Rae' => 'int',
        'phase3Fre' => 'int',
        'phase3Rre' => 'int',
        'faeBalanced' => 'int',
        'raeBalanced' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dateTimestamp' => null,
        'phase1Fae' => null,
        'phase1Rae' => null,
        'phase1Fre' => null,
        'phase1Rre' => null,
        'phase2Fae' => null,
        'phase2Rae' => null,
        'phase2Fre' => null,
        'phase2Rre' => null,
        'phase3Fae' => null,
        'phase3Rae' => null,
        'phase3Fre' => null,
        'phase3Rre' => null,
        'faeBalanced' => null,
        'raeBalanced' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dateTimestamp' => false,
        'phase1Fae' => true,
        'phase1Rae' => true,
        'phase1Fre' => true,
        'phase1Rre' => true,
        'phase2Fae' => true,
        'phase2Rae' => true,
        'phase2Fre' => true,
        'phase2Rre' => true,
        'phase3Fae' => true,
        'phase3Rae' => true,
        'phase3Fre' => true,
        'phase3Rre' => true,
        'faeBalanced' => true,
        'raeBalanced' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateTimestamp' => 'date_timestamp',
        'phase1Fae' => 'phase1_fae',
        'phase1Rae' => 'phase1_rae',
        'phase1Fre' => 'phase1_fre',
        'phase1Rre' => 'phase1_rre',
        'phase2Fae' => 'phase2_fae',
        'phase2Rae' => 'phase2_rae',
        'phase2Fre' => 'phase2_fre',
        'phase2Rre' => 'phase2_rre',
        'phase3Fae' => 'phase3_fae',
        'phase3Rae' => 'phase3_rae',
        'phase3Fre' => 'phase3_fre',
        'phase3Rre' => 'phase3_rre',
        'faeBalanced' => 'fae_balanced',
        'raeBalanced' => 'rae_balanced'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateTimestamp' => 'setDateTimestamp',
        'phase1Fae' => 'setPhase1Fae',
        'phase1Rae' => 'setPhase1Rae',
        'phase1Fre' => 'setPhase1Fre',
        'phase1Rre' => 'setPhase1Rre',
        'phase2Fae' => 'setPhase2Fae',
        'phase2Rae' => 'setPhase2Rae',
        'phase2Fre' => 'setPhase2Fre',
        'phase2Rre' => 'setPhase2Rre',
        'phase3Fae' => 'setPhase3Fae',
        'phase3Rae' => 'setPhase3Rae',
        'phase3Fre' => 'setPhase3Fre',
        'phase3Rre' => 'setPhase3Rre',
        'faeBalanced' => 'setFaeBalanced',
        'raeBalanced' => 'setRaeBalanced'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateTimestamp' => 'getDateTimestamp',
        'phase1Fae' => 'getPhase1Fae',
        'phase1Rae' => 'getPhase1Rae',
        'phase1Fre' => 'getPhase1Fre',
        'phase1Rre' => 'getPhase1Rre',
        'phase2Fae' => 'getPhase2Fae',
        'phase2Rae' => 'getPhase2Rae',
        'phase2Fre' => 'getPhase2Fre',
        'phase2Rre' => 'getPhase2Rre',
        'phase3Fae' => 'getPhase3Fae',
        'phase3Rae' => 'getPhase3Rae',
        'phase3Fre' => 'getPhase3Fre',
        'phase3Rre' => 'getPhase3Rre',
        'faeBalanced' => 'getFaeBalanced',
        'raeBalanced' => 'getRaeBalanced'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('dateTimestamp', $data ?? [], null);
        $this->setIfExists('phase1Fae', $data ?? [], null);
        $this->setIfExists('phase1Rae', $data ?? [], null);
        $this->setIfExists('phase1Fre', $data ?? [], null);
        $this->setIfExists('phase1Rre', $data ?? [], null);
        $this->setIfExists('phase2Fae', $data ?? [], null);
        $this->setIfExists('phase2Rae', $data ?? [], null);
        $this->setIfExists('phase2Fre', $data ?? [], null);
        $this->setIfExists('phase2Rre', $data ?? [], null);
        $this->setIfExists('phase3Fae', $data ?? [], null);
        $this->setIfExists('phase3Rae', $data ?? [], null);
        $this->setIfExists('phase3Fre', $data ?? [], null);
        $this->setIfExists('phase3Rre', $data ?? [], null);
        $this->setIfExists('faeBalanced', $data ?? [], null);
        $this->setIfExists('raeBalanced', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dateTimestamp
     *
     * @return int|null
     */
    public function getDateTimestamp()
    {
        return $this->container['dateTimestamp'];
    }

    /**
     * Sets dateTimestamp
     *
     * @param int|null $dateTimestamp dateTimestamp
     *
     * @return self
     */
    public function setDateTimestamp($dateTimestamp)
    {
        if (is_null($dateTimestamp)) {
            throw new \InvalidArgumentException('non-nullable dateTimestamp cannot be null');
        }
        $this->container['dateTimestamp'] = $dateTimestamp;

        return $this;
    }

    /**
     * Gets phase1Fae
     *
     * @return int|null
     */
    public function getPhase1Fae()
    {
        return $this->container['phase1Fae'];
    }

    /**
     * Sets phase1Fae
     *
     * @param int|null $phase1Fae phase1Fae
     *
     * @return self
     */
    public function setPhase1Fae($phase1Fae)
    {
        if (is_null($phase1Fae)) {
            array_push($this->openAPINullablesSetToNull, 'phase1Fae');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase1Fae', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase1Fae'] = $phase1Fae;

        return $this;
    }

    /**
     * Gets phase1Rae
     *
     * @return int|null
     */
    public function getPhase1Rae()
    {
        return $this->container['phase1Rae'];
    }

    /**
     * Sets phase1Rae
     *
     * @param int|null $phase1Rae phase1Rae
     *
     * @return self
     */
    public function setPhase1Rae($phase1Rae)
    {
        if (is_null($phase1Rae)) {
            array_push($this->openAPINullablesSetToNull, 'phase1Rae');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase1Rae', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase1Rae'] = $phase1Rae;

        return $this;
    }

    /**
     * Gets phase1Fre
     *
     * @return int|null
     */
    public function getPhase1Fre()
    {
        return $this->container['phase1Fre'];
    }

    /**
     * Sets phase1Fre
     *
     * @param int|null $phase1Fre phase1Fre
     *
     * @return self
     */
    public function setPhase1Fre($phase1Fre)
    {
        if (is_null($phase1Fre)) {
            array_push($this->openAPINullablesSetToNull, 'phase1Fre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase1Fre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase1Fre'] = $phase1Fre;

        return $this;
    }

    /**
     * Gets phase1Rre
     *
     * @return int|null
     */
    public function getPhase1Rre()
    {
        return $this->container['phase1Rre'];
    }

    /**
     * Sets phase1Rre
     *
     * @param int|null $phase1Rre phase1Rre
     *
     * @return self
     */
    public function setPhase1Rre($phase1Rre)
    {
        if (is_null($phase1Rre)) {
            array_push($this->openAPINullablesSetToNull, 'phase1Rre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase1Rre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase1Rre'] = $phase1Rre;

        return $this;
    }

    /**
     * Gets phase2Fae
     *
     * @return int|null
     */
    public function getPhase2Fae()
    {
        return $this->container['phase2Fae'];
    }

    /**
     * Sets phase2Fae
     *
     * @param int|null $phase2Fae phase2Fae
     *
     * @return self
     */
    public function setPhase2Fae($phase2Fae)
    {
        if (is_null($phase2Fae)) {
            array_push($this->openAPINullablesSetToNull, 'phase2Fae');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase2Fae', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase2Fae'] = $phase2Fae;

        return $this;
    }

    /**
     * Gets phase2Rae
     *
     * @return int|null
     */
    public function getPhase2Rae()
    {
        return $this->container['phase2Rae'];
    }

    /**
     * Sets phase2Rae
     *
     * @param int|null $phase2Rae phase2Rae
     *
     * @return self
     */
    public function setPhase2Rae($phase2Rae)
    {
        if (is_null($phase2Rae)) {
            array_push($this->openAPINullablesSetToNull, 'phase2Rae');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase2Rae', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase2Rae'] = $phase2Rae;

        return $this;
    }

    /**
     * Gets phase2Fre
     *
     * @return int|null
     */
    public function getPhase2Fre()
    {
        return $this->container['phase2Fre'];
    }

    /**
     * Sets phase2Fre
     *
     * @param int|null $phase2Fre phase2Fre
     *
     * @return self
     */
    public function setPhase2Fre($phase2Fre)
    {
        if (is_null($phase2Fre)) {
            array_push($this->openAPINullablesSetToNull, 'phase2Fre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase2Fre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase2Fre'] = $phase2Fre;

        return $this;
    }

    /**
     * Gets phase2Rre
     *
     * @return int|null
     */
    public function getPhase2Rre()
    {
        return $this->container['phase2Rre'];
    }

    /**
     * Sets phase2Rre
     *
     * @param int|null $phase2Rre phase2Rre
     *
     * @return self
     */
    public function setPhase2Rre($phase2Rre)
    {
        if (is_null($phase2Rre)) {
            array_push($this->openAPINullablesSetToNull, 'phase2Rre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase2Rre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase2Rre'] = $phase2Rre;

        return $this;
    }

    /**
     * Gets phase3Fae
     *
     * @return int|null
     */
    public function getPhase3Fae()
    {
        return $this->container['phase3Fae'];
    }

    /**
     * Sets phase3Fae
     *
     * @param int|null $phase3Fae phase3Fae
     *
     * @return self
     */
    public function setPhase3Fae($phase3Fae)
    {
        if (is_null($phase3Fae)) {
            array_push($this->openAPINullablesSetToNull, 'phase3Fae');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase3Fae', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase3Fae'] = $phase3Fae;

        return $this;
    }

    /**
     * Gets phase3Rae
     *
     * @return int|null
     */
    public function getPhase3Rae()
    {
        return $this->container['phase3Rae'];
    }

    /**
     * Sets phase3Rae
     *
     * @param int|null $phase3Rae phase3Rae
     *
     * @return self
     */
    public function setPhase3Rae($phase3Rae)
    {
        if (is_null($phase3Rae)) {
            array_push($this->openAPINullablesSetToNull, 'phase3Rae');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase3Rae', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase3Rae'] = $phase3Rae;

        return $this;
    }

    /**
     * Gets phase3Fre
     *
     * @return int|null
     */
    public function getPhase3Fre()
    {
        return $this->container['phase3Fre'];
    }

    /**
     * Sets phase3Fre
     *
     * @param int|null $phase3Fre phase3Fre
     *
     * @return self
     */
    public function setPhase3Fre($phase3Fre)
    {
        if (is_null($phase3Fre)) {
            array_push($this->openAPINullablesSetToNull, 'phase3Fre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase3Fre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase3Fre'] = $phase3Fre;

        return $this;
    }

    /**
     * Gets phase3Rre
     *
     * @return int|null
     */
    public function getPhase3Rre()
    {
        return $this->container['phase3Rre'];
    }

    /**
     * Sets phase3Rre
     *
     * @param int|null $phase3Rre phase3Rre
     *
     * @return self
     */
    public function setPhase3Rre($phase3Rre)
    {
        if (is_null($phase3Rre)) {
            array_push($this->openAPINullablesSetToNull, 'phase3Rre');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phase3Rre', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phase3Rre'] = $phase3Rre;

        return $this;
    }

    /**
     * Gets faeBalanced
     *
     * @return int|null
     */
    public function getFaeBalanced()
    {
        return $this->container['faeBalanced'];
    }

    /**
     * Sets faeBalanced
     *
     * @param int|null $faeBalanced faeBalanced
     *
     * @return self
     */
    public function setFaeBalanced($faeBalanced)
    {
        if (is_null($faeBalanced)) {
            array_push($this->openAPINullablesSetToNull, 'faeBalanced');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('faeBalanced', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['faeBalanced'] = $faeBalanced;

        return $this;
    }

    /**
     * Gets raeBalanced
     *
     * @return int|null
     */
    public function getRaeBalanced()
    {
        return $this->container['raeBalanced'];
    }

    /**
     * Sets raeBalanced
     *
     * @param int|null $raeBalanced raeBalanced
     *
     * @return self
     */
    public function setRaeBalanced($raeBalanced)
    {
        if (is_null($raeBalanced)) {
            array_push($this->openAPINullablesSetToNull, 'raeBalanced');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('raeBalanced', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['raeBalanced'] = $raeBalanced;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


