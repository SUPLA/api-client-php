<?php
/**
 * Device
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Device Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Device implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Device';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'enabled' => 'bool',
        'comment' => 'string',
        'regDate' => '\DateTime',
        'regIpv4' => 'int',
        'lastConnected' => '\DateTime',
        'lastIpv4' => 'int',
        'softwareVersion' => 'string',
        'gUIDString' => 'string',
        'locationId' => 'int',
        'originalLocationId' => 'int',
        'channelsIds' => 'int[]',
        'connected' => 'bool',
        'location' => '\Swagger\Client\Model\Location',
        'originalLocation' => '\Swagger\Client\Model\Location',
        'channels' => '\Swagger\Client\Model\Channel[]',
        'schedules' => '\Swagger\Client\Model\Schedule[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'enabled' => null,
        'comment' => null,
        'regDate' => 'date-time',
        'regIpv4' => null,
        'lastConnected' => 'date-time',
        'lastIpv4' => null,
        'softwareVersion' => null,
        'gUIDString' => null,
        'locationId' => null,
        'originalLocationId' => null,
        'channelsIds' => null,
        'connected' => null,
        'location' => null,
        'originalLocation' => null,
        'channels' => null,
        'schedules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'enabled' => 'enabled',
        'comment' => 'comment',
        'regDate' => 'regDate',
        'regIpv4' => 'regIpv4',
        'lastConnected' => 'lastConnected',
        'lastIpv4' => 'lastIpv4',
        'softwareVersion' => 'softwareVersion',
        'gUIDString' => 'gUIDString',
        'locationId' => 'locationId',
        'originalLocationId' => 'originalLocationId',
        'channelsIds' => 'channelsIds',
        'connected' => 'connected',
        'location' => 'location',
        'originalLocation' => 'originalLocation',
        'channels' => 'channels',
        'schedules' => 'schedules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'enabled' => 'setEnabled',
        'comment' => 'setComment',
        'regDate' => 'setRegDate',
        'regIpv4' => 'setRegIpv4',
        'lastConnected' => 'setLastConnected',
        'lastIpv4' => 'setLastIpv4',
        'softwareVersion' => 'setSoftwareVersion',
        'gUIDString' => 'setGUIDString',
        'locationId' => 'setLocationId',
        'originalLocationId' => 'setOriginalLocationId',
        'channelsIds' => 'setChannelsIds',
        'connected' => 'setConnected',
        'location' => 'setLocation',
        'originalLocation' => 'setOriginalLocation',
        'channels' => 'setChannels',
        'schedules' => 'setSchedules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'enabled' => 'getEnabled',
        'comment' => 'getComment',
        'regDate' => 'getRegDate',
        'regIpv4' => 'getRegIpv4',
        'lastConnected' => 'getLastConnected',
        'lastIpv4' => 'getLastIpv4',
        'softwareVersion' => 'getSoftwareVersion',
        'gUIDString' => 'getGUIDString',
        'locationId' => 'getLocationId',
        'originalLocationId' => 'getOriginalLocationId',
        'channelsIds' => 'getChannelsIds',
        'connected' => 'getConnected',
        'location' => 'getLocation',
        'originalLocation' => 'getOriginalLocation',
        'channels' => 'getChannels',
        'schedules' => 'getSchedules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['regDate'] = isset($data['regDate']) ? $data['regDate'] : null;
        $this->container['regIpv4'] = isset($data['regIpv4']) ? $data['regIpv4'] : null;
        $this->container['lastConnected'] = isset($data['lastConnected']) ? $data['lastConnected'] : null;
        $this->container['lastIpv4'] = isset($data['lastIpv4']) ? $data['lastIpv4'] : null;
        $this->container['softwareVersion'] = isset($data['softwareVersion']) ? $data['softwareVersion'] : null;
        $this->container['gUIDString'] = isset($data['gUIDString']) ? $data['gUIDString'] : null;
        $this->container['locationId'] = isset($data['locationId']) ? $data['locationId'] : null;
        $this->container['originalLocationId'] = isset($data['originalLocationId']) ? $data['originalLocationId'] : null;
        $this->container['channelsIds'] = isset($data['channelsIds']) ? $data['channelsIds'] : null;
        $this->container['connected'] = isset($data['connected']) ? $data['connected'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['originalLocation'] = isset($data['originalLocation']) ? $data['originalLocation'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
        $this->container['schedules'] = isset($data['schedules']) ? $data['schedules'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Device identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets regDate
     *
     * @return \DateTime
     */
    public function getRegDate()
    {
        return $this->container['regDate'];
    }

    /**
     * Sets regDate
     *
     * @param \DateTime $regDate regDate
     *
     * @return $this
     */
    public function setRegDate($regDate)
    {
        $this->container['regDate'] = $regDate;

        return $this;
    }

    /**
     * Gets regIpv4
     *
     * @return int
     */
    public function getRegIpv4()
    {
        return $this->container['regIpv4'];
    }

    /**
     * Sets regIpv4
     *
     * @param int $regIpv4 regIpv4
     *
     * @return $this
     */
    public function setRegIpv4($regIpv4)
    {
        $this->container['regIpv4'] = $regIpv4;

        return $this;
    }

    /**
     * Gets lastConnected
     *
     * @return \DateTime
     */
    public function getLastConnected()
    {
        return $this->container['lastConnected'];
    }

    /**
     * Sets lastConnected
     *
     * @param \DateTime $lastConnected lastConnected
     *
     * @return $this
     */
    public function setLastConnected($lastConnected)
    {
        $this->container['lastConnected'] = $lastConnected;

        return $this;
    }

    /**
     * Gets lastIpv4
     *
     * @return int
     */
    public function getLastIpv4()
    {
        return $this->container['lastIpv4'];
    }

    /**
     * Sets lastIpv4
     *
     * @param int $lastIpv4 lastIpv4
     *
     * @return $this
     */
    public function setLastIpv4($lastIpv4)
    {
        $this->container['lastIpv4'] = $lastIpv4;

        return $this;
    }

    /**
     * Gets softwareVersion
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['softwareVersion'];
    }

    /**
     * Sets softwareVersion
     *
     * @param string $softwareVersion softwareVersion
     *
     * @return $this
     */
    public function setSoftwareVersion($softwareVersion)
    {
        $this->container['softwareVersion'] = $softwareVersion;

        return $this;
    }

    /**
     * Gets gUIDString
     *
     * @return string
     */
    public function getGUIDString()
    {
        return $this->container['gUIDString'];
    }

    /**
     * Sets gUIDString
     *
     * @param string $gUIDString gUIDString
     *
     * @return $this
     */
    public function setGUIDString($gUIDString)
    {
        $this->container['gUIDString'] = $gUIDString;

        return $this;
    }

    /**
     * Gets locationId
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['locationId'];
    }

    /**
     * Sets locationId
     *
     * @param int $locationId locationId
     *
     * @return $this
     */
    public function setLocationId($locationId)
    {
        $this->container['locationId'] = $locationId;

        return $this;
    }

    /**
     * Gets originalLocationId
     *
     * @return int
     */
    public function getOriginalLocationId()
    {
        return $this->container['originalLocationId'];
    }

    /**
     * Sets originalLocationId
     *
     * @param int $originalLocationId originalLocationId
     *
     * @return $this
     */
    public function setOriginalLocationId($originalLocationId)
    {
        $this->container['originalLocationId'] = $originalLocationId;

        return $this;
    }

    /**
     * Gets channelsIds
     *
     * @return int[]
     */
    public function getChannelsIds()
    {
        return $this->container['channelsIds'];
    }

    /**
     * Sets channelsIds
     *
     * @param int[] $channelsIds channelsIds
     *
     * @return $this
     */
    public function setChannelsIds($channelsIds)
    {
        $this->container['channelsIds'] = $channelsIds;

        return $this;
    }

    /**
     * Gets connected
     *
     * @return bool
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param bool $connected connected
     *
     * @return $this
     */
    public function setConnected($connected)
    {
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets originalLocation
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getOriginalLocation()
    {
        return $this->container['originalLocation'];
    }

    /**
     * Sets originalLocation
     *
     * @param \Swagger\Client\Model\Location $originalLocation originalLocation
     *
     * @return $this
     */
    public function setOriginalLocation($originalLocation)
    {
        $this->container['originalLocation'] = $originalLocation;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \Swagger\Client\Model\Channel[]
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \Swagger\Client\Model\Channel[] $channels Returned only if requested by the `include` parameter.
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets schedules
     *
     * @return \Swagger\Client\Model\Schedule[]
     */
    public function getSchedules()
    {
        return $this->container['schedules'];
    }

    /**
     * Sets schedules
     *
     * @param \Swagger\Client\Model\Schedule[] $schedules Returned only if requested by the `include` parameter.
     *
     * @return $this
     */
    public function setSchedules($schedules)
    {
        $this->container['schedules'] = $schedules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


