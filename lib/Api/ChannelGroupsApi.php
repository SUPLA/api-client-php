<?php
/**
 * ChannelGroupsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Supla\ApiClient\ApiException;
use Supla\ApiClient\Configuration;
use Supla\ApiClient\HeaderSelector;
use Supla\ApiClient\ObjectSerializer;

/**
 * ChannelGroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ChannelGroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createChannelGroup' => [
            'application/json',
        ],
        'deleteChannelGroup' => [
            'application/json',
        ],
        'executeActionOnChannelGroup' => [
            'application/json',
        ],
        'getChannelGroup' => [
            'application/json',
        ],
        'getChannelGroupDirectLinks' => [
            'application/json',
        ],
        'getChannelGroupScenes' => [
            'application/json',
        ],
        'getChannelGroups' => [
            'application/json',
        ],
        'updateChannelGroup' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createChannelGroup
     *
     * Create a new channel group
     *
     * Supla API Client
     *
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\ChannelGroup
     */
    public function createChannelGroup($createChannelGroupRequest, string $contentType = self::contentTypes['createChannelGroup'][0])
    {
        list($response) = $this->createChannelGroupWithHttpInfo($createChannelGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation createChannelGroupWithHttpInfo
     *
     * Create a new channel group
     *
     * Supla API Client
     *
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\ChannelGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function createChannelGroupWithHttpInfo($createChannelGroupRequest, string $contentType = self::contentTypes['createChannelGroup'][0])
    {
        $request = $this->createChannelGroupRequest($createChannelGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Supla\ApiClient\Model\ChannelGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\ChannelGroup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\ChannelGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\ChannelGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\ChannelGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createChannelGroupAsync
     *
     * Create a new channel group
     *
     * Supla API Client
     *
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createChannelGroupAsync($createChannelGroupRequest, string $contentType = self::contentTypes['createChannelGroup'][0])
    {
        return $this->createChannelGroupAsyncWithHttpInfo($createChannelGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createChannelGroupAsyncWithHttpInfo
     *
     * Create a new channel group
     *
     * Supla API Client
     *
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createChannelGroupAsyncWithHttpInfo($createChannelGroupRequest, string $contentType = self::contentTypes['createChannelGroup'][0])
    {
        $returnType = '\Supla\ApiClient\Model\ChannelGroup';
        $request = $this->createChannelGroupRequest($createChannelGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createChannelGroup'
     *
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createChannelGroupRequest($createChannelGroupRequest, string $contentType = self::contentTypes['createChannelGroup'][0])
    {

        // verify the required parameter 'createChannelGroupRequest' is set
        if ($createChannelGroupRequest === null || (is_array($createChannelGroupRequest) && count($createChannelGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createChannelGroupRequest when calling createChannelGroup'
            );
        }


        $resourcePath = '/channel-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createChannelGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createChannelGroupRequest));
            } else {
                $httpBody = $createChannelGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteChannelGroup
     *
     * Delete the channel group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteChannelGroup($id, string $contentType = self::contentTypes['deleteChannelGroup'][0])
    {
        $this->deleteChannelGroupWithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteChannelGroupWithHttpInfo
     *
     * Delete the channel group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteChannelGroupWithHttpInfo($id, string $contentType = self::contentTypes['deleteChannelGroup'][0])
    {
        $request = $this->deleteChannelGroupRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteChannelGroupAsync
     *
     * Delete the channel group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChannelGroupAsync($id, string $contentType = self::contentTypes['deleteChannelGroup'][0])
    {
        return $this->deleteChannelGroupAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteChannelGroupAsyncWithHttpInfo
     *
     * Delete the channel group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChannelGroupAsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteChannelGroup'][0])
    {
        $returnType = '';
        $request = $this->deleteChannelGroupRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteChannelGroup'
     *
     * @param  int $id ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteChannelGroupRequest($id, string $contentType = self::contentTypes['deleteChannelGroup'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteChannelGroup'
            );
        }


        $resourcePath = '/channel-groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeActionOnChannelGroup
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\ExecuteActionOnChannelGroupRequest $executeActionOnChannelGroupRequest executeActionOnChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeActionOnChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function executeActionOnChannelGroup($id, $executeActionOnChannelGroupRequest, string $contentType = self::contentTypes['executeActionOnChannelGroup'][0])
    {
        $this->executeActionOnChannelGroupWithHttpInfo($id, $executeActionOnChannelGroupRequest, $contentType);
    }

    /**
     * Operation executeActionOnChannelGroupWithHttpInfo
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\ExecuteActionOnChannelGroupRequest $executeActionOnChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeActionOnChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeActionOnChannelGroupWithHttpInfo($id, $executeActionOnChannelGroupRequest, string $contentType = self::contentTypes['executeActionOnChannelGroup'][0])
    {
        $request = $this->executeActionOnChannelGroupRequest($id, $executeActionOnChannelGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\ExecuteActionOnChannelGroup400Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeActionOnChannelGroupAsync
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\ExecuteActionOnChannelGroupRequest $executeActionOnChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeActionOnChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeActionOnChannelGroupAsync($id, $executeActionOnChannelGroupRequest, string $contentType = self::contentTypes['executeActionOnChannelGroup'][0])
    {
        return $this->executeActionOnChannelGroupAsyncWithHttpInfo($id, $executeActionOnChannelGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeActionOnChannelGroupAsyncWithHttpInfo
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\ExecuteActionOnChannelGroupRequest $executeActionOnChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeActionOnChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeActionOnChannelGroupAsyncWithHttpInfo($id, $executeActionOnChannelGroupRequest, string $contentType = self::contentTypes['executeActionOnChannelGroup'][0])
    {
        $returnType = '';
        $request = $this->executeActionOnChannelGroupRequest($id, $executeActionOnChannelGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeActionOnChannelGroup'
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\ExecuteActionOnChannelGroupRequest $executeActionOnChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['executeActionOnChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function executeActionOnChannelGroupRequest($id, $executeActionOnChannelGroupRequest, string $contentType = self::contentTypes['executeActionOnChannelGroup'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling executeActionOnChannelGroup'
            );
        }

        // verify the required parameter 'executeActionOnChannelGroupRequest' is set
        if ($executeActionOnChannelGroupRequest === null || (is_array($executeActionOnChannelGroupRequest) && count($executeActionOnChannelGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $executeActionOnChannelGroupRequest when calling executeActionOnChannelGroup'
            );
        }


        $resourcePath = '/channel-groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($executeActionOnChannelGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($executeActionOnChannelGroupRequest));
            } else {
                $httpBody = $executeActionOnChannelGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelGroup
     *
     * Get Channel Group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\ChannelGroup
     */
    public function getChannelGroup($id, $include = null, string $contentType = self::contentTypes['getChannelGroup'][0])
    {
        list($response) = $this->getChannelGroupWithHttpInfo($id, $include, $contentType);
        return $response;
    }

    /**
     * Operation getChannelGroupWithHttpInfo
     *
     * Get Channel Group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\ChannelGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelGroupWithHttpInfo($id, $include = null, string $contentType = self::contentTypes['getChannelGroup'][0])
    {
        $request = $this->getChannelGroupRequest($id, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\ChannelGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\ChannelGroup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\ChannelGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\ChannelGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\ChannelGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelGroupAsync
     *
     * Get Channel Group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelGroupAsync($id, $include = null, string $contentType = self::contentTypes['getChannelGroup'][0])
    {
        return $this->getChannelGroupAsyncWithHttpInfo($id, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelGroupAsyncWithHttpInfo
     *
     * Get Channel Group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelGroupAsyncWithHttpInfo($id, $include = null, string $contentType = self::contentTypes['getChannelGroup'][0])
    {
        $returnType = '\Supla\ApiClient\Model\ChannelGroup';
        $request = $this->getChannelGroupRequest($id, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelGroup'
     *
     * @param  int $id ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelGroupRequest($id, $include = null, string $contentType = self::contentTypes['getChannelGroup'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getChannelGroup'
            );
        }



        $resourcePath = '/channel-groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelGroupDirectLinks
     *
     * Get channel group direct links
     *
     * Supla API Client
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupDirectLinks'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\DirectLink[]
     */
    public function getChannelGroupDirectLinks($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupDirectLinks'][0])
    {
        list($response) = $this->getChannelGroupDirectLinksWithHttpInfo($channelGroup, $include, $contentType);
        return $response;
    }

    /**
     * Operation getChannelGroupDirectLinksWithHttpInfo
     *
     * Get channel group direct links
     *
     * Supla API Client
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupDirectLinks'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\DirectLink[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelGroupDirectLinksWithHttpInfo($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupDirectLinks'][0])
    {
        $request = $this->getChannelGroupDirectLinksRequest($channelGroup, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\DirectLink[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\DirectLink[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\DirectLink[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\DirectLink[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\DirectLink[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelGroupDirectLinksAsync
     *
     * Get channel group direct links
     *
     * Supla API Client
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupDirectLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelGroupDirectLinksAsync($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupDirectLinks'][0])
    {
        return $this->getChannelGroupDirectLinksAsyncWithHttpInfo($channelGroup, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelGroupDirectLinksAsyncWithHttpInfo
     *
     * Get channel group direct links
     *
     * Supla API Client
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupDirectLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelGroupDirectLinksAsyncWithHttpInfo($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupDirectLinks'][0])
    {
        $returnType = '\Supla\ApiClient\Model\DirectLink[]';
        $request = $this->getChannelGroupDirectLinksRequest($channelGroup, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelGroupDirectLinks'
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupDirectLinks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelGroupDirectLinksRequest($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupDirectLinks'][0])
    {

        // verify the required parameter 'channelGroup' is set
        if ($channelGroup === null || (is_array($channelGroup) && count($channelGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channelGroup when calling getChannelGroupDirectLinks'
            );
        }



        $resourcePath = '/channel-groups/{channelGroup}/direct-links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($channelGroup !== null) {
            $resourcePath = str_replace(
                '{' . 'channelGroup' . '}',
                ObjectSerializer::toPathValue($channelGroup),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelGroupScenes
     *
     * Get channel group scenes
     *
     * Supla API Client
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupScenes'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\Scene[]
     */
    public function getChannelGroupScenes($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupScenes'][0])
    {
        list($response) = $this->getChannelGroupScenesWithHttpInfo($channelGroup, $include, $contentType);
        return $response;
    }

    /**
     * Operation getChannelGroupScenesWithHttpInfo
     *
     * Get channel group scenes
     *
     * Supla API Client
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupScenes'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\Scene[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelGroupScenesWithHttpInfo($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupScenes'][0])
    {
        $request = $this->getChannelGroupScenesRequest($channelGroup, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\Scene[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\Scene[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\Scene[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\Scene[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\Scene[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelGroupScenesAsync
     *
     * Get channel group scenes
     *
     * Supla API Client
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupScenes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelGroupScenesAsync($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupScenes'][0])
    {
        return $this->getChannelGroupScenesAsyncWithHttpInfo($channelGroup, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelGroupScenesAsyncWithHttpInfo
     *
     * Get channel group scenes
     *
     * Supla API Client
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupScenes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelGroupScenesAsyncWithHttpInfo($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupScenes'][0])
    {
        $returnType = '\Supla\ApiClient\Model\Scene[]';
        $request = $this->getChannelGroupScenesRequest($channelGroup, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelGroupScenes'
     *
     * @param  int $channelGroup ID (required)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroupScenes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelGroupScenesRequest($channelGroup, $include = null, string $contentType = self::contentTypes['getChannelGroupScenes'][0])
    {

        // verify the required parameter 'channelGroup' is set
        if ($channelGroup === null || (is_array($channelGroup) && count($channelGroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channelGroup when calling getChannelGroupScenes'
            );
        }



        $resourcePath = '/channel-groups/{channelGroup}/scenes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($channelGroup !== null) {
            $resourcePath = str_replace(
                '{' . 'channelGroup' . '}',
                ObjectSerializer::toPathValue($channelGroup),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelGroups
     *
     * Get Channel Groups
     *
     * Supla API Client
     *
     * @param  string[]|null $function function (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroups'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\ChannelGroup[]
     */
    public function getChannelGroups($function = null, $include = null, string $contentType = self::contentTypes['getChannelGroups'][0])
    {
        list($response) = $this->getChannelGroupsWithHttpInfo($function, $include, $contentType);
        return $response;
    }

    /**
     * Operation getChannelGroupsWithHttpInfo
     *
     * Get Channel Groups
     *
     * Supla API Client
     *
     * @param  string[]|null $function (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroups'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\ChannelGroup[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelGroupsWithHttpInfo($function = null, $include = null, string $contentType = self::contentTypes['getChannelGroups'][0])
    {
        $request = $this->getChannelGroupsRequest($function, $include, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\ChannelGroup[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\ChannelGroup[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\ChannelGroup[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\ChannelGroup[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\ChannelGroup[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelGroupsAsync
     *
     * Get Channel Groups
     *
     * Supla API Client
     *
     * @param  string[]|null $function (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelGroupsAsync($function = null, $include = null, string $contentType = self::contentTypes['getChannelGroups'][0])
    {
        return $this->getChannelGroupsAsyncWithHttpInfo($function, $include, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelGroupsAsyncWithHttpInfo
     *
     * Get Channel Groups
     *
     * Supla API Client
     *
     * @param  string[]|null $function (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelGroupsAsyncWithHttpInfo($function = null, $include = null, string $contentType = self::contentTypes['getChannelGroups'][0])
    {
        $returnType = '\Supla\ApiClient\Model\ChannelGroup[]';
        $request = $this->getChannelGroupsRequest($function, $include, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelGroups'
     *
     * @param  string[]|null $function (optional)
     * @param  string[]|null $include List of extra fields to include in the response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChannelGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelGroupsRequest($function = null, $include = null, string $contentType = self::contentTypes['getChannelGroups'][0])
    {




        $resourcePath = '/channel-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $function,
            'function', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include,
            'include', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateChannelGroup
     *
     * Update the channel group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\ChannelGroup
     */
    public function updateChannelGroup($id, $createChannelGroupRequest, string $contentType = self::contentTypes['updateChannelGroup'][0])
    {
        list($response) = $this->updateChannelGroupWithHttpInfo($id, $createChannelGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateChannelGroupWithHttpInfo
     *
     * Update the channel group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChannelGroup'] to see the possible values for this operation
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\ChannelGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateChannelGroupWithHttpInfo($id, $createChannelGroupRequest, string $contentType = self::contentTypes['updateChannelGroup'][0])
    {
        $request = $this->updateChannelGroupRequest($id, $createChannelGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Supla\ApiClient\Model\ChannelGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Supla\ApiClient\Model\ChannelGroup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\ChannelGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Supla\ApiClient\Model\ChannelGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\ChannelGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateChannelGroupAsync
     *
     * Update the channel group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelGroupAsync($id, $createChannelGroupRequest, string $contentType = self::contentTypes['updateChannelGroup'][0])
    {
        return $this->updateChannelGroupAsyncWithHttpInfo($id, $createChannelGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateChannelGroupAsyncWithHttpInfo
     *
     * Update the channel group
     *
     * Supla API Client
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelGroupAsyncWithHttpInfo($id, $createChannelGroupRequest, string $contentType = self::contentTypes['updateChannelGroup'][0])
    {
        $returnType = '\Supla\ApiClient\Model\ChannelGroup';
        $request = $this->updateChannelGroupRequest($id, $createChannelGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateChannelGroup'
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\CreateChannelGroupRequest $createChannelGroupRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateChannelGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateChannelGroupRequest($id, $createChannelGroupRequest, string $contentType = self::contentTypes['updateChannelGroup'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateChannelGroup'
            );
        }

        // verify the required parameter 'createChannelGroupRequest' is set
        if ($createChannelGroupRequest === null || (is_array($createChannelGroupRequest) && count($createChannelGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createChannelGroupRequest when calling updateChannelGroup'
            );
        }


        $resourcePath = '/channel-groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createChannelGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createChannelGroupRequest));
            } else {
                $httpBody = $createChannelGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
