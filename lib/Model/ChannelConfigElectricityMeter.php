<?php
/**
 * ChannelConfigElectricityMeter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelConfigElectricityMeter Class Doc Comment
 *
 * @category Class
 * @description Config for &#x60;ELECTRICITYMETER&#x60;
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChannelConfigElectricityMeter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelConfigElectricityMeter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'countersAvailable' => 'string[]',
        'resetCountersAvailable' => 'bool',
        'pricePerUnit' => 'float',
        'currency' => 'string',
        'electricityMeterInitialValues' => 'object',
        'relatedRelayChannelId' => 'int',
        'addToHistory' => 'bool',
        'voltageLoggerEnabled' => 'bool',
        'currentLoggerEnabled' => 'bool',
        'powerActiveLoggerEnabled' => 'bool',
        'lowerVoltageThreshold' => 'float',
        'upperVoltageThreshold' => 'float',
        'disabledPhases' => 'int[]',
        'enabledPhases' => 'int[]',
        'availablePhases' => 'int[]',
        'usedCTType' => 'string',
        'availableCTTypes' => 'string[]',
        'usedPhaseLedType' => 'string',
        'availablePhaseLedTypes' => 'string[]',
        'phaseLedParam1' => 'float',
        'phaseLedParam2' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'countersAvailable' => null,
        'resetCountersAvailable' => null,
        'pricePerUnit' => null,
        'currency' => null,
        'electricityMeterInitialValues' => null,
        'relatedRelayChannelId' => null,
        'addToHistory' => null,
        'voltageLoggerEnabled' => null,
        'currentLoggerEnabled' => null,
        'powerActiveLoggerEnabled' => null,
        'lowerVoltageThreshold' => null,
        'upperVoltageThreshold' => null,
        'disabledPhases' => null,
        'enabledPhases' => null,
        'availablePhases' => null,
        'usedCTType' => null,
        'availableCTTypes' => null,
        'usedPhaseLedType' => null,
        'availablePhaseLedTypes' => null,
        'phaseLedParam1' => 'float',
        'phaseLedParam2' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'countersAvailable' => false,
        'resetCountersAvailable' => false,
        'pricePerUnit' => false,
        'currency' => false,
        'electricityMeterInitialValues' => false,
        'relatedRelayChannelId' => false,
        'addToHistory' => false,
        'voltageLoggerEnabled' => false,
        'currentLoggerEnabled' => false,
        'powerActiveLoggerEnabled' => false,
        'lowerVoltageThreshold' => false,
        'upperVoltageThreshold' => false,
        'disabledPhases' => false,
        'enabledPhases' => false,
        'availablePhases' => false,
        'usedCTType' => false,
        'availableCTTypes' => false,
        'usedPhaseLedType' => false,
        'availablePhaseLedTypes' => false,
        'phaseLedParam1' => false,
        'phaseLedParam2' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'countersAvailable' => 'countersAvailable',
        'resetCountersAvailable' => 'resetCountersAvailable',
        'pricePerUnit' => 'pricePerUnit',
        'currency' => 'currency',
        'electricityMeterInitialValues' => 'electricityMeterInitialValues',
        'relatedRelayChannelId' => 'relatedRelayChannelId',
        'addToHistory' => 'addToHistory',
        'voltageLoggerEnabled' => 'voltageLoggerEnabled',
        'currentLoggerEnabled' => 'currentLoggerEnabled',
        'powerActiveLoggerEnabled' => 'powerActiveLoggerEnabled',
        'lowerVoltageThreshold' => 'lowerVoltageThreshold',
        'upperVoltageThreshold' => 'upperVoltageThreshold',
        'disabledPhases' => 'disabledPhases',
        'enabledPhases' => 'enabledPhases',
        'availablePhases' => 'availablePhases',
        'usedCTType' => 'usedCTType',
        'availableCTTypes' => 'availableCTTypes',
        'usedPhaseLedType' => 'usedPhaseLedType',
        'availablePhaseLedTypes' => 'availablePhaseLedTypes',
        'phaseLedParam1' => 'phaseLedParam1',
        'phaseLedParam2' => 'phaseLedParam2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'countersAvailable' => 'setCountersAvailable',
        'resetCountersAvailable' => 'setResetCountersAvailable',
        'pricePerUnit' => 'setPricePerUnit',
        'currency' => 'setCurrency',
        'electricityMeterInitialValues' => 'setElectricityMeterInitialValues',
        'relatedRelayChannelId' => 'setRelatedRelayChannelId',
        'addToHistory' => 'setAddToHistory',
        'voltageLoggerEnabled' => 'setVoltageLoggerEnabled',
        'currentLoggerEnabled' => 'setCurrentLoggerEnabled',
        'powerActiveLoggerEnabled' => 'setPowerActiveLoggerEnabled',
        'lowerVoltageThreshold' => 'setLowerVoltageThreshold',
        'upperVoltageThreshold' => 'setUpperVoltageThreshold',
        'disabledPhases' => 'setDisabledPhases',
        'enabledPhases' => 'setEnabledPhases',
        'availablePhases' => 'setAvailablePhases',
        'usedCTType' => 'setUsedCTType',
        'availableCTTypes' => 'setAvailableCTTypes',
        'usedPhaseLedType' => 'setUsedPhaseLedType',
        'availablePhaseLedTypes' => 'setAvailablePhaseLedTypes',
        'phaseLedParam1' => 'setPhaseLedParam1',
        'phaseLedParam2' => 'setPhaseLedParam2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'countersAvailable' => 'getCountersAvailable',
        'resetCountersAvailable' => 'getResetCountersAvailable',
        'pricePerUnit' => 'getPricePerUnit',
        'currency' => 'getCurrency',
        'electricityMeterInitialValues' => 'getElectricityMeterInitialValues',
        'relatedRelayChannelId' => 'getRelatedRelayChannelId',
        'addToHistory' => 'getAddToHistory',
        'voltageLoggerEnabled' => 'getVoltageLoggerEnabled',
        'currentLoggerEnabled' => 'getCurrentLoggerEnabled',
        'powerActiveLoggerEnabled' => 'getPowerActiveLoggerEnabled',
        'lowerVoltageThreshold' => 'getLowerVoltageThreshold',
        'upperVoltageThreshold' => 'getUpperVoltageThreshold',
        'disabledPhases' => 'getDisabledPhases',
        'enabledPhases' => 'getEnabledPhases',
        'availablePhases' => 'getAvailablePhases',
        'usedCTType' => 'getUsedCTType',
        'availableCTTypes' => 'getAvailableCTTypes',
        'usedPhaseLedType' => 'getUsedPhaseLedType',
        'availablePhaseLedTypes' => 'getAvailablePhaseLedTypes',
        'phaseLedParam1' => 'getPhaseLedParam1',
        'phaseLedParam2' => 'getPhaseLedParam2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('countersAvailable', $data ?? [], null);
        $this->setIfExists('resetCountersAvailable', $data ?? [], null);
        $this->setIfExists('pricePerUnit', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('electricityMeterInitialValues', $data ?? [], null);
        $this->setIfExists('relatedRelayChannelId', $data ?? [], null);
        $this->setIfExists('addToHistory', $data ?? [], null);
        $this->setIfExists('voltageLoggerEnabled', $data ?? [], null);
        $this->setIfExists('currentLoggerEnabled', $data ?? [], null);
        $this->setIfExists('powerActiveLoggerEnabled', $data ?? [], null);
        $this->setIfExists('lowerVoltageThreshold', $data ?? [], null);
        $this->setIfExists('upperVoltageThreshold', $data ?? [], null);
        $this->setIfExists('disabledPhases', $data ?? [], null);
        $this->setIfExists('enabledPhases', $data ?? [], null);
        $this->setIfExists('availablePhases', $data ?? [], null);
        $this->setIfExists('usedCTType', $data ?? [], null);
        $this->setIfExists('availableCTTypes', $data ?? [], null);
        $this->setIfExists('usedPhaseLedType', $data ?? [], null);
        $this->setIfExists('availablePhaseLedTypes', $data ?? [], null);
        $this->setIfExists('phaseLedParam1', $data ?? [], null);
        $this->setIfExists('phaseLedParam2', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets countersAvailable
     *
     * @return string[]|null
     */
    public function getCountersAvailable()
    {
        return $this->container['countersAvailable'];
    }

    /**
     * Sets countersAvailable
     *
     * @param string[]|null $countersAvailable List of available counters supported by this channel.
     *
     * @return self
     */
    public function setCountersAvailable($countersAvailable)
    {
        if (is_null($countersAvailable)) {
            throw new \InvalidArgumentException('non-nullable countersAvailable cannot be null');
        }
        $this->container['countersAvailable'] = $countersAvailable;

        return $this;
    }

    /**
     * Gets resetCountersAvailable
     *
     * @return bool|null
     */
    public function getResetCountersAvailable()
    {
        return $this->container['resetCountersAvailable'];
    }

    /**
     * Sets resetCountersAvailable
     *
     * @param bool|null $resetCountersAvailable resetCountersAvailable
     *
     * @return self
     */
    public function setResetCountersAvailable($resetCountersAvailable)
    {
        if (is_null($resetCountersAvailable)) {
            throw new \InvalidArgumentException('non-nullable resetCountersAvailable cannot be null');
        }
        $this->container['resetCountersAvailable'] = $resetCountersAvailable;

        return $this;
    }

    /**
     * Gets pricePerUnit
     *
     * @return float|null
     */
    public function getPricePerUnit()
    {
        return $this->container['pricePerUnit'];
    }

    /**
     * Sets pricePerUnit
     *
     * @param float|null $pricePerUnit pricePerUnit
     *
     * @return self
     */
    public function setPricePerUnit($pricePerUnit)
    {
        if (is_null($pricePerUnit)) {
            throw new \InvalidArgumentException('non-nullable pricePerUnit cannot be null');
        }
        $this->container['pricePerUnit'] = $pricePerUnit;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets electricityMeterInitialValues
     *
     * @return object|null
     */
    public function getElectricityMeterInitialValues()
    {
        return $this->container['electricityMeterInitialValues'];
    }

    /**
     * Sets electricityMeterInitialValues
     *
     * @param object|null $electricityMeterInitialValues electricityMeterInitialValues
     *
     * @return self
     */
    public function setElectricityMeterInitialValues($electricityMeterInitialValues)
    {
        if (is_null($electricityMeterInitialValues)) {
            throw new \InvalidArgumentException('non-nullable electricityMeterInitialValues cannot be null');
        }
        $this->container['electricityMeterInitialValues'] = $electricityMeterInitialValues;

        return $this;
    }

    /**
     * Gets relatedRelayChannelId
     *
     * @return int|null
     */
    public function getRelatedRelayChannelId()
    {
        return $this->container['relatedRelayChannelId'];
    }

    /**
     * Sets relatedRelayChannelId
     *
     * @param int|null $relatedRelayChannelId relatedRelayChannelId
     *
     * @return self
     */
    public function setRelatedRelayChannelId($relatedRelayChannelId)
    {
        if (is_null($relatedRelayChannelId)) {
            throw new \InvalidArgumentException('non-nullable relatedRelayChannelId cannot be null');
        }
        $this->container['relatedRelayChannelId'] = $relatedRelayChannelId;

        return $this;
    }

    /**
     * Gets addToHistory
     *
     * @return bool|null
     */
    public function getAddToHistory()
    {
        return $this->container['addToHistory'];
    }

    /**
     * Sets addToHistory
     *
     * @param bool|null $addToHistory addToHistory
     *
     * @return self
     */
    public function setAddToHistory($addToHistory)
    {
        if (is_null($addToHistory)) {
            throw new \InvalidArgumentException('non-nullable addToHistory cannot be null');
        }
        $this->container['addToHistory'] = $addToHistory;

        return $this;
    }

    /**
     * Gets voltageLoggerEnabled
     *
     * @return bool|null
     */
    public function getVoltageLoggerEnabled()
    {
        return $this->container['voltageLoggerEnabled'];
    }

    /**
     * Sets voltageLoggerEnabled
     *
     * @param bool|null $voltageLoggerEnabled voltageLoggerEnabled
     *
     * @return self
     */
    public function setVoltageLoggerEnabled($voltageLoggerEnabled)
    {
        if (is_null($voltageLoggerEnabled)) {
            throw new \InvalidArgumentException('non-nullable voltageLoggerEnabled cannot be null');
        }
        $this->container['voltageLoggerEnabled'] = $voltageLoggerEnabled;

        return $this;
    }

    /**
     * Gets currentLoggerEnabled
     *
     * @return bool|null
     */
    public function getCurrentLoggerEnabled()
    {
        return $this->container['currentLoggerEnabled'];
    }

    /**
     * Sets currentLoggerEnabled
     *
     * @param bool|null $currentLoggerEnabled currentLoggerEnabled
     *
     * @return self
     */
    public function setCurrentLoggerEnabled($currentLoggerEnabled)
    {
        if (is_null($currentLoggerEnabled)) {
            throw new \InvalidArgumentException('non-nullable currentLoggerEnabled cannot be null');
        }
        $this->container['currentLoggerEnabled'] = $currentLoggerEnabled;

        return $this;
    }

    /**
     * Gets powerActiveLoggerEnabled
     *
     * @return bool|null
     */
    public function getPowerActiveLoggerEnabled()
    {
        return $this->container['powerActiveLoggerEnabled'];
    }

    /**
     * Sets powerActiveLoggerEnabled
     *
     * @param bool|null $powerActiveLoggerEnabled powerActiveLoggerEnabled
     *
     * @return self
     */
    public function setPowerActiveLoggerEnabled($powerActiveLoggerEnabled)
    {
        if (is_null($powerActiveLoggerEnabled)) {
            throw new \InvalidArgumentException('non-nullable powerActiveLoggerEnabled cannot be null');
        }
        $this->container['powerActiveLoggerEnabled'] = $powerActiveLoggerEnabled;

        return $this;
    }

    /**
     * Gets lowerVoltageThreshold
     *
     * @return float|null
     */
    public function getLowerVoltageThreshold()
    {
        return $this->container['lowerVoltageThreshold'];
    }

    /**
     * Sets lowerVoltageThreshold
     *
     * @param float|null $lowerVoltageThreshold lowerVoltageThreshold
     *
     * @return self
     */
    public function setLowerVoltageThreshold($lowerVoltageThreshold)
    {
        if (is_null($lowerVoltageThreshold)) {
            throw new \InvalidArgumentException('non-nullable lowerVoltageThreshold cannot be null');
        }
        $this->container['lowerVoltageThreshold'] = $lowerVoltageThreshold;

        return $this;
    }

    /**
     * Gets upperVoltageThreshold
     *
     * @return float|null
     */
    public function getUpperVoltageThreshold()
    {
        return $this->container['upperVoltageThreshold'];
    }

    /**
     * Sets upperVoltageThreshold
     *
     * @param float|null $upperVoltageThreshold upperVoltageThreshold
     *
     * @return self
     */
    public function setUpperVoltageThreshold($upperVoltageThreshold)
    {
        if (is_null($upperVoltageThreshold)) {
            throw new \InvalidArgumentException('non-nullable upperVoltageThreshold cannot be null');
        }
        $this->container['upperVoltageThreshold'] = $upperVoltageThreshold;

        return $this;
    }

    /**
     * Gets disabledPhases
     *
     * @return int[]|null
     */
    public function getDisabledPhases()
    {
        return $this->container['disabledPhases'];
    }

    /**
     * Sets disabledPhases
     *
     * @param int[]|null $disabledPhases disabledPhases
     *
     * @return self
     */
    public function setDisabledPhases($disabledPhases)
    {
        if (is_null($disabledPhases)) {
            throw new \InvalidArgumentException('non-nullable disabledPhases cannot be null');
        }
        $this->container['disabledPhases'] = $disabledPhases;

        return $this;
    }

    /**
     * Gets enabledPhases
     *
     * @return int[]|null
     */
    public function getEnabledPhases()
    {
        return $this->container['enabledPhases'];
    }

    /**
     * Sets enabledPhases
     *
     * @param int[]|null $enabledPhases enabledPhases
     *
     * @return self
     */
    public function setEnabledPhases($enabledPhases)
    {
        if (is_null($enabledPhases)) {
            throw new \InvalidArgumentException('non-nullable enabledPhases cannot be null');
        }
        $this->container['enabledPhases'] = $enabledPhases;

        return $this;
    }

    /**
     * Gets availablePhases
     *
     * @return int[]|null
     */
    public function getAvailablePhases()
    {
        return $this->container['availablePhases'];
    }

    /**
     * Sets availablePhases
     *
     * @param int[]|null $availablePhases availablePhases
     *
     * @return self
     */
    public function setAvailablePhases($availablePhases)
    {
        if (is_null($availablePhases)) {
            throw new \InvalidArgumentException('non-nullable availablePhases cannot be null');
        }
        $this->container['availablePhases'] = $availablePhases;

        return $this;
    }

    /**
     * Gets usedCTType
     *
     * @return string|null
     */
    public function getUsedCTType()
    {
        return $this->container['usedCTType'];
    }

    /**
     * Sets usedCTType
     *
     * @param string|null $usedCTType usedCTType
     *
     * @return self
     */
    public function setUsedCTType($usedCTType)
    {
        if (is_null($usedCTType)) {
            throw new \InvalidArgumentException('non-nullable usedCTType cannot be null');
        }
        $this->container['usedCTType'] = $usedCTType;

        return $this;
    }

    /**
     * Gets availableCTTypes
     *
     * @return string[]|null
     */
    public function getAvailableCTTypes()
    {
        return $this->container['availableCTTypes'];
    }

    /**
     * Sets availableCTTypes
     *
     * @param string[]|null $availableCTTypes availableCTTypes
     *
     * @return self
     */
    public function setAvailableCTTypes($availableCTTypes)
    {
        if (is_null($availableCTTypes)) {
            throw new \InvalidArgumentException('non-nullable availableCTTypes cannot be null');
        }
        $this->container['availableCTTypes'] = $availableCTTypes;

        return $this;
    }

    /**
     * Gets usedPhaseLedType
     *
     * @return string|null
     */
    public function getUsedPhaseLedType()
    {
        return $this->container['usedPhaseLedType'];
    }

    /**
     * Sets usedPhaseLedType
     *
     * @param string|null $usedPhaseLedType usedPhaseLedType
     *
     * @return self
     */
    public function setUsedPhaseLedType($usedPhaseLedType)
    {
        if (is_null($usedPhaseLedType)) {
            throw new \InvalidArgumentException('non-nullable usedPhaseLedType cannot be null');
        }
        $this->container['usedPhaseLedType'] = $usedPhaseLedType;

        return $this;
    }

    /**
     * Gets availablePhaseLedTypes
     *
     * @return string[]|null
     */
    public function getAvailablePhaseLedTypes()
    {
        return $this->container['availablePhaseLedTypes'];
    }

    /**
     * Sets availablePhaseLedTypes
     *
     * @param string[]|null $availablePhaseLedTypes availablePhaseLedTypes
     *
     * @return self
     */
    public function setAvailablePhaseLedTypes($availablePhaseLedTypes)
    {
        if (is_null($availablePhaseLedTypes)) {
            throw new \InvalidArgumentException('non-nullable availablePhaseLedTypes cannot be null');
        }
        $this->container['availablePhaseLedTypes'] = $availablePhaseLedTypes;

        return $this;
    }

    /**
     * Gets phaseLedParam1
     *
     * @return float|null
     */
    public function getPhaseLedParam1()
    {
        return $this->container['phaseLedParam1'];
    }

    /**
     * Sets phaseLedParam1
     *
     * @param float|null $phaseLedParam1 phaseLedParam1
     *
     * @return self
     */
    public function setPhaseLedParam1($phaseLedParam1)
    {
        if (is_null($phaseLedParam1)) {
            throw new \InvalidArgumentException('non-nullable phaseLedParam1 cannot be null');
        }
        $this->container['phaseLedParam1'] = $phaseLedParam1;

        return $this;
    }

    /**
     * Gets phaseLedParam2
     *
     * @return float|null
     */
    public function getPhaseLedParam2()
    {
        return $this->container['phaseLedParam2'];
    }

    /**
     * Sets phaseLedParam2
     *
     * @param float|null $phaseLedParam2 phaseLedParam2
     *
     * @return self
     */
    public function setPhaseLedParam2($phaseLedParam2)
    {
        if (is_null($phaseLedParam2)) {
            throw new \InvalidArgumentException('non-nullable phaseLedParam2 cannot be null');
        }
        $this->container['phaseLedParam2'] = $phaseLedParam2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


