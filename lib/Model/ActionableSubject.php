<?php
/**
 * ActionableSubject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ActionableSubject Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActionableSubject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActionableSubject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'channelNumber' => 'int',
        'caption' => 'string',
        'altIcon' => 'int',
        'hidden' => 'bool',
        'inheritedLocation' => 'bool',
        'iodeviceId' => 'int',
        'iodevice' => '\Supla\ApiClient\Model\Device',
        'locationId' => 'int',
        'location' => '\Supla\ApiClient\Model\Location',
        'functionId' => 'int',
        'function' => '\Supla\ApiClient\Model\ChannelFunction',
        'possibleActions' => '\Supla\ApiClient\Model\ChannelFunctionAction[]',
        'typeId' => 'int',
        'type' => '\Supla\ApiClient\Model\ChannelType',
        'ownSubjectType' => 'string',
        'state' => '\Supla\ApiClient\Model\SceneState',
        'config' => '\Supla\ApiClient\Model\ScheduleConfigEntry[]',
        'conflictDetails' => 'object',
        'userIconId' => 'int',
        'userIcon' => '\Supla\ApiClient\Model\UserIcon',
        'connected' => 'bool',
        'deletable' => 'bool',
        'relationsCount' => '\Supla\ApiClient\Model\SceneRelationsCount',
        'supportedFunctions' => '\Supla\ApiClient\Model\ChannelFunction[]',
        'channels' => '\Supla\ApiClient\Model\Channel[]',
        'enabled' => 'bool',
        'estimatedExecutionTime' => 'int',
        'operations' => '\Supla\ApiClient\Model\SceneOperation[]',
        'subjectType' => '\Supla\ApiClient\Model\ActionableSubjectTypeNames',
        'subjectId' => 'int',
        'dateStart' => '\DateTime',
        'dateEnd' => '\DateTime',
        'retry' => 'bool',
        'mode' => 'string',
        'subject' => '\Supla\ApiClient\Model\ActionableSubject',
        'closestExecutions' => '\Supla\ApiClient\Model\ScheduleClosestExecutions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'channelNumber' => null,
        'caption' => null,
        'altIcon' => null,
        'hidden' => null,
        'inheritedLocation' => null,
        'iodeviceId' => null,
        'iodevice' => null,
        'locationId' => null,
        'location' => null,
        'functionId' => null,
        'function' => null,
        'possibleActions' => null,
        'typeId' => null,
        'type' => null,
        'ownSubjectType' => null,
        'state' => null,
        'config' => null,
        'conflictDetails' => null,
        'userIconId' => null,
        'userIcon' => null,
        'connected' => null,
        'deletable' => null,
        'relationsCount' => null,
        'supportedFunctions' => null,
        'channels' => null,
        'enabled' => null,
        'estimatedExecutionTime' => null,
        'operations' => null,
        'subjectType' => null,
        'subjectId' => null,
        'dateStart' => 'date-time',
        'dateEnd' => 'date-time',
        'retry' => null,
        'mode' => null,
        'subject' => null,
        'closestExecutions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'channelNumber' => false,
        'caption' => false,
        'altIcon' => false,
        'hidden' => false,
        'inheritedLocation' => false,
        'iodeviceId' => false,
        'iodevice' => false,
        'locationId' => false,
        'location' => false,
        'functionId' => false,
        'function' => false,
        'possibleActions' => false,
        'typeId' => false,
        'type' => false,
        'ownSubjectType' => false,
        'state' => false,
        'config' => false,
        'conflictDetails' => false,
        'userIconId' => false,
        'userIcon' => false,
        'connected' => false,
        'deletable' => false,
        'relationsCount' => false,
        'supportedFunctions' => true,
        'channels' => false,
        'enabled' => false,
        'estimatedExecutionTime' => false,
        'operations' => false,
        'subjectType' => false,
        'subjectId' => false,
        'dateStart' => false,
        'dateEnd' => false,
        'retry' => false,
        'mode' => false,
        'subject' => false,
        'closestExecutions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'channelNumber' => 'channelNumber',
        'caption' => 'caption',
        'altIcon' => 'altIcon',
        'hidden' => 'hidden',
        'inheritedLocation' => 'inheritedLocation',
        'iodeviceId' => 'iodeviceId',
        'iodevice' => 'iodevice',
        'locationId' => 'locationId',
        'location' => 'location',
        'functionId' => 'functionId',
        'function' => 'function',
        'possibleActions' => 'possibleActions',
        'typeId' => 'typeId',
        'type' => 'type',
        'ownSubjectType' => 'ownSubjectType',
        'state' => 'state',
        'config' => 'config',
        'conflictDetails' => 'conflictDetails',
        'userIconId' => 'userIconId',
        'userIcon' => 'userIcon',
        'connected' => 'connected',
        'deletable' => 'deletable',
        'relationsCount' => 'relationsCount',
        'supportedFunctions' => 'supportedFunctions',
        'channels' => 'channels',
        'enabled' => 'enabled',
        'estimatedExecutionTime' => 'estimatedExecutionTime',
        'operations' => 'operations',
        'subjectType' => 'subjectType',
        'subjectId' => 'subjectId',
        'dateStart' => 'dateStart',
        'dateEnd' => 'dateEnd',
        'retry' => 'retry',
        'mode' => 'mode',
        'subject' => 'subject',
        'closestExecutions' => 'closestExecutions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'channelNumber' => 'setChannelNumber',
        'caption' => 'setCaption',
        'altIcon' => 'setAltIcon',
        'hidden' => 'setHidden',
        'inheritedLocation' => 'setInheritedLocation',
        'iodeviceId' => 'setIodeviceId',
        'iodevice' => 'setIodevice',
        'locationId' => 'setLocationId',
        'location' => 'setLocation',
        'functionId' => 'setFunctionId',
        'function' => 'setFunction',
        'possibleActions' => 'setPossibleActions',
        'typeId' => 'setTypeId',
        'type' => 'setType',
        'ownSubjectType' => 'setOwnSubjectType',
        'state' => 'setState',
        'config' => 'setConfig',
        'conflictDetails' => 'setConflictDetails',
        'userIconId' => 'setUserIconId',
        'userIcon' => 'setUserIcon',
        'connected' => 'setConnected',
        'deletable' => 'setDeletable',
        'relationsCount' => 'setRelationsCount',
        'supportedFunctions' => 'setSupportedFunctions',
        'channels' => 'setChannels',
        'enabled' => 'setEnabled',
        'estimatedExecutionTime' => 'setEstimatedExecutionTime',
        'operations' => 'setOperations',
        'subjectType' => 'setSubjectType',
        'subjectId' => 'setSubjectId',
        'dateStart' => 'setDateStart',
        'dateEnd' => 'setDateEnd',
        'retry' => 'setRetry',
        'mode' => 'setMode',
        'subject' => 'setSubject',
        'closestExecutions' => 'setClosestExecutions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'channelNumber' => 'getChannelNumber',
        'caption' => 'getCaption',
        'altIcon' => 'getAltIcon',
        'hidden' => 'getHidden',
        'inheritedLocation' => 'getInheritedLocation',
        'iodeviceId' => 'getIodeviceId',
        'iodevice' => 'getIodevice',
        'locationId' => 'getLocationId',
        'location' => 'getLocation',
        'functionId' => 'getFunctionId',
        'function' => 'getFunction',
        'possibleActions' => 'getPossibleActions',
        'typeId' => 'getTypeId',
        'type' => 'getType',
        'ownSubjectType' => 'getOwnSubjectType',
        'state' => 'getState',
        'config' => 'getConfig',
        'conflictDetails' => 'getConflictDetails',
        'userIconId' => 'getUserIconId',
        'userIcon' => 'getUserIcon',
        'connected' => 'getConnected',
        'deletable' => 'getDeletable',
        'relationsCount' => 'getRelationsCount',
        'supportedFunctions' => 'getSupportedFunctions',
        'channels' => 'getChannels',
        'enabled' => 'getEnabled',
        'estimatedExecutionTime' => 'getEstimatedExecutionTime',
        'operations' => 'getOperations',
        'subjectType' => 'getSubjectType',
        'subjectId' => 'getSubjectId',
        'dateStart' => 'getDateStart',
        'dateEnd' => 'getDateEnd',
        'retry' => 'getRetry',
        'mode' => 'getMode',
        'subject' => 'getSubject',
        'closestExecutions' => 'getClosestExecutions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FUNCTION_ID_NUMBER_2000 = 2000;
    public const OWN_SUBJECT_TYPE_SCENE = 'scene';
    public const MODE_ONCE = 'once';
    public const MODE_MINUTELY = 'minutely';
    public const MODE_DAILY = 'daily';
    public const MODE_CRONTAB = 'crontab';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFunctionIdAllowableValues()
    {
        return [
            self::FUNCTION_ID_NUMBER_2000,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOwnSubjectTypeAllowableValues()
    {
        return [
            self::OWN_SUBJECT_TYPE_SCENE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModeAllowableValues()
    {
        return [
            self::MODE_ONCE,
            self::MODE_MINUTELY,
            self::MODE_DAILY,
            self::MODE_CRONTAB,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('channelNumber', $data ?? [], null);
        $this->setIfExists('caption', $data ?? [], null);
        $this->setIfExists('altIcon', $data ?? [], null);
        $this->setIfExists('hidden', $data ?? [], null);
        $this->setIfExists('inheritedLocation', $data ?? [], null);
        $this->setIfExists('iodeviceId', $data ?? [], null);
        $this->setIfExists('iodevice', $data ?? [], null);
        $this->setIfExists('locationId', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('functionId', $data ?? [], null);
        $this->setIfExists('function', $data ?? [], null);
        $this->setIfExists('possibleActions', $data ?? [], null);
        $this->setIfExists('typeId', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('ownSubjectType', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('conflictDetails', $data ?? [], null);
        $this->setIfExists('userIconId', $data ?? [], null);
        $this->setIfExists('userIcon', $data ?? [], null);
        $this->setIfExists('connected', $data ?? [], null);
        $this->setIfExists('deletable', $data ?? [], null);
        $this->setIfExists('relationsCount', $data ?? [], null);
        $this->setIfExists('supportedFunctions', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('estimatedExecutionTime', $data ?? [], null);
        $this->setIfExists('operations', $data ?? [], null);
        $this->setIfExists('subjectType', $data ?? [], null);
        $this->setIfExists('subjectId', $data ?? [], null);
        $this->setIfExists('dateStart', $data ?? [], null);
        $this->setIfExists('dateEnd', $data ?? [], null);
        $this->setIfExists('retry', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('closestExecutions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFunctionIdAllowableValues();
        if (!is_null($this->container['functionId']) && !in_array($this->container['functionId'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'functionId', must be one of '%s'",
                $this->container['functionId'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOwnSubjectTypeAllowableValues();
        if (!is_null($this->container['ownSubjectType']) && !in_array($this->container['ownSubjectType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ownSubjectType', must be one of '%s'",
                $this->container['ownSubjectType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModeAllowableValues();
        if (!is_null($this->container['mode']) && !in_array($this->container['mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'mode', must be one of '%s'",
                $this->container['mode'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets channelNumber
     *
     * @return int|null
     */
    public function getChannelNumber()
    {
        return $this->container['channelNumber'];
    }

    /**
     * Sets channelNumber
     *
     * @param int|null $channelNumber Channel ordinal number in its IO Device
     *
     * @return self
     */
    public function setChannelNumber($channelNumber)
    {
        if (is_null($channelNumber)) {
            throw new \InvalidArgumentException('non-nullable channelNumber cannot be null');
        }
        $this->container['channelNumber'] = $channelNumber;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption Caption
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (is_null($caption)) {
            throw new \InvalidArgumentException('non-nullable caption cannot be null');
        }
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets altIcon
     *
     * @return int|null
     */
    public function getAltIcon()
    {
        return $this->container['altIcon'];
    }

    /**
     * Sets altIcon
     *
     * @param int|null $altIcon Chosen alternative icon idenifier. Should not be greater than the `function.maxAlternativeIconIndex`.
     *
     * @return self
     */
    public function setAltIcon($altIcon)
    {
        if (is_null($altIcon)) {
            throw new \InvalidArgumentException('non-nullable altIcon cannot be null');
        }
        $this->container['altIcon'] = $altIcon;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool|null $hidden Whether this scene is shown on client apps or not
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        if (is_null($hidden)) {
            throw new \InvalidArgumentException('non-nullable hidden cannot be null');
        }
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets inheritedLocation
     *
     * @return bool|null
     */
    public function getInheritedLocation()
    {
        return $this->container['inheritedLocation'];
    }

    /**
     * Sets inheritedLocation
     *
     * @param bool|null $inheritedLocation Whether this channel inherits its IO Device's location (`true`) or not (`false`)
     *
     * @return self
     */
    public function setInheritedLocation($inheritedLocation)
    {
        if (is_null($inheritedLocation)) {
            throw new \InvalidArgumentException('non-nullable inheritedLocation cannot be null');
        }
        $this->container['inheritedLocation'] = $inheritedLocation;

        return $this;
    }

    /**
     * Gets iodeviceId
     *
     * @return int|null
     */
    public function getIodeviceId()
    {
        return $this->container['iodeviceId'];
    }

    /**
     * Sets iodeviceId
     *
     * @param int|null $iodeviceId iodeviceId
     *
     * @return self
     */
    public function setIodeviceId($iodeviceId)
    {
        if (is_null($iodeviceId)) {
            throw new \InvalidArgumentException('non-nullable iodeviceId cannot be null');
        }
        $this->container['iodeviceId'] = $iodeviceId;

        return $this;
    }

    /**
     * Gets iodevice
     *
     * @return \Supla\ApiClient\Model\Device|null
     */
    public function getIodevice()
    {
        return $this->container['iodevice'];
    }

    /**
     * Sets iodevice
     *
     * @param \Supla\ApiClient\Model\Device|null $iodevice iodevice
     *
     * @return self
     */
    public function setIodevice($iodevice)
    {
        if (is_null($iodevice)) {
            throw new \InvalidArgumentException('non-nullable iodevice cannot be null');
        }
        $this->container['iodevice'] = $iodevice;

        return $this;
    }

    /**
     * Gets locationId
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['locationId'];
    }

    /**
     * Sets locationId
     *
     * @param int|null $locationId locationId
     *
     * @return self
     */
    public function setLocationId($locationId)
    {
        if (is_null($locationId)) {
            throw new \InvalidArgumentException('non-nullable locationId cannot be null');
        }
        $this->container['locationId'] = $locationId;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Supla\ApiClient\Model\Location|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Supla\ApiClient\Model\Location|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets functionId
     *
     * @return int|null
     */
    public function getFunctionId()
    {
        return $this->container['functionId'];
    }

    /**
     * Sets functionId
     *
     * @param int|null $functionId functionId
     *
     * @return self
     */
    public function setFunctionId($functionId)
    {
        if (is_null($functionId)) {
            throw new \InvalidArgumentException('non-nullable functionId cannot be null');
        }
        $allowedValues = $this->getFunctionIdAllowableValues();
        if (!in_array($functionId, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'functionId', must be one of '%s'",
                    $functionId,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['functionId'] = $functionId;

        return $this;
    }

    /**
     * Gets function
     *
     * @return \Supla\ApiClient\Model\ChannelFunction|null
     */
    public function getFunction()
    {
        return $this->container['function'];
    }

    /**
     * Sets function
     *
     * @param \Supla\ApiClient\Model\ChannelFunction|null $function function
     *
     * @return self
     */
    public function setFunction($function)
    {
        if (is_null($function)) {
            throw new \InvalidArgumentException('non-nullable function cannot be null');
        }
        $this->container['function'] = $function;

        return $this;
    }

    /**
     * Gets possibleActions
     *
     * @return \Supla\ApiClient\Model\ChannelFunctionAction[]|null
     */
    public function getPossibleActions()
    {
        return $this->container['possibleActions'];
    }

    /**
     * Sets possibleActions
     *
     * @param \Supla\ApiClient\Model\ChannelFunctionAction[]|null $possibleActions What action can you execute on this subject?
     *
     * @return self
     */
    public function setPossibleActions($possibleActions)
    {
        if (is_null($possibleActions)) {
            throw new \InvalidArgumentException('non-nullable possibleActions cannot be null');
        }
        $this->container['possibleActions'] = $possibleActions;

        return $this;
    }

    /**
     * Gets typeId
     *
     * @return int|null
     */
    public function getTypeId()
    {
        return $this->container['typeId'];
    }

    /**
     * Sets typeId
     *
     * @param int|null $typeId typeId
     *
     * @return self
     */
    public function setTypeId($typeId)
    {
        if (is_null($typeId)) {
            throw new \InvalidArgumentException('non-nullable typeId cannot be null');
        }
        $this->container['typeId'] = $typeId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Supla\ApiClient\Model\ChannelType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Supla\ApiClient\Model\ChannelType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ownSubjectType
     *
     * @return string|null
     */
    public function getOwnSubjectType()
    {
        return $this->container['ownSubjectType'];
    }

    /**
     * Sets ownSubjectType
     *
     * @param string|null $ownSubjectType ownSubjectType
     *
     * @return self
     */
    public function setOwnSubjectType($ownSubjectType)
    {
        if (is_null($ownSubjectType)) {
            throw new \InvalidArgumentException('non-nullable ownSubjectType cannot be null');
        }
        $allowedValues = $this->getOwnSubjectTypeAllowableValues();
        if (!in_array($ownSubjectType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ownSubjectType', must be one of '%s'",
                    $ownSubjectType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ownSubjectType'] = $ownSubjectType;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Supla\ApiClient\Model\SceneState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Supla\ApiClient\Model\SceneState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \Supla\ApiClient\Model\ScheduleConfigEntry[]|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \Supla\ApiClient\Model\ScheduleConfigEntry[]|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets conflictDetails
     *
     * @return object|null
     */
    public function getConflictDetails()
    {
        return $this->container['conflictDetails'];
    }

    /**
     * Sets conflictDetails
     *
     * @param object|null $conflictDetails conflictDetails
     *
     * @return self
     */
    public function setConflictDetails($conflictDetails)
    {
        if (is_null($conflictDetails)) {
            throw new \InvalidArgumentException('non-nullable conflictDetails cannot be null');
        }
        $this->container['conflictDetails'] = $conflictDetails;

        return $this;
    }

    /**
     * Gets userIconId
     *
     * @return int|null
     */
    public function getUserIconId()
    {
        return $this->container['userIconId'];
    }

    /**
     * Sets userIconId
     *
     * @param int|null $userIconId userIconId
     *
     * @return self
     */
    public function setUserIconId($userIconId)
    {
        if (is_null($userIconId)) {
            throw new \InvalidArgumentException('non-nullable userIconId cannot be null');
        }
        $this->container['userIconId'] = $userIconId;

        return $this;
    }

    /**
     * Gets userIcon
     *
     * @return \Supla\ApiClient\Model\UserIcon|null
     */
    public function getUserIcon()
    {
        return $this->container['userIcon'];
    }

    /**
     * Sets userIcon
     *
     * @param \Supla\ApiClient\Model\UserIcon|null $userIcon userIcon
     *
     * @return self
     */
    public function setUserIcon($userIcon)
    {
        if (is_null($userIcon)) {
            throw new \InvalidArgumentException('non-nullable userIcon cannot be null');
        }
        $this->container['userIcon'] = $userIcon;

        return $this;
    }

    /**
     * Gets connected
     *
     * @return bool|null
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param bool|null $connected connected
     *
     * @return self
     */
    public function setConnected($connected)
    {
        if (is_null($connected)) {
            throw new \InvalidArgumentException('non-nullable connected cannot be null');
        }
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets deletable
     *
     * @return bool|null
     */
    public function getDeletable()
    {
        return $this->container['deletable'];
    }

    /**
     * Sets deletable
     *
     * @param bool|null $deletable deletable
     *
     * @return self
     */
    public function setDeletable($deletable)
    {
        if (is_null($deletable)) {
            throw new \InvalidArgumentException('non-nullable deletable cannot be null');
        }
        $this->container['deletable'] = $deletable;

        return $this;
    }

    /**
     * Gets relationsCount
     *
     * @return \Supla\ApiClient\Model\SceneRelationsCount|null
     */
    public function getRelationsCount()
    {
        return $this->container['relationsCount'];
    }

    /**
     * Sets relationsCount
     *
     * @param \Supla\ApiClient\Model\SceneRelationsCount|null $relationsCount relationsCount
     *
     * @return self
     */
    public function setRelationsCount($relationsCount)
    {
        if (is_null($relationsCount)) {
            throw new \InvalidArgumentException('non-nullable relationsCount cannot be null');
        }
        $this->container['relationsCount'] = $relationsCount;

        return $this;
    }

    /**
     * Gets supportedFunctions
     *
     * @return \Supla\ApiClient\Model\ChannelFunction[]|null
     */
    public function getSupportedFunctions()
    {
        return $this->container['supportedFunctions'];
    }

    /**
     * Sets supportedFunctions
     *
     * @param \Supla\ApiClient\Model\ChannelFunction[]|null $supportedFunctions supportedFunctions
     *
     * @return self
     */
    public function setSupportedFunctions($supportedFunctions)
    {
        if (is_null($supportedFunctions)) {
            array_push($this->openAPINullablesSetToNull, 'supportedFunctions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supportedFunctions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['supportedFunctions'] = $supportedFunctions;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \Supla\ApiClient\Model\Channel[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \Supla\ApiClient\Model\Channel[]|null $channels Channel group channels, if requested by the `include` param
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets estimatedExecutionTime
     *
     * @return int|null
     */
    public function getEstimatedExecutionTime()
    {
        return $this->container['estimatedExecutionTime'];
    }

    /**
     * Sets estimatedExecutionTime
     *
     * @param int|null $estimatedExecutionTime Estimated execution time for this scene (in milliseconds).
     *
     * @return self
     */
    public function setEstimatedExecutionTime($estimatedExecutionTime)
    {
        if (is_null($estimatedExecutionTime)) {
            throw new \InvalidArgumentException('non-nullable estimatedExecutionTime cannot be null');
        }
        $this->container['estimatedExecutionTime'] = $estimatedExecutionTime;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \Supla\ApiClient\Model\SceneOperation[]|null
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \Supla\ApiClient\Model\SceneOperation[]|null $operations Scene operations, only if requested in the `include` param
     *
     * @return self
     */
    public function setOperations($operations)
    {
        if (is_null($operations)) {
            throw new \InvalidArgumentException('non-nullable operations cannot be null');
        }
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets subjectType
     *
     * @return \Supla\ApiClient\Model\ActionableSubjectTypeNames|null
     */
    public function getSubjectType()
    {
        return $this->container['subjectType'];
    }

    /**
     * Sets subjectType
     *
     * @param \Supla\ApiClient\Model\ActionableSubjectTypeNames|null $subjectType subjectType
     *
     * @return self
     */
    public function setSubjectType($subjectType)
    {
        if (is_null($subjectType)) {
            throw new \InvalidArgumentException('non-nullable subjectType cannot be null');
        }
        $this->container['subjectType'] = $subjectType;

        return $this;
    }

    /**
     * Gets subjectId
     *
     * @return int|null
     */
    public function getSubjectId()
    {
        return $this->container['subjectId'];
    }

    /**
     * Sets subjectId
     *
     * @param int|null $subjectId subjectId
     *
     * @return self
     */
    public function setSubjectId($subjectId)
    {
        if (is_null($subjectId)) {
            throw new \InvalidArgumentException('non-nullable subjectId cannot be null');
        }
        $this->container['subjectId'] = $subjectId;

        return $this;
    }

    /**
     * Gets dateStart
     *
     * @return \DateTime|null
     */
    public function getDateStart()
    {
        return $this->container['dateStart'];
    }

    /**
     * Sets dateStart
     *
     * @param \DateTime|null $dateStart dateStart
     *
     * @return self
     */
    public function setDateStart($dateStart)
    {
        if (is_null($dateStart)) {
            throw new \InvalidArgumentException('non-nullable dateStart cannot be null');
        }
        $this->container['dateStart'] = $dateStart;

        return $this;
    }

    /**
     * Gets dateEnd
     *
     * @return \DateTime|null
     */
    public function getDateEnd()
    {
        return $this->container['dateEnd'];
    }

    /**
     * Sets dateEnd
     *
     * @param \DateTime|null $dateEnd dateEnd
     *
     * @return self
     */
    public function setDateEnd($dateEnd)
    {
        if (is_null($dateEnd)) {
            throw new \InvalidArgumentException('non-nullable dateEnd cannot be null');
        }
        $this->container['dateEnd'] = $dateEnd;

        return $this;
    }

    /**
     * Gets retry
     *
     * @return bool|null
     */
    public function getRetry()
    {
        return $this->container['retry'];
    }

    /**
     * Sets retry
     *
     * @param bool|null $retry retry
     *
     * @return self
     */
    public function setRetry($retry)
    {
        if (is_null($retry)) {
            throw new \InvalidArgumentException('non-nullable retry cannot be null');
        }
        $this->container['retry'] = $retry;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $allowedValues = $this->getModeAllowableValues();
        if (!in_array($mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'mode', must be one of '%s'",
                    $mode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return \Supla\ApiClient\Model\ActionableSubject|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param \Supla\ApiClient\Model\ActionableSubject|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets closestExecutions
     *
     * @return \Supla\ApiClient\Model\ScheduleClosestExecutions|null
     */
    public function getClosestExecutions()
    {
        return $this->container['closestExecutions'];
    }

    /**
     * Sets closestExecutions
     *
     * @param \Supla\ApiClient\Model\ScheduleClosestExecutions|null $closestExecutions closestExecutions
     *
     * @return self
     */
    public function setClosestExecutions($closestExecutions)
    {
        if (is_null($closestExecutions)) {
            throw new \InvalidArgumentException('non-nullable closestExecutions cannot be null');
        }
        $this->container['closestExecutions'] = $closestExecutions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


