<?php
/**
 * ChannelConfigControllingTheGateClosingRule
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelConfigControllingTheGateClosingRule Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChannelConfigControllingTheGateClosingRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelConfigControllingTheGate_closingRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'maxTimeOpen' => 'int',
        'activeFrom' => '\DateTime',
        'activeTo' => '\DateTime',
        'activeHours' => '\Supla\ApiClient\Model\ActiveHoursDef',
        'activeNow' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'maxTimeOpen' => null,
        'activeFrom' => 'date-time',
        'activeTo' => 'date-time',
        'activeHours' => null,
        'activeNow' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enabled' => false,
        'maxTimeOpen' => false,
        'activeFrom' => false,
        'activeTo' => false,
        'activeHours' => false,
        'activeNow' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'maxTimeOpen' => 'maxTimeOpen',
        'activeFrom' => 'activeFrom',
        'activeTo' => 'activeTo',
        'activeHours' => 'activeHours',
        'activeNow' => 'activeNow'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'maxTimeOpen' => 'setMaxTimeOpen',
        'activeFrom' => 'setActiveFrom',
        'activeTo' => 'setActiveTo',
        'activeHours' => 'setActiveHours',
        'activeNow' => 'setActiveNow'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'maxTimeOpen' => 'getMaxTimeOpen',
        'activeFrom' => 'getActiveFrom',
        'activeTo' => 'getActiveTo',
        'activeHours' => 'getActiveHours',
        'activeNow' => 'getActiveNow'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('maxTimeOpen', $data ?? [], null);
        $this->setIfExists('activeFrom', $data ?? [], null);
        $this->setIfExists('activeTo', $data ?? [], null);
        $this->setIfExists('activeHours', $data ?? [], null);
        $this->setIfExists('activeNow', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['maxTimeOpen']) && ($this->container['maxTimeOpen'] > 28800)) {
            $invalidProperties[] = "invalid value for 'maxTimeOpen', must be smaller than or equal to 28800.";
        }

        if (!is_null($this->container['maxTimeOpen']) && ($this->container['maxTimeOpen'] < 300)) {
            $invalidProperties[] = "invalid value for 'maxTimeOpen', must be bigger than or equal to 300.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets maxTimeOpen
     *
     * @return int|null
     */
    public function getMaxTimeOpen()
    {
        return $this->container['maxTimeOpen'];
    }

    /**
     * Sets maxTimeOpen
     *
     * @param int|null $maxTimeOpen maxTimeOpen
     *
     * @return self
     */
    public function setMaxTimeOpen($maxTimeOpen)
    {
        if (is_null($maxTimeOpen)) {
            throw new \InvalidArgumentException('non-nullable maxTimeOpen cannot be null');
        }

        if (($maxTimeOpen > 28800)) {
            throw new \InvalidArgumentException('invalid value for $maxTimeOpen when calling ChannelConfigControllingTheGateClosingRule., must be smaller than or equal to 28800.');
        }
        if (($maxTimeOpen < 300)) {
            throw new \InvalidArgumentException('invalid value for $maxTimeOpen when calling ChannelConfigControllingTheGateClosingRule., must be bigger than or equal to 300.');
        }

        $this->container['maxTimeOpen'] = $maxTimeOpen;

        return $this;
    }

    /**
     * Gets activeFrom
     *
     * @return \DateTime|null
     */
    public function getActiveFrom()
    {
        return $this->container['activeFrom'];
    }

    /**
     * Sets activeFrom
     *
     * @param \DateTime|null $activeFrom activeFrom
     *
     * @return self
     */
    public function setActiveFrom($activeFrom)
    {
        if (is_null($activeFrom)) {
            throw new \InvalidArgumentException('non-nullable activeFrom cannot be null');
        }
        $this->container['activeFrom'] = $activeFrom;

        return $this;
    }

    /**
     * Gets activeTo
     *
     * @return \DateTime|null
     */
    public function getActiveTo()
    {
        return $this->container['activeTo'];
    }

    /**
     * Sets activeTo
     *
     * @param \DateTime|null $activeTo activeTo
     *
     * @return self
     */
    public function setActiveTo($activeTo)
    {
        if (is_null($activeTo)) {
            throw new \InvalidArgumentException('non-nullable activeTo cannot be null');
        }
        $this->container['activeTo'] = $activeTo;

        return $this;
    }

    /**
     * Gets activeHours
     *
     * @return \Supla\ApiClient\Model\ActiveHoursDef|null
     */
    public function getActiveHours()
    {
        return $this->container['activeHours'];
    }

    /**
     * Sets activeHours
     *
     * @param \Supla\ApiClient\Model\ActiveHoursDef|null $activeHours activeHours
     *
     * @return self
     */
    public function setActiveHours($activeHours)
    {
        if (is_null($activeHours)) {
            throw new \InvalidArgumentException('non-nullable activeHours cannot be null');
        }
        $this->container['activeHours'] = $activeHours;

        return $this;
    }

    /**
     * Gets activeNow
     *
     * @return bool|null
     */
    public function getActiveNow()
    {
        return $this->container['activeNow'];
    }

    /**
     * Sets activeNow
     *
     * @param bool|null $activeNow activeNow
     *
     * @return self
     */
    public function setActiveNow($activeNow)
    {
        if (is_null($activeNow)) {
            throw new \InvalidArgumentException('non-nullable activeNow cannot be null');
        }
        $this->container['activeNow'] = $activeNow;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


