<?php
/**
 * GetChannelMeasurementLogs200ResponseOneOfInner4
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * GetChannelMeasurementLogs200ResponseOneOfInner4 Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetChannelMeasurementLogs200ResponseOneOfInner4 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getChannelMeasurementLogs_200_response_oneOf_inner_4';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dateTimestamp' => 'int',
        'phaseNo' => 'int',
        'countTotal' => 'int',
        'countAbove' => 'int',
        'countBelow' => 'int',
        'secAbove' => 'int',
        'secBelow' => 'int',
        'maxSecAbove' => 'int',
        'maxSecBelow' => 'int',
        'measurementTimeSec' => 'int',
        'avgVoltage' => 'float',
        'minVoltage' => 'float',
        'maxVoltage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dateTimestamp' => null,
        'phaseNo' => null,
        'countTotal' => null,
        'countAbove' => null,
        'countBelow' => null,
        'secAbove' => null,
        'secBelow' => null,
        'maxSecAbove' => null,
        'maxSecBelow' => null,
        'measurementTimeSec' => null,
        'avgVoltage' => null,
        'minVoltage' => null,
        'maxVoltage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dateTimestamp' => false,
        'phaseNo' => false,
        'countTotal' => false,
        'countAbove' => false,
        'countBelow' => false,
        'secAbove' => false,
        'secBelow' => false,
        'maxSecAbove' => false,
        'maxSecBelow' => false,
        'measurementTimeSec' => false,
        'avgVoltage' => false,
        'minVoltage' => false,
        'maxVoltage' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateTimestamp' => 'date_timestamp',
        'phaseNo' => 'phaseNo',
        'countTotal' => 'countTotal',
        'countAbove' => 'countAbove',
        'countBelow' => 'countBelow',
        'secAbove' => 'secAbove',
        'secBelow' => 'secBelow',
        'maxSecAbove' => 'maxSecAbove',
        'maxSecBelow' => 'maxSecBelow',
        'measurementTimeSec' => 'measurementTimeSec',
        'avgVoltage' => 'avgVoltage',
        'minVoltage' => 'minVoltage',
        'maxVoltage' => 'maxVoltage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateTimestamp' => 'setDateTimestamp',
        'phaseNo' => 'setPhaseNo',
        'countTotal' => 'setCountTotal',
        'countAbove' => 'setCountAbove',
        'countBelow' => 'setCountBelow',
        'secAbove' => 'setSecAbove',
        'secBelow' => 'setSecBelow',
        'maxSecAbove' => 'setMaxSecAbove',
        'maxSecBelow' => 'setMaxSecBelow',
        'measurementTimeSec' => 'setMeasurementTimeSec',
        'avgVoltage' => 'setAvgVoltage',
        'minVoltage' => 'setMinVoltage',
        'maxVoltage' => 'setMaxVoltage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateTimestamp' => 'getDateTimestamp',
        'phaseNo' => 'getPhaseNo',
        'countTotal' => 'getCountTotal',
        'countAbove' => 'getCountAbove',
        'countBelow' => 'getCountBelow',
        'secAbove' => 'getSecAbove',
        'secBelow' => 'getSecBelow',
        'maxSecAbove' => 'getMaxSecAbove',
        'maxSecBelow' => 'getMaxSecBelow',
        'measurementTimeSec' => 'getMeasurementTimeSec',
        'avgVoltage' => 'getAvgVoltage',
        'minVoltage' => 'getMinVoltage',
        'maxVoltage' => 'getMaxVoltage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('dateTimestamp', $data ?? [], null);
        $this->setIfExists('phaseNo', $data ?? [], null);
        $this->setIfExists('countTotal', $data ?? [], null);
        $this->setIfExists('countAbove', $data ?? [], null);
        $this->setIfExists('countBelow', $data ?? [], null);
        $this->setIfExists('secAbove', $data ?? [], null);
        $this->setIfExists('secBelow', $data ?? [], null);
        $this->setIfExists('maxSecAbove', $data ?? [], null);
        $this->setIfExists('maxSecBelow', $data ?? [], null);
        $this->setIfExists('measurementTimeSec', $data ?? [], null);
        $this->setIfExists('avgVoltage', $data ?? [], null);
        $this->setIfExists('minVoltage', $data ?? [], null);
        $this->setIfExists('maxVoltage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dateTimestamp
     *
     * @return int|null
     */
    public function getDateTimestamp()
    {
        return $this->container['dateTimestamp'];
    }

    /**
     * Sets dateTimestamp
     *
     * @param int|null $dateTimestamp dateTimestamp
     *
     * @return self
     */
    public function setDateTimestamp($dateTimestamp)
    {
        if (is_null($dateTimestamp)) {
            throw new \InvalidArgumentException('non-nullable dateTimestamp cannot be null');
        }
        $this->container['dateTimestamp'] = $dateTimestamp;

        return $this;
    }

    /**
     * Gets phaseNo
     *
     * @return int|null
     */
    public function getPhaseNo()
    {
        return $this->container['phaseNo'];
    }

    /**
     * Sets phaseNo
     *
     * @param int|null $phaseNo phaseNo
     *
     * @return self
     */
    public function setPhaseNo($phaseNo)
    {
        if (is_null($phaseNo)) {
            throw new \InvalidArgumentException('non-nullable phaseNo cannot be null');
        }
        $this->container['phaseNo'] = $phaseNo;

        return $this;
    }

    /**
     * Gets countTotal
     *
     * @return int|null
     */
    public function getCountTotal()
    {
        return $this->container['countTotal'];
    }

    /**
     * Sets countTotal
     *
     * @param int|null $countTotal countTotal
     *
     * @return self
     */
    public function setCountTotal($countTotal)
    {
        if (is_null($countTotal)) {
            throw new \InvalidArgumentException('non-nullable countTotal cannot be null');
        }
        $this->container['countTotal'] = $countTotal;

        return $this;
    }

    /**
     * Gets countAbove
     *
     * @return int|null
     */
    public function getCountAbove()
    {
        return $this->container['countAbove'];
    }

    /**
     * Sets countAbove
     *
     * @param int|null $countAbove countAbove
     *
     * @return self
     */
    public function setCountAbove($countAbove)
    {
        if (is_null($countAbove)) {
            throw new \InvalidArgumentException('non-nullable countAbove cannot be null');
        }
        $this->container['countAbove'] = $countAbove;

        return $this;
    }

    /**
     * Gets countBelow
     *
     * @return int|null
     */
    public function getCountBelow()
    {
        return $this->container['countBelow'];
    }

    /**
     * Sets countBelow
     *
     * @param int|null $countBelow countBelow
     *
     * @return self
     */
    public function setCountBelow($countBelow)
    {
        if (is_null($countBelow)) {
            throw new \InvalidArgumentException('non-nullable countBelow cannot be null');
        }
        $this->container['countBelow'] = $countBelow;

        return $this;
    }

    /**
     * Gets secAbove
     *
     * @return int|null
     */
    public function getSecAbove()
    {
        return $this->container['secAbove'];
    }

    /**
     * Sets secAbove
     *
     * @param int|null $secAbove secAbove
     *
     * @return self
     */
    public function setSecAbove($secAbove)
    {
        if (is_null($secAbove)) {
            throw new \InvalidArgumentException('non-nullable secAbove cannot be null');
        }
        $this->container['secAbove'] = $secAbove;

        return $this;
    }

    /**
     * Gets secBelow
     *
     * @return int|null
     */
    public function getSecBelow()
    {
        return $this->container['secBelow'];
    }

    /**
     * Sets secBelow
     *
     * @param int|null $secBelow secBelow
     *
     * @return self
     */
    public function setSecBelow($secBelow)
    {
        if (is_null($secBelow)) {
            throw new \InvalidArgumentException('non-nullable secBelow cannot be null');
        }
        $this->container['secBelow'] = $secBelow;

        return $this;
    }

    /**
     * Gets maxSecAbove
     *
     * @return int|null
     */
    public function getMaxSecAbove()
    {
        return $this->container['maxSecAbove'];
    }

    /**
     * Sets maxSecAbove
     *
     * @param int|null $maxSecAbove maxSecAbove
     *
     * @return self
     */
    public function setMaxSecAbove($maxSecAbove)
    {
        if (is_null($maxSecAbove)) {
            throw new \InvalidArgumentException('non-nullable maxSecAbove cannot be null');
        }
        $this->container['maxSecAbove'] = $maxSecAbove;

        return $this;
    }

    /**
     * Gets maxSecBelow
     *
     * @return int|null
     */
    public function getMaxSecBelow()
    {
        return $this->container['maxSecBelow'];
    }

    /**
     * Sets maxSecBelow
     *
     * @param int|null $maxSecBelow maxSecBelow
     *
     * @return self
     */
    public function setMaxSecBelow($maxSecBelow)
    {
        if (is_null($maxSecBelow)) {
            throw new \InvalidArgumentException('non-nullable maxSecBelow cannot be null');
        }
        $this->container['maxSecBelow'] = $maxSecBelow;

        return $this;
    }

    /**
     * Gets measurementTimeSec
     *
     * @return int|null
     */
    public function getMeasurementTimeSec()
    {
        return $this->container['measurementTimeSec'];
    }

    /**
     * Sets measurementTimeSec
     *
     * @param int|null $measurementTimeSec measurementTimeSec
     *
     * @return self
     */
    public function setMeasurementTimeSec($measurementTimeSec)
    {
        if (is_null($measurementTimeSec)) {
            throw new \InvalidArgumentException('non-nullable measurementTimeSec cannot be null');
        }
        $this->container['measurementTimeSec'] = $measurementTimeSec;

        return $this;
    }

    /**
     * Gets avgVoltage
     *
     * @return float|null
     */
    public function getAvgVoltage()
    {
        return $this->container['avgVoltage'];
    }

    /**
     * Sets avgVoltage
     *
     * @param float|null $avgVoltage avgVoltage
     *
     * @return self
     */
    public function setAvgVoltage($avgVoltage)
    {
        if (is_null($avgVoltage)) {
            throw new \InvalidArgumentException('non-nullable avgVoltage cannot be null');
        }
        $this->container['avgVoltage'] = $avgVoltage;

        return $this;
    }

    /**
     * Gets minVoltage
     *
     * @return float|null
     */
    public function getMinVoltage()
    {
        return $this->container['minVoltage'];
    }

    /**
     * Sets minVoltage
     *
     * @param float|null $minVoltage minVoltage
     *
     * @return self
     */
    public function setMinVoltage($minVoltage)
    {
        if (is_null($minVoltage)) {
            throw new \InvalidArgumentException('non-nullable minVoltage cannot be null');
        }
        $this->container['minVoltage'] = $minVoltage;

        return $this;
    }

    /**
     * Gets maxVoltage
     *
     * @return float|null
     */
    public function getMaxVoltage()
    {
        return $this->container['maxVoltage'];
    }

    /**
     * Sets maxVoltage
     *
     * @param float|null $maxVoltage maxVoltage
     *
     * @return self
     */
    public function setMaxVoltage($maxVoltage)
    {
        if (is_null($maxVoltage)) {
            throw new \InvalidArgumentException('non-nullable maxVoltage cannot be null');
        }
        $this->container['maxVoltage'] = $maxVoltage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


