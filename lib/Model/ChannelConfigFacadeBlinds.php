<?php
/**
 * ChannelConfigFacadeBlinds
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelConfigFacadeBlinds Class Doc Comment
 *
 * @category Class
 * @description Config for &#x60;CONTROLLINGTHEROLLERSHUTTER&#x60; function.
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChannelConfigFacadeBlinds implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelConfigFacadeBlinds';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'openingTimeS' => 'float',
        'closingTimeS' => 'float',
        'tiltingTimeS' => 'float',
        'timeSettingAvailable' => 'bool',
        'recalibrateAvailable' => 'bool',
        'autoCalibrationAvailable' => 'bool',
        'motorUpsideDown' => 'bool',
        'buttonsUpsideDown' => 'bool',
        'tiltControlType' => 'string',
        'timeMargin' => '\Supla\ApiClient\Model\ChannelConfigFacadeBlindsTimeMargin',
        'tilt0Angle' => 'int',
        'tilt100Angle' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'openingTimeS' => null,
        'closingTimeS' => null,
        'tiltingTimeS' => null,
        'timeSettingAvailable' => null,
        'recalibrateAvailable' => null,
        'autoCalibrationAvailable' => null,
        'motorUpsideDown' => null,
        'buttonsUpsideDown' => null,
        'tiltControlType' => null,
        'timeMargin' => null,
        'tilt0Angle' => null,
        'tilt100Angle' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'openingTimeS' => false,
        'closingTimeS' => false,
        'tiltingTimeS' => false,
        'timeSettingAvailable' => false,
        'recalibrateAvailable' => false,
        'autoCalibrationAvailable' => false,
        'motorUpsideDown' => false,
        'buttonsUpsideDown' => false,
        'tiltControlType' => false,
        'timeMargin' => false,
        'tilt0Angle' => false,
        'tilt100Angle' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'openingTimeS' => 'openingTimeS',
        'closingTimeS' => 'closingTimeS',
        'tiltingTimeS' => 'tiltingTimeS',
        'timeSettingAvailable' => 'timeSettingAvailable',
        'recalibrateAvailable' => 'recalibrateAvailable',
        'autoCalibrationAvailable' => 'autoCalibrationAvailable',
        'motorUpsideDown' => 'motorUpsideDown',
        'buttonsUpsideDown' => 'buttonsUpsideDown',
        'tiltControlType' => 'tiltControlType',
        'timeMargin' => 'timeMargin',
        'tilt0Angle' => 'tilt0Angle',
        'tilt100Angle' => 'tilt100Angle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'openingTimeS' => 'setOpeningTimeS',
        'closingTimeS' => 'setClosingTimeS',
        'tiltingTimeS' => 'setTiltingTimeS',
        'timeSettingAvailable' => 'setTimeSettingAvailable',
        'recalibrateAvailable' => 'setRecalibrateAvailable',
        'autoCalibrationAvailable' => 'setAutoCalibrationAvailable',
        'motorUpsideDown' => 'setMotorUpsideDown',
        'buttonsUpsideDown' => 'setButtonsUpsideDown',
        'tiltControlType' => 'setTiltControlType',
        'timeMargin' => 'setTimeMargin',
        'tilt0Angle' => 'setTilt0Angle',
        'tilt100Angle' => 'setTilt100Angle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'openingTimeS' => 'getOpeningTimeS',
        'closingTimeS' => 'getClosingTimeS',
        'tiltingTimeS' => 'getTiltingTimeS',
        'timeSettingAvailable' => 'getTimeSettingAvailable',
        'recalibrateAvailable' => 'getRecalibrateAvailable',
        'autoCalibrationAvailable' => 'getAutoCalibrationAvailable',
        'motorUpsideDown' => 'getMotorUpsideDown',
        'buttonsUpsideDown' => 'getButtonsUpsideDown',
        'tiltControlType' => 'getTiltControlType',
        'timeMargin' => 'getTimeMargin',
        'tilt0Angle' => 'getTilt0Angle',
        'tilt100Angle' => 'getTilt100Angle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('openingTimeS', $data ?? [], null);
        $this->setIfExists('closingTimeS', $data ?? [], null);
        $this->setIfExists('tiltingTimeS', $data ?? [], null);
        $this->setIfExists('timeSettingAvailable', $data ?? [], null);
        $this->setIfExists('recalibrateAvailable', $data ?? [], null);
        $this->setIfExists('autoCalibrationAvailable', $data ?? [], null);
        $this->setIfExists('motorUpsideDown', $data ?? [], null);
        $this->setIfExists('buttonsUpsideDown', $data ?? [], null);
        $this->setIfExists('tiltControlType', $data ?? [], null);
        $this->setIfExists('timeMargin', $data ?? [], null);
        $this->setIfExists('tilt0Angle', $data ?? [], null);
        $this->setIfExists('tilt100Angle', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets openingTimeS
     *
     * @return float|null
     */
    public function getOpeningTimeS()
    {
        return $this->container['openingTimeS'];
    }

    /**
     * Sets openingTimeS
     *
     * @param float|null $openingTimeS openingTimeS
     *
     * @return self
     */
    public function setOpeningTimeS($openingTimeS)
    {
        if (is_null($openingTimeS)) {
            throw new \InvalidArgumentException('non-nullable openingTimeS cannot be null');
        }
        $this->container['openingTimeS'] = $openingTimeS;

        return $this;
    }

    /**
     * Gets closingTimeS
     *
     * @return float|null
     */
    public function getClosingTimeS()
    {
        return $this->container['closingTimeS'];
    }

    /**
     * Sets closingTimeS
     *
     * @param float|null $closingTimeS closingTimeS
     *
     * @return self
     */
    public function setClosingTimeS($closingTimeS)
    {
        if (is_null($closingTimeS)) {
            throw new \InvalidArgumentException('non-nullable closingTimeS cannot be null');
        }
        $this->container['closingTimeS'] = $closingTimeS;

        return $this;
    }

    /**
     * Gets tiltingTimeS
     *
     * @return float|null
     */
    public function getTiltingTimeS()
    {
        return $this->container['tiltingTimeS'];
    }

    /**
     * Sets tiltingTimeS
     *
     * @param float|null $tiltingTimeS tiltingTimeS
     *
     * @return self
     */
    public function setTiltingTimeS($tiltingTimeS)
    {
        if (is_null($tiltingTimeS)) {
            throw new \InvalidArgumentException('non-nullable tiltingTimeS cannot be null');
        }
        $this->container['tiltingTimeS'] = $tiltingTimeS;

        return $this;
    }

    /**
     * Gets timeSettingAvailable
     *
     * @return bool|null
     */
    public function getTimeSettingAvailable()
    {
        return $this->container['timeSettingAvailable'];
    }

    /**
     * Sets timeSettingAvailable
     *
     * @param bool|null $timeSettingAvailable timeSettingAvailable
     *
     * @return self
     */
    public function setTimeSettingAvailable($timeSettingAvailable)
    {
        if (is_null($timeSettingAvailable)) {
            throw new \InvalidArgumentException('non-nullable timeSettingAvailable cannot be null');
        }
        $this->container['timeSettingAvailable'] = $timeSettingAvailable;

        return $this;
    }

    /**
     * Gets recalibrateAvailable
     *
     * @return bool|null
     */
    public function getRecalibrateAvailable()
    {
        return $this->container['recalibrateAvailable'];
    }

    /**
     * Sets recalibrateAvailable
     *
     * @param bool|null $recalibrateAvailable recalibrateAvailable
     *
     * @return self
     */
    public function setRecalibrateAvailable($recalibrateAvailable)
    {
        if (is_null($recalibrateAvailable)) {
            throw new \InvalidArgumentException('non-nullable recalibrateAvailable cannot be null');
        }
        $this->container['recalibrateAvailable'] = $recalibrateAvailable;

        return $this;
    }

    /**
     * Gets autoCalibrationAvailable
     *
     * @return bool|null
     */
    public function getAutoCalibrationAvailable()
    {
        return $this->container['autoCalibrationAvailable'];
    }

    /**
     * Sets autoCalibrationAvailable
     *
     * @param bool|null $autoCalibrationAvailable autoCalibrationAvailable
     *
     * @return self
     */
    public function setAutoCalibrationAvailable($autoCalibrationAvailable)
    {
        if (is_null($autoCalibrationAvailable)) {
            throw new \InvalidArgumentException('non-nullable autoCalibrationAvailable cannot be null');
        }
        $this->container['autoCalibrationAvailable'] = $autoCalibrationAvailable;

        return $this;
    }

    /**
     * Gets motorUpsideDown
     *
     * @return bool|null
     */
    public function getMotorUpsideDown()
    {
        return $this->container['motorUpsideDown'];
    }

    /**
     * Sets motorUpsideDown
     *
     * @param bool|null $motorUpsideDown motorUpsideDown
     *
     * @return self
     */
    public function setMotorUpsideDown($motorUpsideDown)
    {
        if (is_null($motorUpsideDown)) {
            throw new \InvalidArgumentException('non-nullable motorUpsideDown cannot be null');
        }
        $this->container['motorUpsideDown'] = $motorUpsideDown;

        return $this;
    }

    /**
     * Gets buttonsUpsideDown
     *
     * @return bool|null
     */
    public function getButtonsUpsideDown()
    {
        return $this->container['buttonsUpsideDown'];
    }

    /**
     * Sets buttonsUpsideDown
     *
     * @param bool|null $buttonsUpsideDown buttonsUpsideDown
     *
     * @return self
     */
    public function setButtonsUpsideDown($buttonsUpsideDown)
    {
        if (is_null($buttonsUpsideDown)) {
            throw new \InvalidArgumentException('non-nullable buttonsUpsideDown cannot be null');
        }
        $this->container['buttonsUpsideDown'] = $buttonsUpsideDown;

        return $this;
    }

    /**
     * Gets tiltControlType
     *
     * @return string|null
     */
    public function getTiltControlType()
    {
        return $this->container['tiltControlType'];
    }

    /**
     * Sets tiltControlType
     *
     * @param string|null $tiltControlType tiltControlType
     *
     * @return self
     */
    public function setTiltControlType($tiltControlType)
    {
        if (is_null($tiltControlType)) {
            throw new \InvalidArgumentException('non-nullable tiltControlType cannot be null');
        }
        $this->container['tiltControlType'] = $tiltControlType;

        return $this;
    }

    /**
     * Gets timeMargin
     *
     * @return \Supla\ApiClient\Model\ChannelConfigFacadeBlindsTimeMargin|null
     */
    public function getTimeMargin()
    {
        return $this->container['timeMargin'];
    }

    /**
     * Sets timeMargin
     *
     * @param \Supla\ApiClient\Model\ChannelConfigFacadeBlindsTimeMargin|null $timeMargin timeMargin
     *
     * @return self
     */
    public function setTimeMargin($timeMargin)
    {
        if (is_null($timeMargin)) {
            throw new \InvalidArgumentException('non-nullable timeMargin cannot be null');
        }
        $this->container['timeMargin'] = $timeMargin;

        return $this;
    }

    /**
     * Gets tilt0Angle
     *
     * @return int|null
     */
    public function getTilt0Angle()
    {
        return $this->container['tilt0Angle'];
    }

    /**
     * Sets tilt0Angle
     *
     * @param int|null $tilt0Angle tilt0Angle
     *
     * @return self
     */
    public function setTilt0Angle($tilt0Angle)
    {
        if (is_null($tilt0Angle)) {
            throw new \InvalidArgumentException('non-nullable tilt0Angle cannot be null');
        }
        $this->container['tilt0Angle'] = $tilt0Angle;

        return $this;
    }

    /**
     * Gets tilt100Angle
     *
     * @return int|null
     */
    public function getTilt100Angle()
    {
        return $this->container['tilt100Angle'];
    }

    /**
     * Sets tilt100Angle
     *
     * @param int|null $tilt100Angle tilt100Angle
     *
     * @return self
     */
    public function setTilt100Angle($tilt100Angle)
    {
        if (is_null($tilt100Angle)) {
            throw new \InvalidArgumentException('non-nullable tilt100Angle cannot be null');
        }
        $this->container['tilt100Angle'] = $tilt100Angle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


