<?php
/**
 * ClientApp
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ClientApp Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClientApp implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientApp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'caption' => 'string',
        'enabled' => 'bool',
        'connected' => 'bool',
        'lastAccessDate' => '\DateTime',
        'lastAccessIpv4' => 'string',
        'regDate' => '\DateTime',
        'regIpv4' => 'string',
        'softwareVersion' => 'string',
        'protocolVersion' => 'int',
        'accessIdId' => 'int',
        'accessId' => '\Supla\ApiClient\Model\AccessIdentifier'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'caption' => null,
        'enabled' => null,
        'connected' => null,
        'lastAccessDate' => 'date-time',
        'lastAccessIpv4' => 'ipv4',
        'regDate' => 'date-time',
        'regIpv4' => 'ipv4',
        'softwareVersion' => null,
        'protocolVersion' => null,
        'accessIdId' => null,
        'accessId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'caption' => false,
        'enabled' => false,
        'connected' => false,
        'lastAccessDate' => false,
        'lastAccessIpv4' => false,
        'regDate' => false,
        'regIpv4' => false,
        'softwareVersion' => false,
        'protocolVersion' => false,
        'accessIdId' => false,
        'accessId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'caption' => 'caption',
        'enabled' => 'enabled',
        'connected' => 'connected',
        'lastAccessDate' => 'lastAccessDate',
        'lastAccessIpv4' => 'lastAccessIpv4',
        'regDate' => 'regDate',
        'regIpv4' => 'regIpv4',
        'softwareVersion' => 'softwareVersion',
        'protocolVersion' => 'protocolVersion',
        'accessIdId' => 'accessIdId',
        'accessId' => 'accessId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'caption' => 'setCaption',
        'enabled' => 'setEnabled',
        'connected' => 'setConnected',
        'lastAccessDate' => 'setLastAccessDate',
        'lastAccessIpv4' => 'setLastAccessIpv4',
        'regDate' => 'setRegDate',
        'regIpv4' => 'setRegIpv4',
        'softwareVersion' => 'setSoftwareVersion',
        'protocolVersion' => 'setProtocolVersion',
        'accessIdId' => 'setAccessIdId',
        'accessId' => 'setAccessId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'caption' => 'getCaption',
        'enabled' => 'getEnabled',
        'connected' => 'getConnected',
        'lastAccessDate' => 'getLastAccessDate',
        'lastAccessIpv4' => 'getLastAccessIpv4',
        'regDate' => 'getRegDate',
        'regIpv4' => 'getRegIpv4',
        'softwareVersion' => 'getSoftwareVersion',
        'protocolVersion' => 'getProtocolVersion',
        'accessIdId' => 'getAccessIdId',
        'accessId' => 'getAccessId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('caption', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('connected', $data ?? [], null);
        $this->setIfExists('lastAccessDate', $data ?? [], null);
        $this->setIfExists('lastAccessIpv4', $data ?? [], null);
        $this->setIfExists('regDate', $data ?? [], null);
        $this->setIfExists('regIpv4', $data ?? [], null);
        $this->setIfExists('softwareVersion', $data ?? [], null);
        $this->setIfExists('protocolVersion', $data ?? [], null);
        $this->setIfExists('accessIdId', $data ?? [], null);
        $this->setIfExists('accessId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name from the device
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption Caption set by the user
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (is_null($caption)) {
            throw new \InvalidArgumentException('non-nullable caption cannot be null');
        }
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets connected
     *
     * @return bool|null
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param bool|null $connected Whether the app is connected now or not, sent only if requested by the `include` param
     *
     * @return self
     */
    public function setConnected($connected)
    {
        if (is_null($connected)) {
            throw new \InvalidArgumentException('non-nullable connected cannot be null');
        }
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets lastAccessDate
     *
     * @return \DateTime|null
     */
    public function getLastAccessDate()
    {
        return $this->container['lastAccessDate'];
    }

    /**
     * Sets lastAccessDate
     *
     * @param \DateTime|null $lastAccessDate lastAccessDate
     *
     * @return self
     */
    public function setLastAccessDate($lastAccessDate)
    {
        if (is_null($lastAccessDate)) {
            throw new \InvalidArgumentException('non-nullable lastAccessDate cannot be null');
        }
        $this->container['lastAccessDate'] = $lastAccessDate;

        return $this;
    }

    /**
     * Gets lastAccessIpv4
     *
     * @return string|null
     */
    public function getLastAccessIpv4()
    {
        return $this->container['lastAccessIpv4'];
    }

    /**
     * Sets lastAccessIpv4
     *
     * @param string|null $lastAccessIpv4 lastAccessIpv4
     *
     * @return self
     */
    public function setLastAccessIpv4($lastAccessIpv4)
    {
        if (is_null($lastAccessIpv4)) {
            throw new \InvalidArgumentException('non-nullable lastAccessIpv4 cannot be null');
        }
        $this->container['lastAccessIpv4'] = $lastAccessIpv4;

        return $this;
    }

    /**
     * Gets regDate
     *
     * @return \DateTime|null
     */
    public function getRegDate()
    {
        return $this->container['regDate'];
    }

    /**
     * Sets regDate
     *
     * @param \DateTime|null $regDate regDate
     *
     * @return self
     */
    public function setRegDate($regDate)
    {
        if (is_null($regDate)) {
            throw new \InvalidArgumentException('non-nullable regDate cannot be null');
        }
        $this->container['regDate'] = $regDate;

        return $this;
    }

    /**
     * Gets regIpv4
     *
     * @return string|null
     */
    public function getRegIpv4()
    {
        return $this->container['regIpv4'];
    }

    /**
     * Sets regIpv4
     *
     * @param string|null $regIpv4 regIpv4
     *
     * @return self
     */
    public function setRegIpv4($regIpv4)
    {
        if (is_null($regIpv4)) {
            throw new \InvalidArgumentException('non-nullable regIpv4 cannot be null');
        }
        $this->container['regIpv4'] = $regIpv4;

        return $this;
    }

    /**
     * Gets softwareVersion
     *
     * @return string|null
     */
    public function getSoftwareVersion()
    {
        return $this->container['softwareVersion'];
    }

    /**
     * Sets softwareVersion
     *
     * @param string|null $softwareVersion softwareVersion
     *
     * @return self
     */
    public function setSoftwareVersion($softwareVersion)
    {
        if (is_null($softwareVersion)) {
            throw new \InvalidArgumentException('non-nullable softwareVersion cannot be null');
        }
        $this->container['softwareVersion'] = $softwareVersion;

        return $this;
    }

    /**
     * Gets protocolVersion
     *
     * @return int|null
     */
    public function getProtocolVersion()
    {
        return $this->container['protocolVersion'];
    }

    /**
     * Sets protocolVersion
     *
     * @param int|null $protocolVersion protocolVersion
     *
     * @return self
     */
    public function setProtocolVersion($protocolVersion)
    {
        if (is_null($protocolVersion)) {
            throw new \InvalidArgumentException('non-nullable protocolVersion cannot be null');
        }
        $this->container['protocolVersion'] = $protocolVersion;

        return $this;
    }

    /**
     * Gets accessIdId
     *
     * @return int|null
     */
    public function getAccessIdId()
    {
        return $this->container['accessIdId'];
    }

    /**
     * Sets accessIdId
     *
     * @param int|null $accessIdId accessIdId
     *
     * @return self
     */
    public function setAccessIdId($accessIdId)
    {
        if (is_null($accessIdId)) {
            throw new \InvalidArgumentException('non-nullable accessIdId cannot be null');
        }
        $this->container['accessIdId'] = $accessIdId;

        return $this;
    }

    /**
     * Gets accessId
     *
     * @return \Supla\ApiClient\Model\AccessIdentifier|null
     */
    public function getAccessId()
    {
        return $this->container['accessId'];
    }

    /**
     * Sets accessId
     *
     * @param \Supla\ApiClient\Model\AccessIdentifier|null $accessId accessId
     *
     * @return self
     */
    public function setAccessId($accessId)
    {
        if (is_null($accessId)) {
            throw new \InvalidArgumentException('non-nullable accessId cannot be null');
        }
        $this->container['accessId'] = $accessId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


