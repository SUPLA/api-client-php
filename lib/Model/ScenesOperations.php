<?php
/**
 * ScenesOperations
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.01.01-51-gd3ab095f
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ScenesOperations Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ScenesOperations implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_scenes_operations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subjectId' => 'int',
        'subjectType' => '\Supla\ApiClient\Model\ActionableSubjectTypeNames',
        'delayMs' => 'int',
        'waitForCompletion' => 'bool',
        'actionId' => 'int',
        'actionParam' => 'OneOfChannelActionParams'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subjectId' => null,
        'subjectType' => null,
        'delayMs' => null,
        'waitForCompletion' => null,
        'actionId' => null,
        'actionParam' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subjectId' => 'subjectId',
        'subjectType' => 'subjectType',
        'delayMs' => 'delayMs',
        'waitForCompletion' => 'waitForCompletion',
        'actionId' => 'actionId',
        'actionParam' => 'actionParam'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subjectId' => 'setSubjectId',
        'subjectType' => 'setSubjectType',
        'delayMs' => 'setDelayMs',
        'waitForCompletion' => 'setWaitForCompletion',
        'actionId' => 'setActionId',
        'actionParam' => 'setActionParam'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subjectId' => 'getSubjectId',
        'subjectType' => 'getSubjectType',
        'delayMs' => 'getDelayMs',
        'waitForCompletion' => 'getWaitForCompletion',
        'actionId' => 'getActionId',
        'actionParam' => 'getActionParam'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subjectId'] = $data['subjectId'] ?? null;
        $this->container['subjectType'] = $data['subjectType'] ?? null;
        $this->container['delayMs'] = $data['delayMs'] ?? null;
        $this->container['waitForCompletion'] = $data['waitForCompletion'] ?? null;
        $this->container['actionId'] = $data['actionId'] ?? null;
        $this->container['actionParam'] = $data['actionParam'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subjectId
     *
     * @return int|null
     */
    public function getSubjectId()
    {
        return $this->container['subjectId'];
    }

    /**
     * Sets subjectId
     *
     * @param int|null $subjectId subjectId
     *
     * @return self
     */
    public function setSubjectId($subjectId)
    {
        $this->container['subjectId'] = $subjectId;

        return $this;
    }

    /**
     * Gets subjectType
     *
     * @return \Supla\ApiClient\Model\ActionableSubjectTypeNames|null
     */
    public function getSubjectType()
    {
        return $this->container['subjectType'];
    }

    /**
     * Sets subjectType
     *
     * @param \Supla\ApiClient\Model\ActionableSubjectTypeNames|null $subjectType subjectType
     *
     * @return self
     */
    public function setSubjectType($subjectType)
    {
        $this->container['subjectType'] = $subjectType;

        return $this;
    }

    /**
     * Gets delayMs
     *
     * @return int|null
     */
    public function getDelayMs()
    {
        return $this->container['delayMs'];
    }

    /**
     * Sets delayMs
     *
     * @param int|null $delayMs delayMs
     *
     * @return self
     */
    public function setDelayMs($delayMs)
    {
        $this->container['delayMs'] = $delayMs;

        return $this;
    }

    /**
     * Gets waitForCompletion
     *
     * @return bool|null
     */
    public function getWaitForCompletion()
    {
        return $this->container['waitForCompletion'];
    }

    /**
     * Sets waitForCompletion
     *
     * @param bool|null $waitForCompletion waitForCompletion
     *
     * @return self
     */
    public function setWaitForCompletion($waitForCompletion)
    {
        $this->container['waitForCompletion'] = $waitForCompletion;

        return $this;
    }

    /**
     * Gets actionId
     *
     * @return int|null
     */
    public function getActionId()
    {
        return $this->container['actionId'];
    }

    /**
     * Sets actionId
     *
     * @param int|null $actionId actionId
     *
     * @return self
     */
    public function setActionId($actionId)
    {
        $this->container['actionId'] = $actionId;

        return $this;
    }

    /**
     * Gets actionParam
     *
     * @return OneOfChannelActionParams|null
     */
    public function getActionParam()
    {
        return $this->container['actionParam'];
    }

    /**
     * Sets actionParam
     *
     * @param OneOfChannelActionParams|null $actionParam actionParam
     *
     * @return self
     */
    public function setActionParam($actionParam)
    {
        $this->container['actionParam'] = $actionParam;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


