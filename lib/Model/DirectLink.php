<?php
/**
 * DirectLink
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * DirectLink Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DirectLink implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DirectLink';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'caption' => 'string',
        'active' => 'bool',
        'disableHttpGet' => 'bool',
        'enabled' => 'bool',
        'subjectType' => '\Supla\ApiClient\Model\ActionableSubjectTypeNames',
        'subjectId' => 'int',
        'lastUsed' => '\DateTime',
        'lastIpv4' => 'string',
        'userId' => 'int',
        'executionsLimit' => 'int',
        'allowedActions' => 'string[]',
        'activeDateRange' => '\Supla\ApiClient\Model\DirectLinkActiveDateRange',
        'subject' => '\Supla\ApiClient\Model\ActionableSubject'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'caption' => null,
        'active' => null,
        'disableHttpGet' => null,
        'enabled' => null,
        'subjectType' => null,
        'subjectId' => null,
        'lastUsed' => 'date-time',
        'lastIpv4' => 'ipv4',
        'userId' => null,
        'executionsLimit' => null,
        'allowedActions' => null,
        'activeDateRange' => null,
        'subject' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'caption' => false,
        'active' => false,
        'disableHttpGet' => false,
        'enabled' => false,
        'subjectType' => false,
        'subjectId' => false,
        'lastUsed' => false,
        'lastIpv4' => false,
        'userId' => false,
        'executionsLimit' => false,
        'allowedActions' => false,
        'activeDateRange' => false,
        'subject' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'caption' => 'caption',
        'active' => 'active',
        'disableHttpGet' => 'disableHttpGet',
        'enabled' => 'enabled',
        'subjectType' => 'subjectType',
        'subjectId' => 'subjectId',
        'lastUsed' => 'lastUsed',
        'lastIpv4' => 'lastIpv4',
        'userId' => 'userId',
        'executionsLimit' => 'executionsLimit',
        'allowedActions' => 'allowedActions',
        'activeDateRange' => 'activeDateRange',
        'subject' => 'subject'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'caption' => 'setCaption',
        'active' => 'setActive',
        'disableHttpGet' => 'setDisableHttpGet',
        'enabled' => 'setEnabled',
        'subjectType' => 'setSubjectType',
        'subjectId' => 'setSubjectId',
        'lastUsed' => 'setLastUsed',
        'lastIpv4' => 'setLastIpv4',
        'userId' => 'setUserId',
        'executionsLimit' => 'setExecutionsLimit',
        'allowedActions' => 'setAllowedActions',
        'activeDateRange' => 'setActiveDateRange',
        'subject' => 'setSubject'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'caption' => 'getCaption',
        'active' => 'getActive',
        'disableHttpGet' => 'getDisableHttpGet',
        'enabled' => 'getEnabled',
        'subjectType' => 'getSubjectType',
        'subjectId' => 'getSubjectId',
        'lastUsed' => 'getLastUsed',
        'lastIpv4' => 'getLastIpv4',
        'userId' => 'getUserId',
        'executionsLimit' => 'getExecutionsLimit',
        'allowedActions' => 'getAllowedActions',
        'activeDateRange' => 'getActiveDateRange',
        'subject' => 'getSubject'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('caption', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('disableHttpGet', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('subjectType', $data ?? [], null);
        $this->setIfExists('subjectId', $data ?? [], null);
        $this->setIfExists('lastUsed', $data ?? [], null);
        $this->setIfExists('lastIpv4', $data ?? [], null);
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('executionsLimit', $data ?? [], null);
        $this->setIfExists('allowedActions', $data ?? [], null);
        $this->setIfExists('activeDateRange', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption Caption set by the user
     *
     * @return self
     */
    public function setCaption($caption)
    {
        if (is_null($caption)) {
            throw new \InvalidArgumentException('non-nullable caption cannot be null');
        }
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets disableHttpGet
     *
     * @return bool|null
     */
    public function getDisableHttpGet()
    {
        return $this->container['disableHttpGet'];
    }

    /**
     * Sets disableHttpGet
     *
     * @param bool|null $disableHttpGet disableHttpGet
     *
     * @return self
     */
    public function setDisableHttpGet($disableHttpGet)
    {
        if (is_null($disableHttpGet)) {
            throw new \InvalidArgumentException('non-nullable disableHttpGet cannot be null');
        }
        $this->container['disableHttpGet'] = $disableHttpGet;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets subjectType
     *
     * @return \Supla\ApiClient\Model\ActionableSubjectTypeNames|null
     */
    public function getSubjectType()
    {
        return $this->container['subjectType'];
    }

    /**
     * Sets subjectType
     *
     * @param \Supla\ApiClient\Model\ActionableSubjectTypeNames|null $subjectType subjectType
     *
     * @return self
     */
    public function setSubjectType($subjectType)
    {
        if (is_null($subjectType)) {
            throw new \InvalidArgumentException('non-nullable subjectType cannot be null');
        }
        $this->container['subjectType'] = $subjectType;

        return $this;
    }

    /**
     * Gets subjectId
     *
     * @return int|null
     */
    public function getSubjectId()
    {
        return $this->container['subjectId'];
    }

    /**
     * Sets subjectId
     *
     * @param int|null $subjectId subjectId
     *
     * @return self
     */
    public function setSubjectId($subjectId)
    {
        if (is_null($subjectId)) {
            throw new \InvalidArgumentException('non-nullable subjectId cannot be null');
        }
        $this->container['subjectId'] = $subjectId;

        return $this;
    }

    /**
     * Gets lastUsed
     *
     * @return \DateTime|null
     */
    public function getLastUsed()
    {
        return $this->container['lastUsed'];
    }

    /**
     * Sets lastUsed
     *
     * @param \DateTime|null $lastUsed lastUsed
     *
     * @return self
     */
    public function setLastUsed($lastUsed)
    {
        if (is_null($lastUsed)) {
            throw new \InvalidArgumentException('non-nullable lastUsed cannot be null');
        }
        $this->container['lastUsed'] = $lastUsed;

        return $this;
    }

    /**
     * Gets lastIpv4
     *
     * @return string|null
     */
    public function getLastIpv4()
    {
        return $this->container['lastIpv4'];
    }

    /**
     * Sets lastIpv4
     *
     * @param string|null $lastIpv4 lastIpv4
     *
     * @return self
     */
    public function setLastIpv4($lastIpv4)
    {
        if (is_null($lastIpv4)) {
            throw new \InvalidArgumentException('non-nullable lastIpv4 cannot be null');
        }
        $this->container['lastIpv4'] = $lastIpv4;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int|null $userId userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets executionsLimit
     *
     * @return int|null
     */
    public function getExecutionsLimit()
    {
        return $this->container['executionsLimit'];
    }

    /**
     * Sets executionsLimit
     *
     * @param int|null $executionsLimit executionsLimit
     *
     * @return self
     */
    public function setExecutionsLimit($executionsLimit)
    {
        if (is_null($executionsLimit)) {
            throw new \InvalidArgumentException('non-nullable executionsLimit cannot be null');
        }
        $this->container['executionsLimit'] = $executionsLimit;

        return $this;
    }

    /**
     * Gets allowedActions
     *
     * @return string[]|null
     */
    public function getAllowedActions()
    {
        return $this->container['allowedActions'];
    }

    /**
     * Sets allowedActions
     *
     * @param string[]|null $allowedActions allowedActions
     *
     * @return self
     */
    public function setAllowedActions($allowedActions)
    {
        if (is_null($allowedActions)) {
            throw new \InvalidArgumentException('non-nullable allowedActions cannot be null');
        }
        $this->container['allowedActions'] = $allowedActions;

        return $this;
    }

    /**
     * Gets activeDateRange
     *
     * @return \Supla\ApiClient\Model\DirectLinkActiveDateRange|null
     */
    public function getActiveDateRange()
    {
        return $this->container['activeDateRange'];
    }

    /**
     * Sets activeDateRange
     *
     * @param \Supla\ApiClient\Model\DirectLinkActiveDateRange|null $activeDateRange activeDateRange
     *
     * @return self
     */
    public function setActiveDateRange($activeDateRange)
    {
        if (is_null($activeDateRange)) {
            throw new \InvalidArgumentException('non-nullable activeDateRange cannot be null');
        }
        $this->container['activeDateRange'] = $activeDateRange;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return \Supla\ApiClient\Model\ActionableSubject|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param \Supla\ApiClient\Model\ActionableSubject|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


