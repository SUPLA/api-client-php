<?php
/**
 * UserLimits
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 22.07
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * UserLimits Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UserLimits implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User_limits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'clientApp' => 'int',
        'channelGroup' => 'int',
        'channelPerGroup' => 'int',
        'directLink' => 'int',
        'scene' => 'int',
        'schedule' => 'int',
        'actionsPerSchedule' => 'int',
        'accessId' => 'int',
        'ioDevice' => 'int',
        'location' => 'int',
        'oauthClient' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'clientApp' => null,
        'channelGroup' => null,
        'channelPerGroup' => null,
        'directLink' => null,
        'scene' => null,
        'schedule' => null,
        'actionsPerSchedule' => null,
        'accessId' => null,
        'ioDevice' => null,
        'location' => null,
        'oauthClient' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clientApp' => 'clientApp',
        'channelGroup' => 'channelGroup',
        'channelPerGroup' => 'channelPerGroup',
        'directLink' => 'directLink',
        'scene' => 'scene',
        'schedule' => 'schedule',
        'actionsPerSchedule' => 'actionsPerSchedule',
        'accessId' => 'accessId',
        'ioDevice' => 'ioDevice',
        'location' => 'location',
        'oauthClient' => 'oauthClient'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clientApp' => 'setClientApp',
        'channelGroup' => 'setChannelGroup',
        'channelPerGroup' => 'setChannelPerGroup',
        'directLink' => 'setDirectLink',
        'scene' => 'setScene',
        'schedule' => 'setSchedule',
        'actionsPerSchedule' => 'setActionsPerSchedule',
        'accessId' => 'setAccessId',
        'ioDevice' => 'setIoDevice',
        'location' => 'setLocation',
        'oauthClient' => 'setOauthClient'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clientApp' => 'getClientApp',
        'channelGroup' => 'getChannelGroup',
        'channelPerGroup' => 'getChannelPerGroup',
        'directLink' => 'getDirectLink',
        'scene' => 'getScene',
        'schedule' => 'getSchedule',
        'actionsPerSchedule' => 'getActionsPerSchedule',
        'accessId' => 'getAccessId',
        'ioDevice' => 'getIoDevice',
        'location' => 'getLocation',
        'oauthClient' => 'getOauthClient'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientApp'] = $data['clientApp'] ?? null;
        $this->container['channelGroup'] = $data['channelGroup'] ?? null;
        $this->container['channelPerGroup'] = $data['channelPerGroup'] ?? null;
        $this->container['directLink'] = $data['directLink'] ?? null;
        $this->container['scene'] = $data['scene'] ?? null;
        $this->container['schedule'] = $data['schedule'] ?? null;
        $this->container['actionsPerSchedule'] = $data['actionsPerSchedule'] ?? null;
        $this->container['accessId'] = $data['accessId'] ?? null;
        $this->container['ioDevice'] = $data['ioDevice'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['oauthClient'] = $data['oauthClient'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clientApp
     *
     * @return int|null
     */
    public function getClientApp()
    {
        return $this->container['clientApp'];
    }

    /**
     * Sets clientApp
     *
     * @param int|null $clientApp clientApp
     *
     * @return self
     */
    public function setClientApp($clientApp)
    {
        $this->container['clientApp'] = $clientApp;

        return $this;
    }

    /**
     * Gets channelGroup
     *
     * @return int|null
     */
    public function getChannelGroup()
    {
        return $this->container['channelGroup'];
    }

    /**
     * Sets channelGroup
     *
     * @param int|null $channelGroup channelGroup
     *
     * @return self
     */
    public function setChannelGroup($channelGroup)
    {
        $this->container['channelGroup'] = $channelGroup;

        return $this;
    }

    /**
     * Gets channelPerGroup
     *
     * @return int|null
     */
    public function getChannelPerGroup()
    {
        return $this->container['channelPerGroup'];
    }

    /**
     * Sets channelPerGroup
     *
     * @param int|null $channelPerGroup channelPerGroup
     *
     * @return self
     */
    public function setChannelPerGroup($channelPerGroup)
    {
        $this->container['channelPerGroup'] = $channelPerGroup;

        return $this;
    }

    /**
     * Gets directLink
     *
     * @return int|null
     */
    public function getDirectLink()
    {
        return $this->container['directLink'];
    }

    /**
     * Sets directLink
     *
     * @param int|null $directLink directLink
     *
     * @return self
     */
    public function setDirectLink($directLink)
    {
        $this->container['directLink'] = $directLink;

        return $this;
    }

    /**
     * Gets scene
     *
     * @return int|null
     */
    public function getScene()
    {
        return $this->container['scene'];
    }

    /**
     * Sets scene
     *
     * @param int|null $scene scene
     *
     * @return self
     */
    public function setScene($scene)
    {
        $this->container['scene'] = $scene;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return int|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param int|null $schedule schedule
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets actionsPerSchedule
     *
     * @return int|null
     */
    public function getActionsPerSchedule()
    {
        return $this->container['actionsPerSchedule'];
    }

    /**
     * Sets actionsPerSchedule
     *
     * @param int|null $actionsPerSchedule actionsPerSchedule
     *
     * @return self
     */
    public function setActionsPerSchedule($actionsPerSchedule)
    {
        $this->container['actionsPerSchedule'] = $actionsPerSchedule;

        return $this;
    }

    /**
     * Gets accessId
     *
     * @return int|null
     */
    public function getAccessId()
    {
        return $this->container['accessId'];
    }

    /**
     * Sets accessId
     *
     * @param int|null $accessId accessId
     *
     * @return self
     */
    public function setAccessId($accessId)
    {
        $this->container['accessId'] = $accessId;

        return $this;
    }

    /**
     * Gets ioDevice
     *
     * @return int|null
     */
    public function getIoDevice()
    {
        return $this->container['ioDevice'];
    }

    /**
     * Sets ioDevice
     *
     * @param int|null $ioDevice ioDevice
     *
     * @return self
     */
    public function setIoDevice($ioDevice)
    {
        $this->container['ioDevice'] = $ioDevice;

        return $this;
    }

    /**
     * Gets location
     *
     * @return int|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param int|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets oauthClient
     *
     * @return int|null
     */
    public function getOauthClient()
    {
        return $this->container['oauthClient'];
    }

    /**
     * Sets oauthClient
     *
     * @param int|null $oauthClient oauthClient
     *
     * @return self
     */
    public function setOauthClient($oauthClient)
    {
        $this->container['oauthClient'] = $oauthClient;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


