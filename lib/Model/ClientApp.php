<?php
/**
 * ClientApp
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClientApp Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ClientApp implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientApp';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'caption' => 'string',
        'enabled' => 'bool',
        'reg_ipv4' => 'int',
        'reg_date' => '\DateTime',
        'last_access_ipv4' => 'int',
        'last_access_date' => '\DateTime',
        'software_version' => 'string',
        'protocol_version' => 'int',
        'access_id_id' => 'int',
        'connected' => 'bool',
        'access_id' => '\Swagger\Client\Model\AccessID'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'caption' => null,
        'enabled' => null,
        'reg_ipv4' => null,
        'reg_date' => 'date-time',
        'last_access_ipv4' => null,
        'last_access_date' => 'date-time',
        'software_version' => null,
        'protocol_version' => null,
        'access_id_id' => null,
        'connected' => null,
        'access_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'caption' => 'caption',
        'enabled' => 'enabled',
        'reg_ipv4' => 'regIpv4',
        'reg_date' => 'regDate',
        'last_access_ipv4' => 'lastAccessIpv4',
        'last_access_date' => 'lastAccessDate',
        'software_version' => 'softwareVersion',
        'protocol_version' => 'protocolVersion',
        'access_id_id' => 'accessIdId',
        'connected' => 'connected',
        'access_id' => 'accessId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'caption' => 'setCaption',
        'enabled' => 'setEnabled',
        'reg_ipv4' => 'setRegIpv4',
        'reg_date' => 'setRegDate',
        'last_access_ipv4' => 'setLastAccessIpv4',
        'last_access_date' => 'setLastAccessDate',
        'software_version' => 'setSoftwareVersion',
        'protocol_version' => 'setProtocolVersion',
        'access_id_id' => 'setAccessIdId',
        'connected' => 'setConnected',
        'access_id' => 'setAccessId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'caption' => 'getCaption',
        'enabled' => 'getEnabled',
        'reg_ipv4' => 'getRegIpv4',
        'reg_date' => 'getRegDate',
        'last_access_ipv4' => 'getLastAccessIpv4',
        'last_access_date' => 'getLastAccessDate',
        'software_version' => 'getSoftwareVersion',
        'protocol_version' => 'getProtocolVersion',
        'access_id_id' => 'getAccessIdId',
        'connected' => 'getConnected',
        'access_id' => 'getAccessId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['caption'] = isset($data['caption']) ? $data['caption'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['reg_ipv4'] = isset($data['reg_ipv4']) ? $data['reg_ipv4'] : null;
        $this->container['reg_date'] = isset($data['reg_date']) ? $data['reg_date'] : null;
        $this->container['last_access_ipv4'] = isset($data['last_access_ipv4']) ? $data['last_access_ipv4'] : null;
        $this->container['last_access_date'] = isset($data['last_access_date']) ? $data['last_access_date'] : null;
        $this->container['software_version'] = isset($data['software_version']) ? $data['software_version'] : null;
        $this->container['protocol_version'] = isset($data['protocol_version']) ? $data['protocol_version'] : null;
        $this->container['access_id_id'] = isset($data['access_id_id']) ? $data['access_id_id'] : null;
        $this->container['connected'] = isset($data['connected']) ? $data['connected'] : null;
        $this->container['access_id'] = isset($data['access_id']) ? $data['access_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Client application identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string $caption caption
     *
     * @return $this
     */
    public function setCaption($caption)
    {
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets reg_ipv4
     *
     * @return int
     */
    public function getRegIpv4()
    {
        return $this->container['reg_ipv4'];
    }

    /**
     * Sets reg_ipv4
     *
     * @param int $reg_ipv4 reg_ipv4
     *
     * @return $this
     */
    public function setRegIpv4($reg_ipv4)
    {
        $this->container['reg_ipv4'] = $reg_ipv4;

        return $this;
    }

    /**
     * Gets reg_date
     *
     * @return \DateTime
     */
    public function getRegDate()
    {
        return $this->container['reg_date'];
    }

    /**
     * Sets reg_date
     *
     * @param \DateTime $reg_date reg_date
     *
     * @return $this
     */
    public function setRegDate($reg_date)
    {
        $this->container['reg_date'] = $reg_date;

        return $this;
    }

    /**
     * Gets last_access_ipv4
     *
     * @return int
     */
    public function getLastAccessIpv4()
    {
        return $this->container['last_access_ipv4'];
    }

    /**
     * Sets last_access_ipv4
     *
     * @param int $last_access_ipv4 last_access_ipv4
     *
     * @return $this
     */
    public function setLastAccessIpv4($last_access_ipv4)
    {
        $this->container['last_access_ipv4'] = $last_access_ipv4;

        return $this;
    }

    /**
     * Gets last_access_date
     *
     * @return \DateTime
     */
    public function getLastAccessDate()
    {
        return $this->container['last_access_date'];
    }

    /**
     * Sets last_access_date
     *
     * @param \DateTime $last_access_date last_access_date
     *
     * @return $this
     */
    public function setLastAccessDate($last_access_date)
    {
        $this->container['last_access_date'] = $last_access_date;

        return $this;
    }

    /**
     * Gets software_version
     *
     * @return string
     */
    public function getSoftwareVersion()
    {
        return $this->container['software_version'];
    }

    /**
     * Sets software_version
     *
     * @param string $software_version software_version
     *
     * @return $this
     */
    public function setSoftwareVersion($software_version)
    {
        $this->container['software_version'] = $software_version;

        return $this;
    }

    /**
     * Gets protocol_version
     *
     * @return int
     */
    public function getProtocolVersion()
    {
        return $this->container['protocol_version'];
    }

    /**
     * Sets protocol_version
     *
     * @param int $protocol_version protocol_version
     *
     * @return $this
     */
    public function setProtocolVersion($protocol_version)
    {
        $this->container['protocol_version'] = $protocol_version;

        return $this;
    }

    /**
     * Gets access_id_id
     *
     * @return int
     */
    public function getAccessIdId()
    {
        return $this->container['access_id_id'];
    }

    /**
     * Sets access_id_id
     *
     * @param int $access_id_id access_id_id
     *
     * @return $this
     */
    public function setAccessIdId($access_id_id)
    {
        $this->container['access_id_id'] = $access_id_id;

        return $this;
    }

    /**
     * Gets connected
     *
     * @return bool
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param bool $connected connected
     *
     * @return $this
     */
    public function setConnected($connected)
    {
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets access_id
     *
     * @return \Swagger\Client\Model\AccessID
     */
    public function getAccessId()
    {
        return $this->container['access_id'];
    }

    /**
     * Sets access_id
     *
     * @param \Swagger\Client\Model\AccessID $access_id access_id
     *
     * @return $this
     */
    public function setAccessId($access_id)
    {
        $this->container['access_id'] = $access_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

