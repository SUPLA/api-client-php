<?php
/**
 * ChannelFunction
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 22.07
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelFunction Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ChannelFunction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelFunction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => '\Supla\ApiClient\Model\ChannelFunctionEnumNames',
        'caption' => 'string',
        'maxAlternativeIconIndex' => 'int',
        'possibleVisualStates' => 'string[]',
        'output' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'caption' => null,
        'maxAlternativeIconIndex' => null,
        'possibleVisualStates' => null,
        'output' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'caption' => 'caption',
        'maxAlternativeIconIndex' => 'maxAlternativeIconIndex',
        'possibleVisualStates' => 'possibleVisualStates',
        'output' => 'output'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'caption' => 'setCaption',
        'maxAlternativeIconIndex' => 'setMaxAlternativeIconIndex',
        'possibleVisualStates' => 'setPossibleVisualStates',
        'output' => 'setOutput'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'caption' => 'getCaption',
        'maxAlternativeIconIndex' => 'getMaxAlternativeIconIndex',
        'possibleVisualStates' => 'getPossibleVisualStates',
        'output' => 'getOutput'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ID_MINUS_1 = -1;
    const ID_0 = 0;
    const ID_2000 = 2000;
    const ID_10 = 10;
    const ID_20 = 20;
    const ID_30 = 30;
    const ID_40 = 40;
    const ID_42 = 42;
    const ID_45 = 45;
    const ID_50 = 50;
    const ID_60 = 60;
    const ID_70 = 70;
    const ID_80 = 80;
    const ID_90 = 90;
    const ID_100 = 100;
    const ID_110 = 110;
    const ID_115 = 115;
    const ID_120 = 120;
    const ID_125 = 125;
    const ID_130 = 130;
    const ID_140 = 140;
    const ID_180 = 180;
    const ID_190 = 190;
    const ID_200 = 200;
    const ID_210 = 210;
    const ID_220 = 220;
    const ID_230 = 230;
    const ID_240 = 240;
    const ID_250 = 250;
    const ID_260 = 260;
    const ID_270 = 270;
    const ID_280 = 280;
    const ID_290 = 290;
    const ID_300 = 300;
    const ID_310 = 310;
    const ID_315 = 315;
    const ID_320 = 320;
    const ID_330 = 330;
    const ID_340 = 340;
    const ID_400 = 400;
    const ID_410 = 410;
    const ID_500 = 500;
    const ID_510 = 510;
    const ID_520 = 520;
    const ID_700 = 700;
    const ID_800 = 800;
    const ID_810 = 810;
    const POSSIBLE_VISUAL_STATES__DEFAULT = 'default';
    const POSSIBLE_VISUAL_STATES_OPENED = 'opened';
    const POSSIBLE_VISUAL_STATES_CLOSED = 'closed';
    const POSSIBLE_VISUAL_STATES_PARTIALLY_CLOSED = 'partially_closed';
    const POSSIBLE_VISUAL_STATES__EMPTY = 'empty';
    const POSSIBLE_VISUAL_STATES_FULL = 'full';
    const POSSIBLE_VISUAL_STATES_REVEALED = 'revealed';
    const POSSIBLE_VISUAL_STATES_SHUT = 'shut';
    const POSSIBLE_VISUAL_STATES_OFF = 'off';
    const POSSIBLE_VISUAL_STATES_ON = 'on';
    const POSSIBLE_VISUAL_STATES_HUMIDITY = 'humidity';
    const POSSIBLE_VISUAL_STATES_TEMPERATURE = 'temperature';
    const POSSIBLE_VISUAL_STATES_RGB_OFF_DIM_OFF = 'rgb_off_dim_off';
    const POSSIBLE_VISUAL_STATES_RGB_OFF_DIM_ON = 'rgb_off_dim_on';
    const POSSIBLE_VISUAL_STATES_RGB_ON_DIM_OFF = 'rgb_on_dim_off';
    const POSSIBLE_VISUAL_STATES_RGB_ON_DIM_ON = 'rgb_on_dim_on';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdAllowableValues()
    {
        return [
            self::ID_MINUS_1,
            self::ID_0,
            self::ID_2000,
            self::ID_10,
            self::ID_20,
            self::ID_30,
            self::ID_40,
            self::ID_42,
            self::ID_45,
            self::ID_50,
            self::ID_60,
            self::ID_70,
            self::ID_80,
            self::ID_90,
            self::ID_100,
            self::ID_110,
            self::ID_115,
            self::ID_120,
            self::ID_125,
            self::ID_130,
            self::ID_140,
            self::ID_180,
            self::ID_190,
            self::ID_200,
            self::ID_210,
            self::ID_220,
            self::ID_230,
            self::ID_240,
            self::ID_250,
            self::ID_260,
            self::ID_270,
            self::ID_280,
            self::ID_290,
            self::ID_300,
            self::ID_310,
            self::ID_315,
            self::ID_320,
            self::ID_330,
            self::ID_340,
            self::ID_400,
            self::ID_410,
            self::ID_500,
            self::ID_510,
            self::ID_520,
            self::ID_700,
            self::ID_800,
            self::ID_810,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPossibleVisualStatesAllowableValues()
    {
        return [
            self::POSSIBLE_VISUAL_STATES__DEFAULT,
            self::POSSIBLE_VISUAL_STATES_OPENED,
            self::POSSIBLE_VISUAL_STATES_CLOSED,
            self::POSSIBLE_VISUAL_STATES_PARTIALLY_CLOSED,
            self::POSSIBLE_VISUAL_STATES__EMPTY,
            self::POSSIBLE_VISUAL_STATES_FULL,
            self::POSSIBLE_VISUAL_STATES_REVEALED,
            self::POSSIBLE_VISUAL_STATES_SHUT,
            self::POSSIBLE_VISUAL_STATES_OFF,
            self::POSSIBLE_VISUAL_STATES_ON,
            self::POSSIBLE_VISUAL_STATES_HUMIDITY,
            self::POSSIBLE_VISUAL_STATES_TEMPERATURE,
            self::POSSIBLE_VISUAL_STATES_RGB_OFF_DIM_OFF,
            self::POSSIBLE_VISUAL_STATES_RGB_OFF_DIM_ON,
            self::POSSIBLE_VISUAL_STATES_RGB_ON_DIM_OFF,
            self::POSSIBLE_VISUAL_STATES_RGB_ON_DIM_ON,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['caption'] = $data['caption'] ?? null;
        $this->container['maxAlternativeIconIndex'] = $data['maxAlternativeIconIndex'] ?? null;
        $this->container['possibleVisualStates'] = $data['possibleVisualStates'] ?? null;
        $this->container['output'] = $data['output'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIdAllowableValues();
        if (!is_null($this->container['id']) && !in_array($this->container['id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'id', must be one of '%s'",
                $this->container['id'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $allowedValues = $this->getIdAllowableValues();
        if (!is_null($id) && !in_array($id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'id', must be one of '%s'",
                    $id,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Supla\ApiClient\Model\ChannelFunctionEnumNames|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Supla\ApiClient\Model\ChannelFunctionEnumNames|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption caption
     *
     * @return self
     */
    public function setCaption($caption)
    {
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets maxAlternativeIconIndex
     *
     * @return int|null
     */
    public function getMaxAlternativeIconIndex()
    {
        return $this->container['maxAlternativeIconIndex'];
    }

    /**
     * Sets maxAlternativeIconIndex
     *
     * @param int|null $maxAlternativeIconIndex maxAlternativeIconIndex
     *
     * @return self
     */
    public function setMaxAlternativeIconIndex($maxAlternativeIconIndex)
    {
        $this->container['maxAlternativeIconIndex'] = $maxAlternativeIconIndex;

        return $this;
    }

    /**
     * Gets possibleVisualStates
     *
     * @return string[]|null
     */
    public function getPossibleVisualStates()
    {
        return $this->container['possibleVisualStates'];
    }

    /**
     * Sets possibleVisualStates
     *
     * @param string[]|null $possibleVisualStates Possible visual states of channel with this function. Ordered.
     *
     * @return self
     */
    public function setPossibleVisualStates($possibleVisualStates)
    {
        $allowedValues = $this->getPossibleVisualStatesAllowableValues();
        if (!is_null($possibleVisualStates) && array_diff($possibleVisualStates, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'possibleVisualStates', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['possibleVisualStates'] = $possibleVisualStates;

        return $this;
    }

    /**
     * Gets output
     *
     * @return bool|null
     */
    public function getOutput()
    {
        return $this->container['output'];
    }

    /**
     * Sets output
     *
     * @param bool|null $output Whether the function is output type (i.e. can execute action) or input (i.e. provides data)
     *
     * @return self
     */
    public function setOutput($output)
    {
        $this->container['output'] = $output;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


