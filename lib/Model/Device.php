<?php
/**
 * Device
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * Device Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Device implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Device';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'comment' => 'string',
        'gUIDString' => 'string',
        'enabled' => 'bool',
        'lastConnected' => '\DateTime',
        'lastIpv4' => 'string',
        'regDate' => '\DateTime',
        'regIpv4' => 'string',
        'softwareVersion' => 'string',
        'productId' => 'int',
        'manufacturer' => '\Supla\ApiClient\Model\DeviceManufacturer',
        'locationId' => 'int',
        'location' => '\Supla\ApiClient\Model\Location',
        'originalLocationId' => 'int',
        'originalLocation' => '\Supla\ApiClient\Model\Location',
        'channels' => '\Supla\ApiClient\Model\Channel[]',
        'connected' => 'bool',
        'relationsCount' => '\Supla\ApiClient\Model\DeviceRelationsCount',
        'enterConfigurationModeAvailable' => 'bool',
        'flags' => 'object',
        'isSleepModeEnabled' => 'bool',
        'config' => '\Supla\ApiClient\Model\DeviceConfig',
        'pairingResult' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'comment' => null,
        'gUIDString' => null,
        'enabled' => null,
        'lastConnected' => 'date-time',
        'lastIpv4' => 'ipv4',
        'regDate' => 'date-time',
        'regIpv4' => 'ipv4',
        'softwareVersion' => null,
        'productId' => null,
        'manufacturer' => null,
        'locationId' => null,
        'location' => null,
        'originalLocationId' => null,
        'originalLocation' => null,
        'channels' => null,
        'connected' => null,
        'relationsCount' => null,
        'enterConfigurationModeAvailable' => null,
        'flags' => null,
        'isSleepModeEnabled' => null,
        'config' => null,
        'pairingResult' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'comment' => false,
        'gUIDString' => false,
        'enabled' => false,
        'lastConnected' => false,
        'lastIpv4' => false,
        'regDate' => false,
        'regIpv4' => false,
        'softwareVersion' => false,
        'productId' => false,
        'manufacturer' => false,
        'locationId' => false,
        'location' => false,
        'originalLocationId' => false,
        'originalLocation' => false,
        'channels' => false,
        'connected' => false,
        'relationsCount' => false,
        'enterConfigurationModeAvailable' => false,
        'flags' => false,
        'isSleepModeEnabled' => false,
        'config' => false,
        'pairingResult' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'comment' => 'comment',
        'gUIDString' => 'gUIDString',
        'enabled' => 'enabled',
        'lastConnected' => 'lastConnected',
        'lastIpv4' => 'lastIpv4',
        'regDate' => 'regDate',
        'regIpv4' => 'regIpv4',
        'softwareVersion' => 'softwareVersion',
        'productId' => 'productId',
        'manufacturer' => 'manufacturer',
        'locationId' => 'locationId',
        'location' => 'location',
        'originalLocationId' => 'originalLocationId',
        'originalLocation' => 'originalLocation',
        'channels' => 'channels',
        'connected' => 'connected',
        'relationsCount' => 'relationsCount',
        'enterConfigurationModeAvailable' => 'enterConfigurationModeAvailable',
        'flags' => 'flags',
        'isSleepModeEnabled' => 'isSleepModeEnabled',
        'config' => 'config',
        'pairingResult' => 'pairingResult'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'comment' => 'setComment',
        'gUIDString' => 'setGUIDString',
        'enabled' => 'setEnabled',
        'lastConnected' => 'setLastConnected',
        'lastIpv4' => 'setLastIpv4',
        'regDate' => 'setRegDate',
        'regIpv4' => 'setRegIpv4',
        'softwareVersion' => 'setSoftwareVersion',
        'productId' => 'setProductId',
        'manufacturer' => 'setManufacturer',
        'locationId' => 'setLocationId',
        'location' => 'setLocation',
        'originalLocationId' => 'setOriginalLocationId',
        'originalLocation' => 'setOriginalLocation',
        'channels' => 'setChannels',
        'connected' => 'setConnected',
        'relationsCount' => 'setRelationsCount',
        'enterConfigurationModeAvailable' => 'setEnterConfigurationModeAvailable',
        'flags' => 'setFlags',
        'isSleepModeEnabled' => 'setIsSleepModeEnabled',
        'config' => 'setConfig',
        'pairingResult' => 'setPairingResult'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'comment' => 'getComment',
        'gUIDString' => 'getGUIDString',
        'enabled' => 'getEnabled',
        'lastConnected' => 'getLastConnected',
        'lastIpv4' => 'getLastIpv4',
        'regDate' => 'getRegDate',
        'regIpv4' => 'getRegIpv4',
        'softwareVersion' => 'getSoftwareVersion',
        'productId' => 'getProductId',
        'manufacturer' => 'getManufacturer',
        'locationId' => 'getLocationId',
        'location' => 'getLocation',
        'originalLocationId' => 'getOriginalLocationId',
        'originalLocation' => 'getOriginalLocation',
        'channels' => 'getChannels',
        'connected' => 'getConnected',
        'relationsCount' => 'getRelationsCount',
        'enterConfigurationModeAvailable' => 'getEnterConfigurationModeAvailable',
        'flags' => 'getFlags',
        'isSleepModeEnabled' => 'getIsSleepModeEnabled',
        'config' => 'getConfig',
        'pairingResult' => 'getPairingResult'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('gUIDString', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('lastConnected', $data ?? [], null);
        $this->setIfExists('lastIpv4', $data ?? [], null);
        $this->setIfExists('regDate', $data ?? [], null);
        $this->setIfExists('regIpv4', $data ?? [], null);
        $this->setIfExists('softwareVersion', $data ?? [], null);
        $this->setIfExists('productId', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('locationId', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('originalLocationId', $data ?? [], null);
        $this->setIfExists('originalLocation', $data ?? [], null);
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('connected', $data ?? [], null);
        $this->setIfExists('relationsCount', $data ?? [], null);
        $this->setIfExists('enterConfigurationModeAvailable', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('isSleepModeEnabled', $data ?? [], null);
        $this->setIfExists('config', $data ?? [], null);
        $this->setIfExists('pairingResult', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Device name set in the firmware.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment Device caption / comment given by the user.
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets gUIDString
     *
     * @return string|null
     */
    public function getGUIDString()
    {
        return $this->container['gUIDString'];
    }

    /**
     * Sets gUIDString
     *
     * @param string|null $gUIDString Unique device identifier (GUID).
     *
     * @return self
     */
    public function setGUIDString($gUIDString)
    {
        if (is_null($gUIDString)) {
            throw new \InvalidArgumentException('non-nullable gUIDString cannot be null');
        }
        $this->container['gUIDString'] = $gUIDString;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets lastConnected
     *
     * @return \DateTime|null
     */
    public function getLastConnected()
    {
        return $this->container['lastConnected'];
    }

    /**
     * Sets lastConnected
     *
     * @param \DateTime|null $lastConnected lastConnected
     *
     * @return self
     */
    public function setLastConnected($lastConnected)
    {
        if (is_null($lastConnected)) {
            throw new \InvalidArgumentException('non-nullable lastConnected cannot be null');
        }
        $this->container['lastConnected'] = $lastConnected;

        return $this;
    }

    /**
     * Gets lastIpv4
     *
     * @return string|null
     */
    public function getLastIpv4()
    {
        return $this->container['lastIpv4'];
    }

    /**
     * Sets lastIpv4
     *
     * @param string|null $lastIpv4 lastIpv4
     *
     * @return self
     */
    public function setLastIpv4($lastIpv4)
    {
        if (is_null($lastIpv4)) {
            throw new \InvalidArgumentException('non-nullable lastIpv4 cannot be null');
        }
        $this->container['lastIpv4'] = $lastIpv4;

        return $this;
    }

    /**
     * Gets regDate
     *
     * @return \DateTime|null
     */
    public function getRegDate()
    {
        return $this->container['regDate'];
    }

    /**
     * Sets regDate
     *
     * @param \DateTime|null $regDate regDate
     *
     * @return self
     */
    public function setRegDate($regDate)
    {
        if (is_null($regDate)) {
            throw new \InvalidArgumentException('non-nullable regDate cannot be null');
        }
        $this->container['regDate'] = $regDate;

        return $this;
    }

    /**
     * Gets regIpv4
     *
     * @return string|null
     */
    public function getRegIpv4()
    {
        return $this->container['regIpv4'];
    }

    /**
     * Sets regIpv4
     *
     * @param string|null $regIpv4 regIpv4
     *
     * @return self
     */
    public function setRegIpv4($regIpv4)
    {
        if (is_null($regIpv4)) {
            throw new \InvalidArgumentException('non-nullable regIpv4 cannot be null');
        }
        $this->container['regIpv4'] = $regIpv4;

        return $this;
    }

    /**
     * Gets softwareVersion
     *
     * @return string|null
     */
    public function getSoftwareVersion()
    {
        return $this->container['softwareVersion'];
    }

    /**
     * Sets softwareVersion
     *
     * @param string|null $softwareVersion softwareVersion
     *
     * @return self
     */
    public function setSoftwareVersion($softwareVersion)
    {
        if (is_null($softwareVersion)) {
            throw new \InvalidArgumentException('non-nullable softwareVersion cannot be null');
        }
        $this->container['softwareVersion'] = $softwareVersion;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param int|null $productId productId
     *
     * @return self
     */
    public function setProductId($productId)
    {
        if (is_null($productId)) {
            throw new \InvalidArgumentException('non-nullable productId cannot be null');
        }
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return \Supla\ApiClient\Model\DeviceManufacturer|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param \Supla\ApiClient\Model\DeviceManufacturer|null $manufacturer manufacturer
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        if (is_null($manufacturer)) {
            throw new \InvalidArgumentException('non-nullable manufacturer cannot be null');
        }
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets locationId
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['locationId'];
    }

    /**
     * Sets locationId
     *
     * @param int|null $locationId locationId
     *
     * @return self
     */
    public function setLocationId($locationId)
    {
        if (is_null($locationId)) {
            throw new \InvalidArgumentException('non-nullable locationId cannot be null');
        }
        $this->container['locationId'] = $locationId;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Supla\ApiClient\Model\Location|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Supla\ApiClient\Model\Location|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets originalLocationId
     *
     * @return int|null
     */
    public function getOriginalLocationId()
    {
        return $this->container['originalLocationId'];
    }

    /**
     * Sets originalLocationId
     *
     * @param int|null $originalLocationId originalLocationId
     *
     * @return self
     */
    public function setOriginalLocationId($originalLocationId)
    {
        if (is_null($originalLocationId)) {
            throw new \InvalidArgumentException('non-nullable originalLocationId cannot be null');
        }
        $this->container['originalLocationId'] = $originalLocationId;

        return $this;
    }

    /**
     * Gets originalLocation
     *
     * @return \Supla\ApiClient\Model\Location|null
     */
    public function getOriginalLocation()
    {
        return $this->container['originalLocation'];
    }

    /**
     * Sets originalLocation
     *
     * @param \Supla\ApiClient\Model\Location|null $originalLocation originalLocation
     *
     * @return self
     */
    public function setOriginalLocation($originalLocation)
    {
        if (is_null($originalLocation)) {
            throw new \InvalidArgumentException('non-nullable originalLocation cannot be null');
        }
        $this->container['originalLocation'] = $originalLocation;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \Supla\ApiClient\Model\Channel[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \Supla\ApiClient\Model\Channel[]|null $channels Channels that belongs to this device, if requested by the `include` param
     *
     * @return self
     */
    public function setChannels($channels)
    {
        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }
        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets connected
     *
     * @return bool|null
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param bool|null $connected Whether the device is now connected to the SUPLA Server.
     *
     * @return self
     */
    public function setConnected($connected)
    {
        if (is_null($connected)) {
            throw new \InvalidArgumentException('non-nullable connected cannot be null');
        }
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets relationsCount
     *
     * @return \Supla\ApiClient\Model\DeviceRelationsCount|null
     */
    public function getRelationsCount()
    {
        return $this->container['relationsCount'];
    }

    /**
     * Sets relationsCount
     *
     * @param \Supla\ApiClient\Model\DeviceRelationsCount|null $relationsCount relationsCount
     *
     * @return self
     */
    public function setRelationsCount($relationsCount)
    {
        if (is_null($relationsCount)) {
            throw new \InvalidArgumentException('non-nullable relationsCount cannot be null');
        }
        $this->container['relationsCount'] = $relationsCount;

        return $this;
    }

    /**
     * Gets enterConfigurationModeAvailable
     *
     * @return bool|null
     */
    public function getEnterConfigurationModeAvailable()
    {
        return $this->container['enterConfigurationModeAvailable'];
    }

    /**
     * Sets enterConfigurationModeAvailable
     *
     * @param bool|null $enterConfigurationModeAvailable enterConfigurationModeAvailable
     *
     * @return self
     */
    public function setEnterConfigurationModeAvailable($enterConfigurationModeAvailable)
    {
        if (is_null($enterConfigurationModeAvailable)) {
            throw new \InvalidArgumentException('non-nullable enterConfigurationModeAvailable cannot be null');
        }
        $this->container['enterConfigurationModeAvailable'] = $enterConfigurationModeAvailable;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return object|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param object|null $flags flags
     *
     * @return self
     */
    public function setFlags($flags)
    {
        if (is_null($flags)) {
            throw new \InvalidArgumentException('non-nullable flags cannot be null');
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets isSleepModeEnabled
     *
     * @return bool|null
     */
    public function getIsSleepModeEnabled()
    {
        return $this->container['isSleepModeEnabled'];
    }

    /**
     * Sets isSleepModeEnabled
     *
     * @param bool|null $isSleepModeEnabled isSleepModeEnabled
     *
     * @return self
     */
    public function setIsSleepModeEnabled($isSleepModeEnabled)
    {
        if (is_null($isSleepModeEnabled)) {
            throw new \InvalidArgumentException('non-nullable isSleepModeEnabled cannot be null');
        }
        $this->container['isSleepModeEnabled'] = $isSleepModeEnabled;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \Supla\ApiClient\Model\DeviceConfig|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \Supla\ApiClient\Model\DeviceConfig|null $config config
     *
     * @return self
     */
    public function setConfig($config)
    {
        if (is_null($config)) {
            throw new \InvalidArgumentException('non-nullable config cannot be null');
        }
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets pairingResult
     *
     * @return object|null
     */
    public function getPairingResult()
    {
        return $this->container['pairingResult'];
    }

    /**
     * Sets pairingResult
     *
     * @param object|null $pairingResult pairingResult
     *
     * @return self
     */
    public function setPairingResult($pairingResult)
    {
        if (is_null($pairingResult)) {
            throw new \InvalidArgumentException('non-nullable pairingResult cannot be null');
        }
        $this->container['pairingResult'] = $pairingResult;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


