<?php
/**
 * Location
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Location Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Location implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'caption' => 'string',
        'enabled' => 'bool',
        'iodevicesIds' => 'int[]',
        'channelGroupsIds' => 'int[]',
        'channelsIds' => 'int[]',
        'accessIdsIds' => 'int[]',
        'password' => 'string',
        'iodevices' => '\Swagger\Client\Model\Device[]',
        'channelGroups' => '\Swagger\Client\Model\ChannelGroup[]',
        'accessIds' => '\Swagger\Client\Model\AccessID[]',
        'channels' => '\Swagger\Client\Model\Channel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'caption' => null,
        'enabled' => null,
        'iodevicesIds' => null,
        'channelGroupsIds' => null,
        'channelsIds' => null,
        'accessIdsIds' => null,
        'password' => null,
        'iodevices' => null,
        'channelGroups' => null,
        'accessIds' => null,
        'channels' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'caption' => 'caption',
        'enabled' => 'enabled',
        'iodevicesIds' => 'iodevicesIds',
        'channelGroupsIds' => 'channelGroupsIds',
        'channelsIds' => 'channelsIds',
        'accessIdsIds' => 'accessIdsIds',
        'password' => 'password',
        'iodevices' => 'iodevices',
        'channelGroups' => 'channelGroups',
        'accessIds' => 'accessIds',
        'channels' => 'channels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'caption' => 'setCaption',
        'enabled' => 'setEnabled',
        'iodevicesIds' => 'setIodevicesIds',
        'channelGroupsIds' => 'setChannelGroupsIds',
        'channelsIds' => 'setChannelsIds',
        'accessIdsIds' => 'setAccessIdsIds',
        'password' => 'setPassword',
        'iodevices' => 'setIodevices',
        'channelGroups' => 'setChannelGroups',
        'accessIds' => 'setAccessIds',
        'channels' => 'setChannels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'caption' => 'getCaption',
        'enabled' => 'getEnabled',
        'iodevicesIds' => 'getIodevicesIds',
        'channelGroupsIds' => 'getChannelGroupsIds',
        'channelsIds' => 'getChannelsIds',
        'accessIdsIds' => 'getAccessIdsIds',
        'password' => 'getPassword',
        'iodevices' => 'getIodevices',
        'channelGroups' => 'getChannelGroups',
        'accessIds' => 'getAccessIds',
        'channels' => 'getChannels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['caption'] = isset($data['caption']) ? $data['caption'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['iodevicesIds'] = isset($data['iodevicesIds']) ? $data['iodevicesIds'] : null;
        $this->container['channelGroupsIds'] = isset($data['channelGroupsIds']) ? $data['channelGroupsIds'] : null;
        $this->container['channelsIds'] = isset($data['channelsIds']) ? $data['channelsIds'] : null;
        $this->container['accessIdsIds'] = isset($data['accessIdsIds']) ? $data['accessIdsIds'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['iodevices'] = isset($data['iodevices']) ? $data['iodevices'] : null;
        $this->container['channelGroups'] = isset($data['channelGroups']) ? $data['channelGroups'] : null;
        $this->container['accessIds'] = isset($data['accessIds']) ? $data['accessIds'] : null;
        $this->container['channels'] = isset($data['channels']) ? $data['channels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Location identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string $caption Location caption
     *
     * @return $this
     */
    public function setCaption($caption)
    {
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled `true` if the location is enabled, `false` otherwise
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets iodevicesIds
     *
     * @return int[]
     */
    public function getIodevicesIds()
    {
        return $this->container['iodevicesIds'];
    }

    /**
     * Sets iodevicesIds
     *
     * @param int[] $iodevicesIds array containing the IO Devices identifiers assigned to this location
     *
     * @return $this
     */
    public function setIodevicesIds($iodevicesIds)
    {
        $this->container['iodevicesIds'] = $iodevicesIds;

        return $this;
    }

    /**
     * Gets channelGroupsIds
     *
     * @return int[]
     */
    public function getChannelGroupsIds()
    {
        return $this->container['channelGroupsIds'];
    }

    /**
     * Sets channelGroupsIds
     *
     * @param int[] $channelGroupsIds array containing the Channel groups identifiers assigned to this location
     *
     * @return $this
     */
    public function setChannelGroupsIds($channelGroupsIds)
    {
        $this->container['channelGroupsIds'] = $channelGroupsIds;

        return $this;
    }

    /**
     * Gets channelsIds
     *
     * @return int[]
     */
    public function getChannelsIds()
    {
        return $this->container['channelsIds'];
    }

    /**
     * Sets channelsIds
     *
     * @param int[] $channelsIds array containing the Channels identifiers expicitely assigned to this location
     *
     * @return $this
     */
    public function setChannelsIds($channelsIds)
    {
        $this->container['channelsIds'] = $channelsIds;

        return $this;
    }

    /**
     * Gets accessIdsIds
     *
     * @return int[]
     */
    public function getAccessIdsIds()
    {
        return $this->container['accessIdsIds'];
    }

    /**
     * Sets accessIdsIds
     *
     * @param int[] $accessIdsIds array containing the Access Identifiers identifiers assigned to this location
     *
     * @return $this
     */
    public function setAccessIdsIds($accessIdsIds)
    {
        $this->container['accessIdsIds'] = $accessIdsIds;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Location password (plain text). Returned only if requested by the `include` parameter.
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets iodevices
     *
     * @return \Swagger\Client\Model\Device[]
     */
    public function getIodevices()
    {
        return $this->container['iodevices'];
    }

    /**
     * Sets iodevices
     *
     * @param \Swagger\Client\Model\Device[] $iodevices Returned only if requested by the `include` parameter.
     *
     * @return $this
     */
    public function setIodevices($iodevices)
    {
        $this->container['iodevices'] = $iodevices;

        return $this;
    }

    /**
     * Gets channelGroups
     *
     * @return \Swagger\Client\Model\ChannelGroup[]
     */
    public function getChannelGroups()
    {
        return $this->container['channelGroups'];
    }

    /**
     * Sets channelGroups
     *
     * @param \Swagger\Client\Model\ChannelGroup[] $channelGroups Returned only if requested by the `include` parameter.
     *
     * @return $this
     */
    public function setChannelGroups($channelGroups)
    {
        $this->container['channelGroups'] = $channelGroups;

        return $this;
    }

    /**
     * Gets accessIds
     *
     * @return \Swagger\Client\Model\AccessID[]
     */
    public function getAccessIds()
    {
        return $this->container['accessIds'];
    }

    /**
     * Sets accessIds
     *
     * @param \Swagger\Client\Model\AccessID[] $accessIds Returned only if requested by the `include` parameter.
     *
     * @return $this
     */
    public function setAccessIds($accessIds)
    {
        $this->container['accessIds'] = $accessIds;

        return $this;
    }

    /**
     * Gets channels
     *
     * @return \Swagger\Client\Model\Channel[]
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param \Swagger\Client\Model\Channel[] $channels Returned only if requested by the `include` parameter.
     *
     * @return $this
     */
    public function setChannels($channels)
    {
        $this->container['channels'] = $channels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


