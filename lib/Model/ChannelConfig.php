<?php
/**
 * ChannelConfig
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelConfig Class Doc Comment
 *
 * @category Class
 * @description Configuration of the channel.
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ChannelConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actionTriggerCapabilities' => 'string[]',
        'disablesLocalOperation' => 'bool',
        'relatedChannelId' => 'int',
        'hideInChannelsList' => 'int',
        'actions' => 'object',
        'countersAvailable' => 'string[]',
        'resetCountersAvailable' => 'bool',
        'pricePerUnit' => 'float',
        'currency' => 'string',
        'electricityMeterInitialValues' => 'object',
        'relatedRelayChannelId' => 'int',
        'addToHistory' => 'bool',
        'voltageLoggerEnabled' => 'bool',
        'currentLoggerEnabled' => 'bool',
        'powerActiveLoggerEnabled' => 'bool',
        'lowerVoltageThreshold' => 'float',
        'upperVoltageThreshold' => 'float',
        'disabledPhases' => 'int[]',
        'enabledPhases' => 'int[]',
        'availablePhases' => 'int[]',
        'usedCTType' => 'string',
        'availableCTTypes' => 'string[]',
        'usedPhaseLedType' => 'string',
        'availablePhaseLedTypes' => 'string[]',
        'phaseLedParam1' => 'float',
        'phaseLedParam2' => 'float',
        'temperatureAdjustment' => 'float',
        'humidityAdjustment' => 'float',
        'minTemperatureAdjustment' => 'float',
        'maxTemperatureAdjustment' => 'float',
        'minHumidityAdjustment' => 'float',
        'maxHumidityAdjustment' => 'float',
        'impulsesPerUnit' => 'int',
        'unit' => 'string',
        'initialValue' => 'int',
        'ocrSettings' => 'object',
        'invertedLogic' => 'bool',
        'timeSettingAvailable' => 'bool',
        'relayTimeS' => 'int',
        'relatedMeterChannelId' => 'int',
        'relayTimeMs' => 'int',
        'openingSensorChannelId' => 'int',
        'openingSensorSecondaryChannelId' => 'int',
        'numberOfAttemptsToOpen' => 'int',
        'numberOfAttemptsToClose' => 'int',
        'stateVerificationMethodActive' => 'bool',
        'closingRule' => '\Supla\ApiClient\Model\ChannelConfigControllingTheGateClosingRule',
        'subfunction' => 'string',
        'mainThermometerChannelId' => 'int',
        'auxThermometerChannelId' => 'int',
        'auxThermometerType' => 'string',
        'binarySensorChannelId' => 'int',
        'antiFreezeAndOverheatProtectionEnabled' => 'bool',
        'auxMinMaxSetpointEnabled' => 'bool',
        'temperatureSetpointChangeSwitchesToManualMode' => 'bool',
        'availableAlgorithms' => 'string[]',
        'usedAlgorithm' => 'string',
        'temperatureControlType' => 'string',
        'defaultTemperatureConstraintName' => 'string',
        'minOnTimeS' => 'int',
        'minOffTimeS' => 'int',
        'outputValueOnError' => 'int',
        'weeklySchedule' => '\Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule',
        'altWeeklySchedule' => '\Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule',
        'heatingModeAvailable' => 'bool',
        'coolingModeAvailable' => 'bool',
        'temperatures' => '\Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatures',
        'temperatureConstraints' => '\Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatureConstraints',
        'valueDivider' => 'float',
        'valueMultiplier' => 'float',
        'valueAdded' => 'float',
        'valuePrecision' => 'int',
        'unitBeforeValue' => 'string',
        'unitAfterValue' => 'string',
        'keepHistory' => 'bool',
        'chartType' => 'string',
        'defaults' => '\Supla\ApiClient\Model\ChannelConfigGeneralPurposeMeasurementDefaults',
        'includeValueAddedInHistory' => 'bool',
        'fillMissingData' => 'bool',
        'allowCounterReset' => 'bool',
        'alwaysDecrement' => 'bool',
        'bottomPosition' => 'int',
        'openingTimeS' => 'float',
        'closingTimeS' => 'float',
        'recalibrateAvailable' => 'bool',
        'autoCalibrationAvailable' => 'bool',
        'motorUpsideDown' => 'bool',
        'buttonsUpsideDown' => 'bool',
        'timeMargin' => 'OneOfIntegerString',
        'tiltingTimeS' => 'float',
        'tiltControlType' => 'string',
        'tilt0Angle' => 'int',
        'tilt100Angle' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actionTriggerCapabilities' => null,
        'disablesLocalOperation' => null,
        'relatedChannelId' => null,
        'hideInChannelsList' => null,
        'actions' => null,
        'countersAvailable' => null,
        'resetCountersAvailable' => null,
        'pricePerUnit' => null,
        'currency' => null,
        'electricityMeterInitialValues' => null,
        'relatedRelayChannelId' => null,
        'addToHistory' => null,
        'voltageLoggerEnabled' => null,
        'currentLoggerEnabled' => null,
        'powerActiveLoggerEnabled' => null,
        'lowerVoltageThreshold' => null,
        'upperVoltageThreshold' => null,
        'disabledPhases' => null,
        'enabledPhases' => null,
        'availablePhases' => null,
        'usedCTType' => null,
        'availableCTTypes' => null,
        'usedPhaseLedType' => null,
        'availablePhaseLedTypes' => null,
        'phaseLedParam1' => 'float',
        'phaseLedParam2' => 'float',
        'temperatureAdjustment' => null,
        'humidityAdjustment' => null,
        'minTemperatureAdjustment' => null,
        'maxTemperatureAdjustment' => null,
        'minHumidityAdjustment' => null,
        'maxHumidityAdjustment' => null,
        'impulsesPerUnit' => null,
        'unit' => null,
        'initialValue' => null,
        'ocrSettings' => null,
        'invertedLogic' => null,
        'timeSettingAvailable' => null,
        'relayTimeS' => null,
        'relatedMeterChannelId' => null,
        'relayTimeMs' => null,
        'openingSensorChannelId' => null,
        'openingSensorSecondaryChannelId' => null,
        'numberOfAttemptsToOpen' => null,
        'numberOfAttemptsToClose' => null,
        'stateVerificationMethodActive' => null,
        'closingRule' => null,
        'subfunction' => null,
        'mainThermometerChannelId' => null,
        'auxThermometerChannelId' => null,
        'auxThermometerType' => null,
        'binarySensorChannelId' => null,
        'antiFreezeAndOverheatProtectionEnabled' => null,
        'auxMinMaxSetpointEnabled' => null,
        'temperatureSetpointChangeSwitchesToManualMode' => null,
        'availableAlgorithms' => null,
        'usedAlgorithm' => null,
        'temperatureControlType' => null,
        'defaultTemperatureConstraintName' => null,
        'minOnTimeS' => null,
        'minOffTimeS' => null,
        'outputValueOnError' => null,
        'weeklySchedule' => null,
        'altWeeklySchedule' => null,
        'heatingModeAvailable' => null,
        'coolingModeAvailable' => null,
        'temperatures' => null,
        'temperatureConstraints' => null,
        'valueDivider' => null,
        'valueMultiplier' => null,
        'valueAdded' => null,
        'valuePrecision' => null,
        'unitBeforeValue' => null,
        'unitAfterValue' => null,
        'keepHistory' => null,
        'chartType' => null,
        'defaults' => null,
        'includeValueAddedInHistory' => null,
        'fillMissingData' => null,
        'allowCounterReset' => null,
        'alwaysDecrement' => null,
        'bottomPosition' => null,
        'openingTimeS' => null,
        'closingTimeS' => null,
        'recalibrateAvailable' => null,
        'autoCalibrationAvailable' => null,
        'motorUpsideDown' => null,
        'buttonsUpsideDown' => null,
        'timeMargin' => null,
        'tiltingTimeS' => null,
        'tiltControlType' => null,
        'tilt0Angle' => null,
        'tilt100Angle' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actionTriggerCapabilities' => 'actionTriggerCapabilities',
        'disablesLocalOperation' => 'disablesLocalOperation',
        'relatedChannelId' => 'relatedChannelId',
        'hideInChannelsList' => 'hideInChannelsList',
        'actions' => 'actions',
        'countersAvailable' => 'countersAvailable',
        'resetCountersAvailable' => 'resetCountersAvailable',
        'pricePerUnit' => 'pricePerUnit',
        'currency' => 'currency',
        'electricityMeterInitialValues' => 'electricityMeterInitialValues',
        'relatedRelayChannelId' => 'relatedRelayChannelId',
        'addToHistory' => 'addToHistory',
        'voltageLoggerEnabled' => 'voltageLoggerEnabled',
        'currentLoggerEnabled' => 'currentLoggerEnabled',
        'powerActiveLoggerEnabled' => 'powerActiveLoggerEnabled',
        'lowerVoltageThreshold' => 'lowerVoltageThreshold',
        'upperVoltageThreshold' => 'upperVoltageThreshold',
        'disabledPhases' => 'disabledPhases',
        'enabledPhases' => 'enabledPhases',
        'availablePhases' => 'availablePhases',
        'usedCTType' => 'usedCTType',
        'availableCTTypes' => 'availableCTTypes',
        'usedPhaseLedType' => 'usedPhaseLedType',
        'availablePhaseLedTypes' => 'availablePhaseLedTypes',
        'phaseLedParam1' => 'phaseLedParam1',
        'phaseLedParam2' => 'phaseLedParam2',
        'temperatureAdjustment' => 'temperatureAdjustment',
        'humidityAdjustment' => 'humidityAdjustment',
        'minTemperatureAdjustment' => 'minTemperatureAdjustment',
        'maxTemperatureAdjustment' => 'maxTemperatureAdjustment',
        'minHumidityAdjustment' => 'minHumidityAdjustment',
        'maxHumidityAdjustment' => 'maxHumidityAdjustment',
        'impulsesPerUnit' => 'impulsesPerUnit',
        'unit' => 'unit',
        'initialValue' => 'initialValue',
        'ocrSettings' => 'ocrSettings',
        'invertedLogic' => 'invertedLogic',
        'timeSettingAvailable' => 'timeSettingAvailable',
        'relayTimeS' => 'relayTimeS',
        'relatedMeterChannelId' => 'relatedMeterChannelId',
        'relayTimeMs' => 'relayTimeMs',
        'openingSensorChannelId' => 'openingSensorChannelId',
        'openingSensorSecondaryChannelId' => 'openingSensorSecondaryChannelId',
        'numberOfAttemptsToOpen' => 'numberOfAttemptsToOpen',
        'numberOfAttemptsToClose' => 'numberOfAttemptsToClose',
        'stateVerificationMethodActive' => 'stateVerificationMethodActive',
        'closingRule' => 'closingRule',
        'subfunction' => 'subfunction',
        'mainThermometerChannelId' => 'mainThermometerChannelId',
        'auxThermometerChannelId' => 'auxThermometerChannelId',
        'auxThermometerType' => 'auxThermometerType',
        'binarySensorChannelId' => 'binarySensorChannelId',
        'antiFreezeAndOverheatProtectionEnabled' => 'antiFreezeAndOverheatProtectionEnabled',
        'auxMinMaxSetpointEnabled' => 'auxMinMaxSetpointEnabled',
        'temperatureSetpointChangeSwitchesToManualMode' => 'temperatureSetpointChangeSwitchesToManualMode',
        'availableAlgorithms' => 'availableAlgorithms',
        'usedAlgorithm' => 'usedAlgorithm',
        'temperatureControlType' => 'temperatureControlType',
        'defaultTemperatureConstraintName' => 'defaultTemperatureConstraintName',
        'minOnTimeS' => 'minOnTimeS',
        'minOffTimeS' => 'minOffTimeS',
        'outputValueOnError' => 'outputValueOnError',
        'weeklySchedule' => 'weeklySchedule',
        'altWeeklySchedule' => 'altWeeklySchedule',
        'heatingModeAvailable' => 'heatingModeAvailable',
        'coolingModeAvailable' => 'coolingModeAvailable',
        'temperatures' => 'temperatures',
        'temperatureConstraints' => 'temperatureConstraints',
        'valueDivider' => 'valueDivider',
        'valueMultiplier' => 'valueMultiplier',
        'valueAdded' => 'valueAdded',
        'valuePrecision' => 'valuePrecision',
        'unitBeforeValue' => 'unitBeforeValue',
        'unitAfterValue' => 'unitAfterValue',
        'keepHistory' => 'keepHistory',
        'chartType' => 'chartType',
        'defaults' => 'defaults',
        'includeValueAddedInHistory' => 'includeValueAddedInHistory',
        'fillMissingData' => 'fillMissingData',
        'allowCounterReset' => 'allowCounterReset',
        'alwaysDecrement' => 'alwaysDecrement',
        'bottomPosition' => 'bottomPosition',
        'openingTimeS' => 'openingTimeS',
        'closingTimeS' => 'closingTimeS',
        'recalibrateAvailable' => 'recalibrateAvailable',
        'autoCalibrationAvailable' => 'autoCalibrationAvailable',
        'motorUpsideDown' => 'motorUpsideDown',
        'buttonsUpsideDown' => 'buttonsUpsideDown',
        'timeMargin' => 'timeMargin',
        'tiltingTimeS' => 'tiltingTimeS',
        'tiltControlType' => 'tiltControlType',
        'tilt0Angle' => 'tilt0Angle',
        'tilt100Angle' => 'tilt100Angle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actionTriggerCapabilities' => 'setActionTriggerCapabilities',
        'disablesLocalOperation' => 'setDisablesLocalOperation',
        'relatedChannelId' => 'setRelatedChannelId',
        'hideInChannelsList' => 'setHideInChannelsList',
        'actions' => 'setActions',
        'countersAvailable' => 'setCountersAvailable',
        'resetCountersAvailable' => 'setResetCountersAvailable',
        'pricePerUnit' => 'setPricePerUnit',
        'currency' => 'setCurrency',
        'electricityMeterInitialValues' => 'setElectricityMeterInitialValues',
        'relatedRelayChannelId' => 'setRelatedRelayChannelId',
        'addToHistory' => 'setAddToHistory',
        'voltageLoggerEnabled' => 'setVoltageLoggerEnabled',
        'currentLoggerEnabled' => 'setCurrentLoggerEnabled',
        'powerActiveLoggerEnabled' => 'setPowerActiveLoggerEnabled',
        'lowerVoltageThreshold' => 'setLowerVoltageThreshold',
        'upperVoltageThreshold' => 'setUpperVoltageThreshold',
        'disabledPhases' => 'setDisabledPhases',
        'enabledPhases' => 'setEnabledPhases',
        'availablePhases' => 'setAvailablePhases',
        'usedCTType' => 'setUsedCTType',
        'availableCTTypes' => 'setAvailableCTTypes',
        'usedPhaseLedType' => 'setUsedPhaseLedType',
        'availablePhaseLedTypes' => 'setAvailablePhaseLedTypes',
        'phaseLedParam1' => 'setPhaseLedParam1',
        'phaseLedParam2' => 'setPhaseLedParam2',
        'temperatureAdjustment' => 'setTemperatureAdjustment',
        'humidityAdjustment' => 'setHumidityAdjustment',
        'minTemperatureAdjustment' => 'setMinTemperatureAdjustment',
        'maxTemperatureAdjustment' => 'setMaxTemperatureAdjustment',
        'minHumidityAdjustment' => 'setMinHumidityAdjustment',
        'maxHumidityAdjustment' => 'setMaxHumidityAdjustment',
        'impulsesPerUnit' => 'setImpulsesPerUnit',
        'unit' => 'setUnit',
        'initialValue' => 'setInitialValue',
        'ocrSettings' => 'setOcrSettings',
        'invertedLogic' => 'setInvertedLogic',
        'timeSettingAvailable' => 'setTimeSettingAvailable',
        'relayTimeS' => 'setRelayTimeS',
        'relatedMeterChannelId' => 'setRelatedMeterChannelId',
        'relayTimeMs' => 'setRelayTimeMs',
        'openingSensorChannelId' => 'setOpeningSensorChannelId',
        'openingSensorSecondaryChannelId' => 'setOpeningSensorSecondaryChannelId',
        'numberOfAttemptsToOpen' => 'setNumberOfAttemptsToOpen',
        'numberOfAttemptsToClose' => 'setNumberOfAttemptsToClose',
        'stateVerificationMethodActive' => 'setStateVerificationMethodActive',
        'closingRule' => 'setClosingRule',
        'subfunction' => 'setSubfunction',
        'mainThermometerChannelId' => 'setMainThermometerChannelId',
        'auxThermometerChannelId' => 'setAuxThermometerChannelId',
        'auxThermometerType' => 'setAuxThermometerType',
        'binarySensorChannelId' => 'setBinarySensorChannelId',
        'antiFreezeAndOverheatProtectionEnabled' => 'setAntiFreezeAndOverheatProtectionEnabled',
        'auxMinMaxSetpointEnabled' => 'setAuxMinMaxSetpointEnabled',
        'temperatureSetpointChangeSwitchesToManualMode' => 'setTemperatureSetpointChangeSwitchesToManualMode',
        'availableAlgorithms' => 'setAvailableAlgorithms',
        'usedAlgorithm' => 'setUsedAlgorithm',
        'temperatureControlType' => 'setTemperatureControlType',
        'defaultTemperatureConstraintName' => 'setDefaultTemperatureConstraintName',
        'minOnTimeS' => 'setMinOnTimeS',
        'minOffTimeS' => 'setMinOffTimeS',
        'outputValueOnError' => 'setOutputValueOnError',
        'weeklySchedule' => 'setWeeklySchedule',
        'altWeeklySchedule' => 'setAltWeeklySchedule',
        'heatingModeAvailable' => 'setHeatingModeAvailable',
        'coolingModeAvailable' => 'setCoolingModeAvailable',
        'temperatures' => 'setTemperatures',
        'temperatureConstraints' => 'setTemperatureConstraints',
        'valueDivider' => 'setValueDivider',
        'valueMultiplier' => 'setValueMultiplier',
        'valueAdded' => 'setValueAdded',
        'valuePrecision' => 'setValuePrecision',
        'unitBeforeValue' => 'setUnitBeforeValue',
        'unitAfterValue' => 'setUnitAfterValue',
        'keepHistory' => 'setKeepHistory',
        'chartType' => 'setChartType',
        'defaults' => 'setDefaults',
        'includeValueAddedInHistory' => 'setIncludeValueAddedInHistory',
        'fillMissingData' => 'setFillMissingData',
        'allowCounterReset' => 'setAllowCounterReset',
        'alwaysDecrement' => 'setAlwaysDecrement',
        'bottomPosition' => 'setBottomPosition',
        'openingTimeS' => 'setOpeningTimeS',
        'closingTimeS' => 'setClosingTimeS',
        'recalibrateAvailable' => 'setRecalibrateAvailable',
        'autoCalibrationAvailable' => 'setAutoCalibrationAvailable',
        'motorUpsideDown' => 'setMotorUpsideDown',
        'buttonsUpsideDown' => 'setButtonsUpsideDown',
        'timeMargin' => 'setTimeMargin',
        'tiltingTimeS' => 'setTiltingTimeS',
        'tiltControlType' => 'setTiltControlType',
        'tilt0Angle' => 'setTilt0Angle',
        'tilt100Angle' => 'setTilt100Angle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actionTriggerCapabilities' => 'getActionTriggerCapabilities',
        'disablesLocalOperation' => 'getDisablesLocalOperation',
        'relatedChannelId' => 'getRelatedChannelId',
        'hideInChannelsList' => 'getHideInChannelsList',
        'actions' => 'getActions',
        'countersAvailable' => 'getCountersAvailable',
        'resetCountersAvailable' => 'getResetCountersAvailable',
        'pricePerUnit' => 'getPricePerUnit',
        'currency' => 'getCurrency',
        'electricityMeterInitialValues' => 'getElectricityMeterInitialValues',
        'relatedRelayChannelId' => 'getRelatedRelayChannelId',
        'addToHistory' => 'getAddToHistory',
        'voltageLoggerEnabled' => 'getVoltageLoggerEnabled',
        'currentLoggerEnabled' => 'getCurrentLoggerEnabled',
        'powerActiveLoggerEnabled' => 'getPowerActiveLoggerEnabled',
        'lowerVoltageThreshold' => 'getLowerVoltageThreshold',
        'upperVoltageThreshold' => 'getUpperVoltageThreshold',
        'disabledPhases' => 'getDisabledPhases',
        'enabledPhases' => 'getEnabledPhases',
        'availablePhases' => 'getAvailablePhases',
        'usedCTType' => 'getUsedCTType',
        'availableCTTypes' => 'getAvailableCTTypes',
        'usedPhaseLedType' => 'getUsedPhaseLedType',
        'availablePhaseLedTypes' => 'getAvailablePhaseLedTypes',
        'phaseLedParam1' => 'getPhaseLedParam1',
        'phaseLedParam2' => 'getPhaseLedParam2',
        'temperatureAdjustment' => 'getTemperatureAdjustment',
        'humidityAdjustment' => 'getHumidityAdjustment',
        'minTemperatureAdjustment' => 'getMinTemperatureAdjustment',
        'maxTemperatureAdjustment' => 'getMaxTemperatureAdjustment',
        'minHumidityAdjustment' => 'getMinHumidityAdjustment',
        'maxHumidityAdjustment' => 'getMaxHumidityAdjustment',
        'impulsesPerUnit' => 'getImpulsesPerUnit',
        'unit' => 'getUnit',
        'initialValue' => 'getInitialValue',
        'ocrSettings' => 'getOcrSettings',
        'invertedLogic' => 'getInvertedLogic',
        'timeSettingAvailable' => 'getTimeSettingAvailable',
        'relayTimeS' => 'getRelayTimeS',
        'relatedMeterChannelId' => 'getRelatedMeterChannelId',
        'relayTimeMs' => 'getRelayTimeMs',
        'openingSensorChannelId' => 'getOpeningSensorChannelId',
        'openingSensorSecondaryChannelId' => 'getOpeningSensorSecondaryChannelId',
        'numberOfAttemptsToOpen' => 'getNumberOfAttemptsToOpen',
        'numberOfAttemptsToClose' => 'getNumberOfAttemptsToClose',
        'stateVerificationMethodActive' => 'getStateVerificationMethodActive',
        'closingRule' => 'getClosingRule',
        'subfunction' => 'getSubfunction',
        'mainThermometerChannelId' => 'getMainThermometerChannelId',
        'auxThermometerChannelId' => 'getAuxThermometerChannelId',
        'auxThermometerType' => 'getAuxThermometerType',
        'binarySensorChannelId' => 'getBinarySensorChannelId',
        'antiFreezeAndOverheatProtectionEnabled' => 'getAntiFreezeAndOverheatProtectionEnabled',
        'auxMinMaxSetpointEnabled' => 'getAuxMinMaxSetpointEnabled',
        'temperatureSetpointChangeSwitchesToManualMode' => 'getTemperatureSetpointChangeSwitchesToManualMode',
        'availableAlgorithms' => 'getAvailableAlgorithms',
        'usedAlgorithm' => 'getUsedAlgorithm',
        'temperatureControlType' => 'getTemperatureControlType',
        'defaultTemperatureConstraintName' => 'getDefaultTemperatureConstraintName',
        'minOnTimeS' => 'getMinOnTimeS',
        'minOffTimeS' => 'getMinOffTimeS',
        'outputValueOnError' => 'getOutputValueOnError',
        'weeklySchedule' => 'getWeeklySchedule',
        'altWeeklySchedule' => 'getAltWeeklySchedule',
        'heatingModeAvailable' => 'getHeatingModeAvailable',
        'coolingModeAvailable' => 'getCoolingModeAvailable',
        'temperatures' => 'getTemperatures',
        'temperatureConstraints' => 'getTemperatureConstraints',
        'valueDivider' => 'getValueDivider',
        'valueMultiplier' => 'getValueMultiplier',
        'valueAdded' => 'getValueAdded',
        'valuePrecision' => 'getValuePrecision',
        'unitBeforeValue' => 'getUnitBeforeValue',
        'unitAfterValue' => 'getUnitAfterValue',
        'keepHistory' => 'getKeepHistory',
        'chartType' => 'getChartType',
        'defaults' => 'getDefaults',
        'includeValueAddedInHistory' => 'getIncludeValueAddedInHistory',
        'fillMissingData' => 'getFillMissingData',
        'allowCounterReset' => 'getAllowCounterReset',
        'alwaysDecrement' => 'getAlwaysDecrement',
        'bottomPosition' => 'getBottomPosition',
        'openingTimeS' => 'getOpeningTimeS',
        'closingTimeS' => 'getClosingTimeS',
        'recalibrateAvailable' => 'getRecalibrateAvailable',
        'autoCalibrationAvailable' => 'getAutoCalibrationAvailable',
        'motorUpsideDown' => 'getMotorUpsideDown',
        'buttonsUpsideDown' => 'getButtonsUpsideDown',
        'timeMargin' => 'getTimeMargin',
        'tiltingTimeS' => 'getTiltingTimeS',
        'tiltControlType' => 'getTiltControlType',
        'tilt0Angle' => 'getTilt0Angle',
        'tilt100Angle' => 'getTilt100Angle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const CHART_TYPE_LINEAR = 'LINEAR';
    const CHART_TYPE_BAR = 'BAR';
    const CHART_TYPE_CANDLE = 'CANDLE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChartTypeAllowableValues()
    {
        return [
            self::CHART_TYPE_LINEAR,
            self::CHART_TYPE_BAR,
            self::CHART_TYPE_CANDLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actionTriggerCapabilities'] = $data['actionTriggerCapabilities'] ?? null;
        $this->container['disablesLocalOperation'] = $data['disablesLocalOperation'] ?? null;
        $this->container['relatedChannelId'] = $data['relatedChannelId'] ?? null;
        $this->container['hideInChannelsList'] = $data['hideInChannelsList'] ?? null;
        $this->container['actions'] = $data['actions'] ?? null;
        $this->container['countersAvailable'] = $data['countersAvailable'] ?? null;
        $this->container['resetCountersAvailable'] = $data['resetCountersAvailable'] ?? null;
        $this->container['pricePerUnit'] = $data['pricePerUnit'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['electricityMeterInitialValues'] = $data['electricityMeterInitialValues'] ?? null;
        $this->container['relatedRelayChannelId'] = $data['relatedRelayChannelId'] ?? null;
        $this->container['addToHistory'] = $data['addToHistory'] ?? null;
        $this->container['voltageLoggerEnabled'] = $data['voltageLoggerEnabled'] ?? null;
        $this->container['currentLoggerEnabled'] = $data['currentLoggerEnabled'] ?? null;
        $this->container['powerActiveLoggerEnabled'] = $data['powerActiveLoggerEnabled'] ?? null;
        $this->container['lowerVoltageThreshold'] = $data['lowerVoltageThreshold'] ?? null;
        $this->container['upperVoltageThreshold'] = $data['upperVoltageThreshold'] ?? null;
        $this->container['disabledPhases'] = $data['disabledPhases'] ?? null;
        $this->container['enabledPhases'] = $data['enabledPhases'] ?? null;
        $this->container['availablePhases'] = $data['availablePhases'] ?? null;
        $this->container['usedCTType'] = $data['usedCTType'] ?? null;
        $this->container['availableCTTypes'] = $data['availableCTTypes'] ?? null;
        $this->container['usedPhaseLedType'] = $data['usedPhaseLedType'] ?? null;
        $this->container['availablePhaseLedTypes'] = $data['availablePhaseLedTypes'] ?? null;
        $this->container['phaseLedParam1'] = $data['phaseLedParam1'] ?? null;
        $this->container['phaseLedParam2'] = $data['phaseLedParam2'] ?? null;
        $this->container['temperatureAdjustment'] = $data['temperatureAdjustment'] ?? null;
        $this->container['humidityAdjustment'] = $data['humidityAdjustment'] ?? null;
        $this->container['minTemperatureAdjustment'] = $data['minTemperatureAdjustment'] ?? null;
        $this->container['maxTemperatureAdjustment'] = $data['maxTemperatureAdjustment'] ?? null;
        $this->container['minHumidityAdjustment'] = $data['minHumidityAdjustment'] ?? null;
        $this->container['maxHumidityAdjustment'] = $data['maxHumidityAdjustment'] ?? null;
        $this->container['impulsesPerUnit'] = $data['impulsesPerUnit'] ?? null;
        $this->container['unit'] = $data['unit'] ?? null;
        $this->container['initialValue'] = $data['initialValue'] ?? null;
        $this->container['ocrSettings'] = $data['ocrSettings'] ?? null;
        $this->container['invertedLogic'] = $data['invertedLogic'] ?? null;
        $this->container['timeSettingAvailable'] = $data['timeSettingAvailable'] ?? null;
        $this->container['relayTimeS'] = $data['relayTimeS'] ?? null;
        $this->container['relatedMeterChannelId'] = $data['relatedMeterChannelId'] ?? null;
        $this->container['relayTimeMs'] = $data['relayTimeMs'] ?? null;
        $this->container['openingSensorChannelId'] = $data['openingSensorChannelId'] ?? null;
        $this->container['openingSensorSecondaryChannelId'] = $data['openingSensorSecondaryChannelId'] ?? null;
        $this->container['numberOfAttemptsToOpen'] = $data['numberOfAttemptsToOpen'] ?? null;
        $this->container['numberOfAttemptsToClose'] = $data['numberOfAttemptsToClose'] ?? null;
        $this->container['stateVerificationMethodActive'] = $data['stateVerificationMethodActive'] ?? null;
        $this->container['closingRule'] = $data['closingRule'] ?? null;
        $this->container['subfunction'] = $data['subfunction'] ?? null;
        $this->container['mainThermometerChannelId'] = $data['mainThermometerChannelId'] ?? null;
        $this->container['auxThermometerChannelId'] = $data['auxThermometerChannelId'] ?? null;
        $this->container['auxThermometerType'] = $data['auxThermometerType'] ?? null;
        $this->container['binarySensorChannelId'] = $data['binarySensorChannelId'] ?? null;
        $this->container['antiFreezeAndOverheatProtectionEnabled'] = $data['antiFreezeAndOverheatProtectionEnabled'] ?? null;
        $this->container['auxMinMaxSetpointEnabled'] = $data['auxMinMaxSetpointEnabled'] ?? null;
        $this->container['temperatureSetpointChangeSwitchesToManualMode'] = $data['temperatureSetpointChangeSwitchesToManualMode'] ?? null;
        $this->container['availableAlgorithms'] = $data['availableAlgorithms'] ?? null;
        $this->container['usedAlgorithm'] = $data['usedAlgorithm'] ?? null;
        $this->container['temperatureControlType'] = $data['temperatureControlType'] ?? null;
        $this->container['defaultTemperatureConstraintName'] = $data['defaultTemperatureConstraintName'] ?? null;
        $this->container['minOnTimeS'] = $data['minOnTimeS'] ?? null;
        $this->container['minOffTimeS'] = $data['minOffTimeS'] ?? null;
        $this->container['outputValueOnError'] = $data['outputValueOnError'] ?? null;
        $this->container['weeklySchedule'] = $data['weeklySchedule'] ?? null;
        $this->container['altWeeklySchedule'] = $data['altWeeklySchedule'] ?? null;
        $this->container['heatingModeAvailable'] = $data['heatingModeAvailable'] ?? null;
        $this->container['coolingModeAvailable'] = $data['coolingModeAvailable'] ?? null;
        $this->container['temperatures'] = $data['temperatures'] ?? null;
        $this->container['temperatureConstraints'] = $data['temperatureConstraints'] ?? null;
        $this->container['valueDivider'] = $data['valueDivider'] ?? null;
        $this->container['valueMultiplier'] = $data['valueMultiplier'] ?? null;
        $this->container['valueAdded'] = $data['valueAdded'] ?? null;
        $this->container['valuePrecision'] = $data['valuePrecision'] ?? null;
        $this->container['unitBeforeValue'] = $data['unitBeforeValue'] ?? null;
        $this->container['unitAfterValue'] = $data['unitAfterValue'] ?? null;
        $this->container['keepHistory'] = $data['keepHistory'] ?? null;
        $this->container['chartType'] = $data['chartType'] ?? null;
        $this->container['defaults'] = $data['defaults'] ?? null;
        $this->container['includeValueAddedInHistory'] = $data['includeValueAddedInHistory'] ?? null;
        $this->container['fillMissingData'] = $data['fillMissingData'] ?? null;
        $this->container['allowCounterReset'] = $data['allowCounterReset'] ?? null;
        $this->container['alwaysDecrement'] = $data['alwaysDecrement'] ?? null;
        $this->container['bottomPosition'] = $data['bottomPosition'] ?? null;
        $this->container['openingTimeS'] = $data['openingTimeS'] ?? null;
        $this->container['closingTimeS'] = $data['closingTimeS'] ?? null;
        $this->container['recalibrateAvailable'] = $data['recalibrateAvailable'] ?? null;
        $this->container['autoCalibrationAvailable'] = $data['autoCalibrationAvailable'] ?? null;
        $this->container['motorUpsideDown'] = $data['motorUpsideDown'] ?? null;
        $this->container['buttonsUpsideDown'] = $data['buttonsUpsideDown'] ?? null;
        $this->container['timeMargin'] = $data['timeMargin'] ?? null;
        $this->container['tiltingTimeS'] = $data['tiltingTimeS'] ?? null;
        $this->container['tiltControlType'] = $data['tiltControlType'] ?? null;
        $this->container['tilt0Angle'] = $data['tilt0Angle'] ?? null;
        $this->container['tilt100Angle'] = $data['tilt100Angle'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['relayTimeS']) && ($this->container['relayTimeS'] > 7200)) {
            $invalidProperties[] = "invalid value for 'relayTimeS', must be smaller than or equal to 7200.";
        }

        if (!is_null($this->container['relayTimeS']) && ($this->container['relayTimeS'] < 0)) {
            $invalidProperties[] = "invalid value for 'relayTimeS', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['numberOfAttemptsToOpen']) && ($this->container['numberOfAttemptsToOpen'] > 5)) {
            $invalidProperties[] = "invalid value for 'numberOfAttemptsToOpen', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['numberOfAttemptsToOpen']) && ($this->container['numberOfAttemptsToOpen'] < 1)) {
            $invalidProperties[] = "invalid value for 'numberOfAttemptsToOpen', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['numberOfAttemptsToClose']) && ($this->container['numberOfAttemptsToClose'] > 5)) {
            $invalidProperties[] = "invalid value for 'numberOfAttemptsToClose', must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['numberOfAttemptsToClose']) && ($this->container['numberOfAttemptsToClose'] < 1)) {
            $invalidProperties[] = "invalid value for 'numberOfAttemptsToClose', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['minOnTimeS']) && ($this->container['minOnTimeS'] > 3600)) {
            $invalidProperties[] = "invalid value for 'minOnTimeS', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['minOnTimeS']) && ($this->container['minOnTimeS'] < 0)) {
            $invalidProperties[] = "invalid value for 'minOnTimeS', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['minOffTimeS']) && ($this->container['minOffTimeS'] > 3600)) {
            $invalidProperties[] = "invalid value for 'minOffTimeS', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['minOffTimeS']) && ($this->container['minOffTimeS'] < 0)) {
            $invalidProperties[] = "invalid value for 'minOffTimeS', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['outputValueOnError']) && ($this->container['outputValueOnError'] > 100)) {
            $invalidProperties[] = "invalid value for 'outputValueOnError', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['outputValueOnError']) && ($this->container['outputValueOnError'] < -100)) {
            $invalidProperties[] = "invalid value for 'outputValueOnError', must be bigger than or equal to -100.";
        }

        $allowedValues = $this->getChartTypeAllowableValues();
        if (!is_null($this->container['chartType']) && !in_array($this->container['chartType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'chartType', must be one of '%s'",
                $this->container['chartType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actionTriggerCapabilities
     *
     * @return string[]|null
     */
    public function getActionTriggerCapabilities()
    {
        return $this->container['actionTriggerCapabilities'];
    }

    /**
     * Sets actionTriggerCapabilities
     *
     * @param string[]|null $actionTriggerCapabilities List of supported triggers. Set only by the device.
     *
     * @return self
     */
    public function setActionTriggerCapabilities($actionTriggerCapabilities)
    {
        $this->container['actionTriggerCapabilities'] = $actionTriggerCapabilities;

        return $this;
    }

    /**
     * Gets disablesLocalOperation
     *
     * @return bool|null
     */
    public function getDisablesLocalOperation()
    {
        return $this->container['disablesLocalOperation'];
    }

    /**
     * Sets disablesLocalOperation
     *
     * @param bool|null $disablesLocalOperation Tells if enabling the AT disables local function.
     *
     * @return self
     */
    public function setDisablesLocalOperation($disablesLocalOperation)
    {
        $this->container['disablesLocalOperation'] = $disablesLocalOperation;

        return $this;
    }

    /**
     * Gets relatedChannelId
     *
     * @return int|null
     */
    public function getRelatedChannelId()
    {
        return $this->container['relatedChannelId'];
    }

    /**
     * Sets relatedChannelId
     *
     * @param int|null $relatedChannelId Paired channel set by the device.
     *
     * @return self
     */
    public function setRelatedChannelId($relatedChannelId)
    {
        $this->container['relatedChannelId'] = $relatedChannelId;

        return $this;
    }

    /**
     * Gets hideInChannelsList
     *
     * @return int|null
     */
    public function getHideInChannelsList()
    {
        return $this->container['hideInChannelsList'];
    }

    /**
     * Sets hideInChannelsList
     *
     * @param int|null $hideInChannelsList Whether to display the channel in the main channels list (it's false for ATs with paired channel).
     *
     * @return self
     */
    public function setHideInChannelsList($hideInChannelsList)
    {
        $this->container['hideInChannelsList'] = $hideInChannelsList;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return object|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param object|null $actions List of configured AT actions.
     *
     * @return self
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets countersAvailable
     *
     * @return string[]|null
     */
    public function getCountersAvailable()
    {
        return $this->container['countersAvailable'];
    }

    /**
     * Sets countersAvailable
     *
     * @param string[]|null $countersAvailable List of available counters supported by this channel.
     *
     * @return self
     */
    public function setCountersAvailable($countersAvailable)
    {
        $this->container['countersAvailable'] = $countersAvailable;

        return $this;
    }

    /**
     * Gets resetCountersAvailable
     *
     * @return bool|null
     */
    public function getResetCountersAvailable()
    {
        return $this->container['resetCountersAvailable'];
    }

    /**
     * Sets resetCountersAvailable
     *
     * @param bool|null $resetCountersAvailable resetCountersAvailable
     *
     * @return self
     */
    public function setResetCountersAvailable($resetCountersAvailable)
    {
        $this->container['resetCountersAvailable'] = $resetCountersAvailable;

        return $this;
    }

    /**
     * Gets pricePerUnit
     *
     * @return float|null
     */
    public function getPricePerUnit()
    {
        return $this->container['pricePerUnit'];
    }

    /**
     * Sets pricePerUnit
     *
     * @param float|null $pricePerUnit pricePerUnit
     *
     * @return self
     */
    public function setPricePerUnit($pricePerUnit)
    {
        $this->container['pricePerUnit'] = $pricePerUnit;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets electricityMeterInitialValues
     *
     * @return object|null
     */
    public function getElectricityMeterInitialValues()
    {
        return $this->container['electricityMeterInitialValues'];
    }

    /**
     * Sets electricityMeterInitialValues
     *
     * @param object|null $electricityMeterInitialValues electricityMeterInitialValues
     *
     * @return self
     */
    public function setElectricityMeterInitialValues($electricityMeterInitialValues)
    {
        $this->container['electricityMeterInitialValues'] = $electricityMeterInitialValues;

        return $this;
    }

    /**
     * Gets relatedRelayChannelId
     *
     * @return int|null
     */
    public function getRelatedRelayChannelId()
    {
        return $this->container['relatedRelayChannelId'];
    }

    /**
     * Sets relatedRelayChannelId
     *
     * @param int|null $relatedRelayChannelId relatedRelayChannelId
     *
     * @return self
     */
    public function setRelatedRelayChannelId($relatedRelayChannelId)
    {
        $this->container['relatedRelayChannelId'] = $relatedRelayChannelId;

        return $this;
    }

    /**
     * Gets addToHistory
     *
     * @return bool|null
     */
    public function getAddToHistory()
    {
        return $this->container['addToHistory'];
    }

    /**
     * Sets addToHistory
     *
     * @param bool|null $addToHistory addToHistory
     *
     * @return self
     */
    public function setAddToHistory($addToHistory)
    {
        $this->container['addToHistory'] = $addToHistory;

        return $this;
    }

    /**
     * Gets voltageLoggerEnabled
     *
     * @return bool|null
     */
    public function getVoltageLoggerEnabled()
    {
        return $this->container['voltageLoggerEnabled'];
    }

    /**
     * Sets voltageLoggerEnabled
     *
     * @param bool|null $voltageLoggerEnabled voltageLoggerEnabled
     *
     * @return self
     */
    public function setVoltageLoggerEnabled($voltageLoggerEnabled)
    {
        $this->container['voltageLoggerEnabled'] = $voltageLoggerEnabled;

        return $this;
    }

    /**
     * Gets currentLoggerEnabled
     *
     * @return bool|null
     */
    public function getCurrentLoggerEnabled()
    {
        return $this->container['currentLoggerEnabled'];
    }

    /**
     * Sets currentLoggerEnabled
     *
     * @param bool|null $currentLoggerEnabled currentLoggerEnabled
     *
     * @return self
     */
    public function setCurrentLoggerEnabled($currentLoggerEnabled)
    {
        $this->container['currentLoggerEnabled'] = $currentLoggerEnabled;

        return $this;
    }

    /**
     * Gets powerActiveLoggerEnabled
     *
     * @return bool|null
     */
    public function getPowerActiveLoggerEnabled()
    {
        return $this->container['powerActiveLoggerEnabled'];
    }

    /**
     * Sets powerActiveLoggerEnabled
     *
     * @param bool|null $powerActiveLoggerEnabled powerActiveLoggerEnabled
     *
     * @return self
     */
    public function setPowerActiveLoggerEnabled($powerActiveLoggerEnabled)
    {
        $this->container['powerActiveLoggerEnabled'] = $powerActiveLoggerEnabled;

        return $this;
    }

    /**
     * Gets lowerVoltageThreshold
     *
     * @return float|null
     */
    public function getLowerVoltageThreshold()
    {
        return $this->container['lowerVoltageThreshold'];
    }

    /**
     * Sets lowerVoltageThreshold
     *
     * @param float|null $lowerVoltageThreshold lowerVoltageThreshold
     *
     * @return self
     */
    public function setLowerVoltageThreshold($lowerVoltageThreshold)
    {
        $this->container['lowerVoltageThreshold'] = $lowerVoltageThreshold;

        return $this;
    }

    /**
     * Gets upperVoltageThreshold
     *
     * @return float|null
     */
    public function getUpperVoltageThreshold()
    {
        return $this->container['upperVoltageThreshold'];
    }

    /**
     * Sets upperVoltageThreshold
     *
     * @param float|null $upperVoltageThreshold upperVoltageThreshold
     *
     * @return self
     */
    public function setUpperVoltageThreshold($upperVoltageThreshold)
    {
        $this->container['upperVoltageThreshold'] = $upperVoltageThreshold;

        return $this;
    }

    /**
     * Gets disabledPhases
     *
     * @return int[]|null
     */
    public function getDisabledPhases()
    {
        return $this->container['disabledPhases'];
    }

    /**
     * Sets disabledPhases
     *
     * @param int[]|null $disabledPhases disabledPhases
     *
     * @return self
     */
    public function setDisabledPhases($disabledPhases)
    {
        $this->container['disabledPhases'] = $disabledPhases;

        return $this;
    }

    /**
     * Gets enabledPhases
     *
     * @return int[]|null
     */
    public function getEnabledPhases()
    {
        return $this->container['enabledPhases'];
    }

    /**
     * Sets enabledPhases
     *
     * @param int[]|null $enabledPhases enabledPhases
     *
     * @return self
     */
    public function setEnabledPhases($enabledPhases)
    {
        $this->container['enabledPhases'] = $enabledPhases;

        return $this;
    }

    /**
     * Gets availablePhases
     *
     * @return int[]|null
     */
    public function getAvailablePhases()
    {
        return $this->container['availablePhases'];
    }

    /**
     * Sets availablePhases
     *
     * @param int[]|null $availablePhases availablePhases
     *
     * @return self
     */
    public function setAvailablePhases($availablePhases)
    {
        $this->container['availablePhases'] = $availablePhases;

        return $this;
    }

    /**
     * Gets usedCTType
     *
     * @return string|null
     */
    public function getUsedCTType()
    {
        return $this->container['usedCTType'];
    }

    /**
     * Sets usedCTType
     *
     * @param string|null $usedCTType usedCTType
     *
     * @return self
     */
    public function setUsedCTType($usedCTType)
    {
        $this->container['usedCTType'] = $usedCTType;

        return $this;
    }

    /**
     * Gets availableCTTypes
     *
     * @return string[]|null
     */
    public function getAvailableCTTypes()
    {
        return $this->container['availableCTTypes'];
    }

    /**
     * Sets availableCTTypes
     *
     * @param string[]|null $availableCTTypes availableCTTypes
     *
     * @return self
     */
    public function setAvailableCTTypes($availableCTTypes)
    {
        $this->container['availableCTTypes'] = $availableCTTypes;

        return $this;
    }

    /**
     * Gets usedPhaseLedType
     *
     * @return string|null
     */
    public function getUsedPhaseLedType()
    {
        return $this->container['usedPhaseLedType'];
    }

    /**
     * Sets usedPhaseLedType
     *
     * @param string|null $usedPhaseLedType usedPhaseLedType
     *
     * @return self
     */
    public function setUsedPhaseLedType($usedPhaseLedType)
    {
        $this->container['usedPhaseLedType'] = $usedPhaseLedType;

        return $this;
    }

    /**
     * Gets availablePhaseLedTypes
     *
     * @return string[]|null
     */
    public function getAvailablePhaseLedTypes()
    {
        return $this->container['availablePhaseLedTypes'];
    }

    /**
     * Sets availablePhaseLedTypes
     *
     * @param string[]|null $availablePhaseLedTypes availablePhaseLedTypes
     *
     * @return self
     */
    public function setAvailablePhaseLedTypes($availablePhaseLedTypes)
    {
        $this->container['availablePhaseLedTypes'] = $availablePhaseLedTypes;

        return $this;
    }

    /**
     * Gets phaseLedParam1
     *
     * @return float|null
     */
    public function getPhaseLedParam1()
    {
        return $this->container['phaseLedParam1'];
    }

    /**
     * Sets phaseLedParam1
     *
     * @param float|null $phaseLedParam1 phaseLedParam1
     *
     * @return self
     */
    public function setPhaseLedParam1($phaseLedParam1)
    {
        $this->container['phaseLedParam1'] = $phaseLedParam1;

        return $this;
    }

    /**
     * Gets phaseLedParam2
     *
     * @return float|null
     */
    public function getPhaseLedParam2()
    {
        return $this->container['phaseLedParam2'];
    }

    /**
     * Sets phaseLedParam2
     *
     * @param float|null $phaseLedParam2 phaseLedParam2
     *
     * @return self
     */
    public function setPhaseLedParam2($phaseLedParam2)
    {
        $this->container['phaseLedParam2'] = $phaseLedParam2;

        return $this;
    }

    /**
     * Gets temperatureAdjustment
     *
     * @return float|null
     */
    public function getTemperatureAdjustment()
    {
        return $this->container['temperatureAdjustment'];
    }

    /**
     * Sets temperatureAdjustment
     *
     * @param float|null $temperatureAdjustment temperatureAdjustment
     *
     * @return self
     */
    public function setTemperatureAdjustment($temperatureAdjustment)
    {
        $this->container['temperatureAdjustment'] = $temperatureAdjustment;

        return $this;
    }

    /**
     * Gets humidityAdjustment
     *
     * @return float|null
     */
    public function getHumidityAdjustment()
    {
        return $this->container['humidityAdjustment'];
    }

    /**
     * Sets humidityAdjustment
     *
     * @param float|null $humidityAdjustment humidityAdjustment
     *
     * @return self
     */
    public function setHumidityAdjustment($humidityAdjustment)
    {
        $this->container['humidityAdjustment'] = $humidityAdjustment;

        return $this;
    }

    /**
     * Gets minTemperatureAdjustment
     *
     * @return float|null
     */
    public function getMinTemperatureAdjustment()
    {
        return $this->container['minTemperatureAdjustment'];
    }

    /**
     * Sets minTemperatureAdjustment
     *
     * @param float|null $minTemperatureAdjustment minTemperatureAdjustment
     *
     * @return self
     */
    public function setMinTemperatureAdjustment($minTemperatureAdjustment)
    {
        $this->container['minTemperatureAdjustment'] = $minTemperatureAdjustment;

        return $this;
    }

    /**
     * Gets maxTemperatureAdjustment
     *
     * @return float|null
     */
    public function getMaxTemperatureAdjustment()
    {
        return $this->container['maxTemperatureAdjustment'];
    }

    /**
     * Sets maxTemperatureAdjustment
     *
     * @param float|null $maxTemperatureAdjustment maxTemperatureAdjustment
     *
     * @return self
     */
    public function setMaxTemperatureAdjustment($maxTemperatureAdjustment)
    {
        $this->container['maxTemperatureAdjustment'] = $maxTemperatureAdjustment;

        return $this;
    }

    /**
     * Gets minHumidityAdjustment
     *
     * @return float|null
     */
    public function getMinHumidityAdjustment()
    {
        return $this->container['minHumidityAdjustment'];
    }

    /**
     * Sets minHumidityAdjustment
     *
     * @param float|null $minHumidityAdjustment minHumidityAdjustment
     *
     * @return self
     */
    public function setMinHumidityAdjustment($minHumidityAdjustment)
    {
        $this->container['minHumidityAdjustment'] = $minHumidityAdjustment;

        return $this;
    }

    /**
     * Gets maxHumidityAdjustment
     *
     * @return float|null
     */
    public function getMaxHumidityAdjustment()
    {
        return $this->container['maxHumidityAdjustment'];
    }

    /**
     * Sets maxHumidityAdjustment
     *
     * @param float|null $maxHumidityAdjustment maxHumidityAdjustment
     *
     * @return self
     */
    public function setMaxHumidityAdjustment($maxHumidityAdjustment)
    {
        $this->container['maxHumidityAdjustment'] = $maxHumidityAdjustment;

        return $this;
    }

    /**
     * Gets impulsesPerUnit
     *
     * @return int|null
     */
    public function getImpulsesPerUnit()
    {
        return $this->container['impulsesPerUnit'];
    }

    /**
     * Sets impulsesPerUnit
     *
     * @param int|null $impulsesPerUnit impulsesPerUnit
     *
     * @return self
     */
    public function setImpulsesPerUnit($impulsesPerUnit)
    {
        $this->container['impulsesPerUnit'] = $impulsesPerUnit;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets initialValue
     *
     * @return int|null
     */
    public function getInitialValue()
    {
        return $this->container['initialValue'];
    }

    /**
     * Sets initialValue
     *
     * @param int|null $initialValue initialValue
     *
     * @return self
     */
    public function setInitialValue($initialValue)
    {
        $this->container['initialValue'] = $initialValue;

        return $this;
    }

    /**
     * Gets ocrSettings
     *
     * @return object|null
     */
    public function getOcrSettings()
    {
        return $this->container['ocrSettings'];
    }

    /**
     * Sets ocrSettings
     *
     * @param object|null $ocrSettings ocrSettings
     *
     * @return self
     */
    public function setOcrSettings($ocrSettings)
    {
        $this->container['ocrSettings'] = $ocrSettings;

        return $this;
    }

    /**
     * Gets invertedLogic
     *
     * @return bool|null
     */
    public function getInvertedLogic()
    {
        return $this->container['invertedLogic'];
    }

    /**
     * Sets invertedLogic
     *
     * @param bool|null $invertedLogic invertedLogic
     *
     * @return self
     */
    public function setInvertedLogic($invertedLogic)
    {
        $this->container['invertedLogic'] = $invertedLogic;

        return $this;
    }

    /**
     * Gets timeSettingAvailable
     *
     * @return bool|null
     */
    public function getTimeSettingAvailable()
    {
        return $this->container['timeSettingAvailable'];
    }

    /**
     * Sets timeSettingAvailable
     *
     * @param bool|null $timeSettingAvailable timeSettingAvailable
     *
     * @return self
     */
    public function setTimeSettingAvailable($timeSettingAvailable)
    {
        $this->container['timeSettingAvailable'] = $timeSettingAvailable;

        return $this;
    }

    /**
     * Gets relayTimeS
     *
     * @return int|null
     */
    public function getRelayTimeS()
    {
        return $this->container['relayTimeS'];
    }

    /**
     * Sets relayTimeS
     *
     * @param int|null $relayTimeS relayTimeS
     *
     * @return self
     */
    public function setRelayTimeS($relayTimeS)
    {

        if (!is_null($relayTimeS) && ($relayTimeS > 7200)) {
            throw new \InvalidArgumentException('invalid value for $relayTimeS when calling ChannelConfig., must be smaller than or equal to 7200.');
        }
        if (!is_null($relayTimeS) && ($relayTimeS < 0)) {
            throw new \InvalidArgumentException('invalid value for $relayTimeS when calling ChannelConfig., must be bigger than or equal to 0.');
        }

        $this->container['relayTimeS'] = $relayTimeS;

        return $this;
    }

    /**
     * Gets relatedMeterChannelId
     *
     * @return int|null
     */
    public function getRelatedMeterChannelId()
    {
        return $this->container['relatedMeterChannelId'];
    }

    /**
     * Sets relatedMeterChannelId
     *
     * @param int|null $relatedMeterChannelId relatedMeterChannelId
     *
     * @return self
     */
    public function setRelatedMeterChannelId($relatedMeterChannelId)
    {
        $this->container['relatedMeterChannelId'] = $relatedMeterChannelId;

        return $this;
    }

    /**
     * Gets relayTimeMs
     *
     * @return int|null
     */
    public function getRelayTimeMs()
    {
        return $this->container['relayTimeMs'];
    }

    /**
     * Sets relayTimeMs
     *
     * @param int|null $relayTimeMs relayTimeMs
     *
     * @return self
     */
    public function setRelayTimeMs($relayTimeMs)
    {
        $this->container['relayTimeMs'] = $relayTimeMs;

        return $this;
    }

    /**
     * Gets openingSensorChannelId
     *
     * @return int|null
     */
    public function getOpeningSensorChannelId()
    {
        return $this->container['openingSensorChannelId'];
    }

    /**
     * Sets openingSensorChannelId
     *
     * @param int|null $openingSensorChannelId openingSensorChannelId
     *
     * @return self
     */
    public function setOpeningSensorChannelId($openingSensorChannelId)
    {
        $this->container['openingSensorChannelId'] = $openingSensorChannelId;

        return $this;
    }

    /**
     * Gets openingSensorSecondaryChannelId
     *
     * @return int|null
     */
    public function getOpeningSensorSecondaryChannelId()
    {
        return $this->container['openingSensorSecondaryChannelId'];
    }

    /**
     * Sets openingSensorSecondaryChannelId
     *
     * @param int|null $openingSensorSecondaryChannelId openingSensorSecondaryChannelId
     *
     * @return self
     */
    public function setOpeningSensorSecondaryChannelId($openingSensorSecondaryChannelId)
    {
        $this->container['openingSensorSecondaryChannelId'] = $openingSensorSecondaryChannelId;

        return $this;
    }

    /**
     * Gets numberOfAttemptsToOpen
     *
     * @return int|null
     */
    public function getNumberOfAttemptsToOpen()
    {
        return $this->container['numberOfAttemptsToOpen'];
    }

    /**
     * Sets numberOfAttemptsToOpen
     *
     * @param int|null $numberOfAttemptsToOpen numberOfAttemptsToOpen
     *
     * @return self
     */
    public function setNumberOfAttemptsToOpen($numberOfAttemptsToOpen)
    {

        if (!is_null($numberOfAttemptsToOpen) && ($numberOfAttemptsToOpen > 5)) {
            throw new \InvalidArgumentException('invalid value for $numberOfAttemptsToOpen when calling ChannelConfig., must be smaller than or equal to 5.');
        }
        if (!is_null($numberOfAttemptsToOpen) && ($numberOfAttemptsToOpen < 1)) {
            throw new \InvalidArgumentException('invalid value for $numberOfAttemptsToOpen when calling ChannelConfig., must be bigger than or equal to 1.');
        }

        $this->container['numberOfAttemptsToOpen'] = $numberOfAttemptsToOpen;

        return $this;
    }

    /**
     * Gets numberOfAttemptsToClose
     *
     * @return int|null
     */
    public function getNumberOfAttemptsToClose()
    {
        return $this->container['numberOfAttemptsToClose'];
    }

    /**
     * Sets numberOfAttemptsToClose
     *
     * @param int|null $numberOfAttemptsToClose numberOfAttemptsToClose
     *
     * @return self
     */
    public function setNumberOfAttemptsToClose($numberOfAttemptsToClose)
    {

        if (!is_null($numberOfAttemptsToClose) && ($numberOfAttemptsToClose > 5)) {
            throw new \InvalidArgumentException('invalid value for $numberOfAttemptsToClose when calling ChannelConfig., must be smaller than or equal to 5.');
        }
        if (!is_null($numberOfAttemptsToClose) && ($numberOfAttemptsToClose < 1)) {
            throw new \InvalidArgumentException('invalid value for $numberOfAttemptsToClose when calling ChannelConfig., must be bigger than or equal to 1.');
        }

        $this->container['numberOfAttemptsToClose'] = $numberOfAttemptsToClose;

        return $this;
    }

    /**
     * Gets stateVerificationMethodActive
     *
     * @return bool|null
     */
    public function getStateVerificationMethodActive()
    {
        return $this->container['stateVerificationMethodActive'];
    }

    /**
     * Sets stateVerificationMethodActive
     *
     * @param bool|null $stateVerificationMethodActive stateVerificationMethodActive
     *
     * @return self
     */
    public function setStateVerificationMethodActive($stateVerificationMethodActive)
    {
        $this->container['stateVerificationMethodActive'] = $stateVerificationMethodActive;

        return $this;
    }

    /**
     * Gets closingRule
     *
     * @return \Supla\ApiClient\Model\ChannelConfigControllingTheGateClosingRule|null
     */
    public function getClosingRule()
    {
        return $this->container['closingRule'];
    }

    /**
     * Sets closingRule
     *
     * @param \Supla\ApiClient\Model\ChannelConfigControllingTheGateClosingRule|null $closingRule closingRule
     *
     * @return self
     */
    public function setClosingRule($closingRule)
    {
        $this->container['closingRule'] = $closingRule;

        return $this;
    }

    /**
     * Gets subfunction
     *
     * @return string|null
     */
    public function getSubfunction()
    {
        return $this->container['subfunction'];
    }

    /**
     * Sets subfunction
     *
     * @param string|null $subfunction Only for the `HVAC_THERMOSTAT` function.
     *
     * @return self
     */
    public function setSubfunction($subfunction)
    {
        $this->container['subfunction'] = $subfunction;

        return $this;
    }

    /**
     * Gets mainThermometerChannelId
     *
     * @return int|null
     */
    public function getMainThermometerChannelId()
    {
        return $this->container['mainThermometerChannelId'];
    }

    /**
     * Sets mainThermometerChannelId
     *
     * @param int|null $mainThermometerChannelId mainThermometerChannelId
     *
     * @return self
     */
    public function setMainThermometerChannelId($mainThermometerChannelId)
    {
        $this->container['mainThermometerChannelId'] = $mainThermometerChannelId;

        return $this;
    }

    /**
     * Gets auxThermometerChannelId
     *
     * @return int|null
     */
    public function getAuxThermometerChannelId()
    {
        return $this->container['auxThermometerChannelId'];
    }

    /**
     * Sets auxThermometerChannelId
     *
     * @param int|null $auxThermometerChannelId auxThermometerChannelId
     *
     * @return self
     */
    public function setAuxThermometerChannelId($auxThermometerChannelId)
    {
        $this->container['auxThermometerChannelId'] = $auxThermometerChannelId;

        return $this;
    }

    /**
     * Gets auxThermometerType
     *
     * @return string|null
     */
    public function getAuxThermometerType()
    {
        return $this->container['auxThermometerType'];
    }

    /**
     * Sets auxThermometerType
     *
     * @param string|null $auxThermometerType auxThermometerType
     *
     * @return self
     */
    public function setAuxThermometerType($auxThermometerType)
    {
        $this->container['auxThermometerType'] = $auxThermometerType;

        return $this;
    }

    /**
     * Gets binarySensorChannelId
     *
     * @return int|null
     */
    public function getBinarySensorChannelId()
    {
        return $this->container['binarySensorChannelId'];
    }

    /**
     * Sets binarySensorChannelId
     *
     * @param int|null $binarySensorChannelId binarySensorChannelId
     *
     * @return self
     */
    public function setBinarySensorChannelId($binarySensorChannelId)
    {
        $this->container['binarySensorChannelId'] = $binarySensorChannelId;

        return $this;
    }

    /**
     * Gets antiFreezeAndOverheatProtectionEnabled
     *
     * @return bool|null
     */
    public function getAntiFreezeAndOverheatProtectionEnabled()
    {
        return $this->container['antiFreezeAndOverheatProtectionEnabled'];
    }

    /**
     * Sets antiFreezeAndOverheatProtectionEnabled
     *
     * @param bool|null $antiFreezeAndOverheatProtectionEnabled antiFreezeAndOverheatProtectionEnabled
     *
     * @return self
     */
    public function setAntiFreezeAndOverheatProtectionEnabled($antiFreezeAndOverheatProtectionEnabled)
    {
        $this->container['antiFreezeAndOverheatProtectionEnabled'] = $antiFreezeAndOverheatProtectionEnabled;

        return $this;
    }

    /**
     * Gets auxMinMaxSetpointEnabled
     *
     * @return bool|null
     */
    public function getAuxMinMaxSetpointEnabled()
    {
        return $this->container['auxMinMaxSetpointEnabled'];
    }

    /**
     * Sets auxMinMaxSetpointEnabled
     *
     * @param bool|null $auxMinMaxSetpointEnabled auxMinMaxSetpointEnabled
     *
     * @return self
     */
    public function setAuxMinMaxSetpointEnabled($auxMinMaxSetpointEnabled)
    {
        $this->container['auxMinMaxSetpointEnabled'] = $auxMinMaxSetpointEnabled;

        return $this;
    }

    /**
     * Gets temperatureSetpointChangeSwitchesToManualMode
     *
     * @return bool|null
     */
    public function getTemperatureSetpointChangeSwitchesToManualMode()
    {
        return $this->container['temperatureSetpointChangeSwitchesToManualMode'];
    }

    /**
     * Sets temperatureSetpointChangeSwitchesToManualMode
     *
     * @param bool|null $temperatureSetpointChangeSwitchesToManualMode temperatureSetpointChangeSwitchesToManualMode
     *
     * @return self
     */
    public function setTemperatureSetpointChangeSwitchesToManualMode($temperatureSetpointChangeSwitchesToManualMode)
    {
        $this->container['temperatureSetpointChangeSwitchesToManualMode'] = $temperatureSetpointChangeSwitchesToManualMode;

        return $this;
    }

    /**
     * Gets availableAlgorithms
     *
     * @return string[]|null
     */
    public function getAvailableAlgorithms()
    {
        return $this->container['availableAlgorithms'];
    }

    /**
     * Sets availableAlgorithms
     *
     * @param string[]|null $availableAlgorithms availableAlgorithms
     *
     * @return self
     */
    public function setAvailableAlgorithms($availableAlgorithms)
    {
        $this->container['availableAlgorithms'] = $availableAlgorithms;

        return $this;
    }

    /**
     * Gets usedAlgorithm
     *
     * @return string|null
     */
    public function getUsedAlgorithm()
    {
        return $this->container['usedAlgorithm'];
    }

    /**
     * Sets usedAlgorithm
     *
     * @param string|null $usedAlgorithm usedAlgorithm
     *
     * @return self
     */
    public function setUsedAlgorithm($usedAlgorithm)
    {
        $this->container['usedAlgorithm'] = $usedAlgorithm;

        return $this;
    }

    /**
     * Gets temperatureControlType
     *
     * @return string|null
     */
    public function getTemperatureControlType()
    {
        return $this->container['temperatureControlType'];
    }

    /**
     * Sets temperatureControlType
     *
     * @param string|null $temperatureControlType temperatureControlType
     *
     * @return self
     */
    public function setTemperatureControlType($temperatureControlType)
    {
        $this->container['temperatureControlType'] = $temperatureControlType;

        return $this;
    }

    /**
     * Gets defaultTemperatureConstraintName
     *
     * @return string|null
     */
    public function getDefaultTemperatureConstraintName()
    {
        return $this->container['defaultTemperatureConstraintName'];
    }

    /**
     * Sets defaultTemperatureConstraintName
     *
     * @param string|null $defaultTemperatureConstraintName defaultTemperatureConstraintName
     *
     * @return self
     */
    public function setDefaultTemperatureConstraintName($defaultTemperatureConstraintName)
    {
        $this->container['defaultTemperatureConstraintName'] = $defaultTemperatureConstraintName;

        return $this;
    }

    /**
     * Gets minOnTimeS
     *
     * @return int|null
     */
    public function getMinOnTimeS()
    {
        return $this->container['minOnTimeS'];
    }

    /**
     * Sets minOnTimeS
     *
     * @param int|null $minOnTimeS minOnTimeS
     *
     * @return self
     */
    public function setMinOnTimeS($minOnTimeS)
    {

        if (!is_null($minOnTimeS) && ($minOnTimeS > 3600)) {
            throw new \InvalidArgumentException('invalid value for $minOnTimeS when calling ChannelConfig., must be smaller than or equal to 3600.');
        }
        if (!is_null($minOnTimeS) && ($minOnTimeS < 0)) {
            throw new \InvalidArgumentException('invalid value for $minOnTimeS when calling ChannelConfig., must be bigger than or equal to 0.');
        }

        $this->container['minOnTimeS'] = $minOnTimeS;

        return $this;
    }

    /**
     * Gets minOffTimeS
     *
     * @return int|null
     */
    public function getMinOffTimeS()
    {
        return $this->container['minOffTimeS'];
    }

    /**
     * Sets minOffTimeS
     *
     * @param int|null $minOffTimeS minOffTimeS
     *
     * @return self
     */
    public function setMinOffTimeS($minOffTimeS)
    {

        if (!is_null($minOffTimeS) && ($minOffTimeS > 3600)) {
            throw new \InvalidArgumentException('invalid value for $minOffTimeS when calling ChannelConfig., must be smaller than or equal to 3600.');
        }
        if (!is_null($minOffTimeS) && ($minOffTimeS < 0)) {
            throw new \InvalidArgumentException('invalid value for $minOffTimeS when calling ChannelConfig., must be bigger than or equal to 0.');
        }

        $this->container['minOffTimeS'] = $minOffTimeS;

        return $this;
    }

    /**
     * Gets outputValueOnError
     *
     * @return int|null
     */
    public function getOutputValueOnError()
    {
        return $this->container['outputValueOnError'];
    }

    /**
     * Sets outputValueOnError
     *
     * @param int|null $outputValueOnError outputValueOnError
     *
     * @return self
     */
    public function setOutputValueOnError($outputValueOnError)
    {

        if (!is_null($outputValueOnError) && ($outputValueOnError > 100)) {
            throw new \InvalidArgumentException('invalid value for $outputValueOnError when calling ChannelConfig., must be smaller than or equal to 100.');
        }
        if (!is_null($outputValueOnError) && ($outputValueOnError < -100)) {
            throw new \InvalidArgumentException('invalid value for $outputValueOnError when calling ChannelConfig., must be bigger than or equal to -100.');
        }

        $this->container['outputValueOnError'] = $outputValueOnError;

        return $this;
    }

    /**
     * Gets weeklySchedule
     *
     * @return \Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule|null
     */
    public function getWeeklySchedule()
    {
        return $this->container['weeklySchedule'];
    }

    /**
     * Sets weeklySchedule
     *
     * @param \Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule|null $weeklySchedule weeklySchedule
     *
     * @return self
     */
    public function setWeeklySchedule($weeklySchedule)
    {
        $this->container['weeklySchedule'] = $weeklySchedule;

        return $this;
    }

    /**
     * Gets altWeeklySchedule
     *
     * @return \Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule|null
     */
    public function getAltWeeklySchedule()
    {
        return $this->container['altWeeklySchedule'];
    }

    /**
     * Sets altWeeklySchedule
     *
     * @param \Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule|null $altWeeklySchedule altWeeklySchedule
     *
     * @return self
     */
    public function setAltWeeklySchedule($altWeeklySchedule)
    {
        $this->container['altWeeklySchedule'] = $altWeeklySchedule;

        return $this;
    }

    /**
     * Gets heatingModeAvailable
     *
     * @return bool|null
     */
    public function getHeatingModeAvailable()
    {
        return $this->container['heatingModeAvailable'];
    }

    /**
     * Sets heatingModeAvailable
     *
     * @param bool|null $heatingModeAvailable heatingModeAvailable
     *
     * @return self
     */
    public function setHeatingModeAvailable($heatingModeAvailable)
    {
        $this->container['heatingModeAvailable'] = $heatingModeAvailable;

        return $this;
    }

    /**
     * Gets coolingModeAvailable
     *
     * @return bool|null
     */
    public function getCoolingModeAvailable()
    {
        return $this->container['coolingModeAvailable'];
    }

    /**
     * Sets coolingModeAvailable
     *
     * @param bool|null $coolingModeAvailable coolingModeAvailable
     *
     * @return self
     */
    public function setCoolingModeAvailable($coolingModeAvailable)
    {
        $this->container['coolingModeAvailable'] = $coolingModeAvailable;

        return $this;
    }

    /**
     * Gets temperatures
     *
     * @return \Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatures|null
     */
    public function getTemperatures()
    {
        return $this->container['temperatures'];
    }

    /**
     * Sets temperatures
     *
     * @param \Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatures|null $temperatures temperatures
     *
     * @return self
     */
    public function setTemperatures($temperatures)
    {
        $this->container['temperatures'] = $temperatures;

        return $this;
    }

    /**
     * Gets temperatureConstraints
     *
     * @return \Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatureConstraints|null
     */
    public function getTemperatureConstraints()
    {
        return $this->container['temperatureConstraints'];
    }

    /**
     * Sets temperatureConstraints
     *
     * @param \Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatureConstraints|null $temperatureConstraints temperatureConstraints
     *
     * @return self
     */
    public function setTemperatureConstraints($temperatureConstraints)
    {
        $this->container['temperatureConstraints'] = $temperatureConstraints;

        return $this;
    }

    /**
     * Gets valueDivider
     *
     * @return float|null
     */
    public function getValueDivider()
    {
        return $this->container['valueDivider'];
    }

    /**
     * Sets valueDivider
     *
     * @param float|null $valueDivider valueDivider
     *
     * @return self
     */
    public function setValueDivider($valueDivider)
    {
        $this->container['valueDivider'] = $valueDivider;

        return $this;
    }

    /**
     * Gets valueMultiplier
     *
     * @return float|null
     */
    public function getValueMultiplier()
    {
        return $this->container['valueMultiplier'];
    }

    /**
     * Sets valueMultiplier
     *
     * @param float|null $valueMultiplier valueMultiplier
     *
     * @return self
     */
    public function setValueMultiplier($valueMultiplier)
    {
        $this->container['valueMultiplier'] = $valueMultiplier;

        return $this;
    }

    /**
     * Gets valueAdded
     *
     * @return float|null
     */
    public function getValueAdded()
    {
        return $this->container['valueAdded'];
    }

    /**
     * Sets valueAdded
     *
     * @param float|null $valueAdded valueAdded
     *
     * @return self
     */
    public function setValueAdded($valueAdded)
    {
        $this->container['valueAdded'] = $valueAdded;

        return $this;
    }

    /**
     * Gets valuePrecision
     *
     * @return int|null
     */
    public function getValuePrecision()
    {
        return $this->container['valuePrecision'];
    }

    /**
     * Sets valuePrecision
     *
     * @param int|null $valuePrecision valuePrecision
     *
     * @return self
     */
    public function setValuePrecision($valuePrecision)
    {
        $this->container['valuePrecision'] = $valuePrecision;

        return $this;
    }

    /**
     * Gets unitBeforeValue
     *
     * @return string|null
     */
    public function getUnitBeforeValue()
    {
        return $this->container['unitBeforeValue'];
    }

    /**
     * Sets unitBeforeValue
     *
     * @param string|null $unitBeforeValue unitBeforeValue
     *
     * @return self
     */
    public function setUnitBeforeValue($unitBeforeValue)
    {
        $this->container['unitBeforeValue'] = $unitBeforeValue;

        return $this;
    }

    /**
     * Gets unitAfterValue
     *
     * @return string|null
     */
    public function getUnitAfterValue()
    {
        return $this->container['unitAfterValue'];
    }

    /**
     * Sets unitAfterValue
     *
     * @param string|null $unitAfterValue unitAfterValue
     *
     * @return self
     */
    public function setUnitAfterValue($unitAfterValue)
    {
        $this->container['unitAfterValue'] = $unitAfterValue;

        return $this;
    }

    /**
     * Gets keepHistory
     *
     * @return bool|null
     */
    public function getKeepHistory()
    {
        return $this->container['keepHistory'];
    }

    /**
     * Sets keepHistory
     *
     * @param bool|null $keepHistory keepHistory
     *
     * @return self
     */
    public function setKeepHistory($keepHistory)
    {
        $this->container['keepHistory'] = $keepHistory;

        return $this;
    }

    /**
     * Gets chartType
     *
     * @return string|null
     */
    public function getChartType()
    {
        return $this->container['chartType'];
    }

    /**
     * Sets chartType
     *
     * @param string|null $chartType chartType
     *
     * @return self
     */
    public function setChartType($chartType)
    {
        $allowedValues = $this->getChartTypeAllowableValues();
        if (!is_null($chartType) && !in_array($chartType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'chartType', must be one of '%s'",
                    $chartType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['chartType'] = $chartType;

        return $this;
    }

    /**
     * Gets defaults
     *
     * @return \Supla\ApiClient\Model\ChannelConfigGeneralPurposeMeasurementDefaults|null
     */
    public function getDefaults()
    {
        return $this->container['defaults'];
    }

    /**
     * Sets defaults
     *
     * @param \Supla\ApiClient\Model\ChannelConfigGeneralPurposeMeasurementDefaults|null $defaults defaults
     *
     * @return self
     */
    public function setDefaults($defaults)
    {
        $this->container['defaults'] = $defaults;

        return $this;
    }

    /**
     * Gets includeValueAddedInHistory
     *
     * @return bool|null
     */
    public function getIncludeValueAddedInHistory()
    {
        return $this->container['includeValueAddedInHistory'];
    }

    /**
     * Sets includeValueAddedInHistory
     *
     * @param bool|null $includeValueAddedInHistory includeValueAddedInHistory
     *
     * @return self
     */
    public function setIncludeValueAddedInHistory($includeValueAddedInHistory)
    {
        $this->container['includeValueAddedInHistory'] = $includeValueAddedInHistory;

        return $this;
    }

    /**
     * Gets fillMissingData
     *
     * @return bool|null
     */
    public function getFillMissingData()
    {
        return $this->container['fillMissingData'];
    }

    /**
     * Sets fillMissingData
     *
     * @param bool|null $fillMissingData fillMissingData
     *
     * @return self
     */
    public function setFillMissingData($fillMissingData)
    {
        $this->container['fillMissingData'] = $fillMissingData;

        return $this;
    }

    /**
     * Gets allowCounterReset
     *
     * @return bool|null
     */
    public function getAllowCounterReset()
    {
        return $this->container['allowCounterReset'];
    }

    /**
     * Sets allowCounterReset
     *
     * @param bool|null $allowCounterReset allowCounterReset
     *
     * @return self
     */
    public function setAllowCounterReset($allowCounterReset)
    {
        $this->container['allowCounterReset'] = $allowCounterReset;

        return $this;
    }

    /**
     * Gets alwaysDecrement
     *
     * @return bool|null
     */
    public function getAlwaysDecrement()
    {
        return $this->container['alwaysDecrement'];
    }

    /**
     * Sets alwaysDecrement
     *
     * @param bool|null $alwaysDecrement alwaysDecrement
     *
     * @return self
     */
    public function setAlwaysDecrement($alwaysDecrement)
    {
        $this->container['alwaysDecrement'] = $alwaysDecrement;

        return $this;
    }

    /**
     * Gets bottomPosition
     *
     * @return int|null
     */
    public function getBottomPosition()
    {
        return $this->container['bottomPosition'];
    }

    /**
     * Sets bottomPosition
     *
     * @param int|null $bottomPosition bottomPosition
     *
     * @return self
     */
    public function setBottomPosition($bottomPosition)
    {
        $this->container['bottomPosition'] = $bottomPosition;

        return $this;
    }

    /**
     * Gets openingTimeS
     *
     * @return float|null
     */
    public function getOpeningTimeS()
    {
        return $this->container['openingTimeS'];
    }

    /**
     * Sets openingTimeS
     *
     * @param float|null $openingTimeS openingTimeS
     *
     * @return self
     */
    public function setOpeningTimeS($openingTimeS)
    {
        $this->container['openingTimeS'] = $openingTimeS;

        return $this;
    }

    /**
     * Gets closingTimeS
     *
     * @return float|null
     */
    public function getClosingTimeS()
    {
        return $this->container['closingTimeS'];
    }

    /**
     * Sets closingTimeS
     *
     * @param float|null $closingTimeS closingTimeS
     *
     * @return self
     */
    public function setClosingTimeS($closingTimeS)
    {
        $this->container['closingTimeS'] = $closingTimeS;

        return $this;
    }

    /**
     * Gets recalibrateAvailable
     *
     * @return bool|null
     */
    public function getRecalibrateAvailable()
    {
        return $this->container['recalibrateAvailable'];
    }

    /**
     * Sets recalibrateAvailable
     *
     * @param bool|null $recalibrateAvailable recalibrateAvailable
     *
     * @return self
     */
    public function setRecalibrateAvailable($recalibrateAvailable)
    {
        $this->container['recalibrateAvailable'] = $recalibrateAvailable;

        return $this;
    }

    /**
     * Gets autoCalibrationAvailable
     *
     * @return bool|null
     */
    public function getAutoCalibrationAvailable()
    {
        return $this->container['autoCalibrationAvailable'];
    }

    /**
     * Sets autoCalibrationAvailable
     *
     * @param bool|null $autoCalibrationAvailable autoCalibrationAvailable
     *
     * @return self
     */
    public function setAutoCalibrationAvailable($autoCalibrationAvailable)
    {
        $this->container['autoCalibrationAvailable'] = $autoCalibrationAvailable;

        return $this;
    }

    /**
     * Gets motorUpsideDown
     *
     * @return bool|null
     */
    public function getMotorUpsideDown()
    {
        return $this->container['motorUpsideDown'];
    }

    /**
     * Sets motorUpsideDown
     *
     * @param bool|null $motorUpsideDown motorUpsideDown
     *
     * @return self
     */
    public function setMotorUpsideDown($motorUpsideDown)
    {
        $this->container['motorUpsideDown'] = $motorUpsideDown;

        return $this;
    }

    /**
     * Gets buttonsUpsideDown
     *
     * @return bool|null
     */
    public function getButtonsUpsideDown()
    {
        return $this->container['buttonsUpsideDown'];
    }

    /**
     * Sets buttonsUpsideDown
     *
     * @param bool|null $buttonsUpsideDown buttonsUpsideDown
     *
     * @return self
     */
    public function setButtonsUpsideDown($buttonsUpsideDown)
    {
        $this->container['buttonsUpsideDown'] = $buttonsUpsideDown;

        return $this;
    }

    /**
     * Gets timeMargin
     *
     * @return OneOfIntegerString|null
     */
    public function getTimeMargin()
    {
        return $this->container['timeMargin'];
    }

    /**
     * Sets timeMargin
     *
     * @param OneOfIntegerString|null $timeMargin timeMargin
     *
     * @return self
     */
    public function setTimeMargin($timeMargin)
    {
        $this->container['timeMargin'] = $timeMargin;

        return $this;
    }

    /**
     * Gets tiltingTimeS
     *
     * @return float|null
     */
    public function getTiltingTimeS()
    {
        return $this->container['tiltingTimeS'];
    }

    /**
     * Sets tiltingTimeS
     *
     * @param float|null $tiltingTimeS tiltingTimeS
     *
     * @return self
     */
    public function setTiltingTimeS($tiltingTimeS)
    {
        $this->container['tiltingTimeS'] = $tiltingTimeS;

        return $this;
    }

    /**
     * Gets tiltControlType
     *
     * @return string|null
     */
    public function getTiltControlType()
    {
        return $this->container['tiltControlType'];
    }

    /**
     * Sets tiltControlType
     *
     * @param string|null $tiltControlType tiltControlType
     *
     * @return self
     */
    public function setTiltControlType($tiltControlType)
    {
        $this->container['tiltControlType'] = $tiltControlType;

        return $this;
    }

    /**
     * Gets tilt0Angle
     *
     * @return int|null
     */
    public function getTilt0Angle()
    {
        return $this->container['tilt0Angle'];
    }

    /**
     * Sets tilt0Angle
     *
     * @param int|null $tilt0Angle tilt0Angle
     *
     * @return self
     */
    public function setTilt0Angle($tilt0Angle)
    {
        $this->container['tilt0Angle'] = $tilt0Angle;

        return $this;
    }

    /**
     * Gets tilt100Angle
     *
     * @return int|null
     */
    public function getTilt100Angle()
    {
        return $this->container['tilt100Angle'];
    }

    /**
     * Sets tilt100Angle
     *
     * @param int|null $tilt100Angle tilt100Angle
     *
     * @return self
     */
    public function setTilt100Angle($tilt100Angle)
    {
        $this->container['tilt100Angle'] = $tilt100Angle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


