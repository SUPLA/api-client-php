<?php
/**
 * ChannelConfigHvacThermostat
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelConfigHvacThermostat Class Doc Comment
 *
 * @category Class
 * @description Config for HVAC Thermostat.
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChannelConfigHvacThermostat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelConfigHvacThermostat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subfunction' => 'string',
        'mainThermometerChannelId' => 'int',
        'auxThermometerChannelId' => 'int',
        'auxThermometerType' => 'string',
        'binarySensorChannelId' => 'int',
        'antiFreezeAndOverheatProtectionEnabled' => 'bool',
        'auxMinMaxSetpointEnabled' => 'bool',
        'temperatureSetpointChangeSwitchesToManualMode' => 'bool',
        'availableAlgorithms' => 'string[]',
        'usedAlgorithm' => 'string',
        'temperatureControlType' => 'string',
        'defaultTemperatureConstraintName' => 'string',
        'minOnTimeS' => 'int',
        'minOffTimeS' => 'int',
        'outputValueOnError' => 'int',
        'weeklySchedule' => '\Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule',
        'altWeeklySchedule' => '\Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule',
        'heatingModeAvailable' => 'bool',
        'coolingModeAvailable' => 'bool',
        'temperatures' => '\Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatures',
        'temperatureConstraints' => '\Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatureConstraints'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subfunction' => null,
        'mainThermometerChannelId' => null,
        'auxThermometerChannelId' => null,
        'auxThermometerType' => null,
        'binarySensorChannelId' => null,
        'antiFreezeAndOverheatProtectionEnabled' => null,
        'auxMinMaxSetpointEnabled' => null,
        'temperatureSetpointChangeSwitchesToManualMode' => null,
        'availableAlgorithms' => null,
        'usedAlgorithm' => null,
        'temperatureControlType' => null,
        'defaultTemperatureConstraintName' => null,
        'minOnTimeS' => null,
        'minOffTimeS' => null,
        'outputValueOnError' => null,
        'weeklySchedule' => null,
        'altWeeklySchedule' => null,
        'heatingModeAvailable' => null,
        'coolingModeAvailable' => null,
        'temperatures' => null,
        'temperatureConstraints' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subfunction' => false,
        'mainThermometerChannelId' => false,
        'auxThermometerChannelId' => false,
        'auxThermometerType' => false,
        'binarySensorChannelId' => false,
        'antiFreezeAndOverheatProtectionEnabled' => false,
        'auxMinMaxSetpointEnabled' => false,
        'temperatureSetpointChangeSwitchesToManualMode' => false,
        'availableAlgorithms' => false,
        'usedAlgorithm' => false,
        'temperatureControlType' => false,
        'defaultTemperatureConstraintName' => false,
        'minOnTimeS' => false,
        'minOffTimeS' => false,
        'outputValueOnError' => false,
        'weeklySchedule' => false,
        'altWeeklySchedule' => false,
        'heatingModeAvailable' => false,
        'coolingModeAvailable' => false,
        'temperatures' => false,
        'temperatureConstraints' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subfunction' => 'subfunction',
        'mainThermometerChannelId' => 'mainThermometerChannelId',
        'auxThermometerChannelId' => 'auxThermometerChannelId',
        'auxThermometerType' => 'auxThermometerType',
        'binarySensorChannelId' => 'binarySensorChannelId',
        'antiFreezeAndOverheatProtectionEnabled' => 'antiFreezeAndOverheatProtectionEnabled',
        'auxMinMaxSetpointEnabled' => 'auxMinMaxSetpointEnabled',
        'temperatureSetpointChangeSwitchesToManualMode' => 'temperatureSetpointChangeSwitchesToManualMode',
        'availableAlgorithms' => 'availableAlgorithms',
        'usedAlgorithm' => 'usedAlgorithm',
        'temperatureControlType' => 'temperatureControlType',
        'defaultTemperatureConstraintName' => 'defaultTemperatureConstraintName',
        'minOnTimeS' => 'minOnTimeS',
        'minOffTimeS' => 'minOffTimeS',
        'outputValueOnError' => 'outputValueOnError',
        'weeklySchedule' => 'weeklySchedule',
        'altWeeklySchedule' => 'altWeeklySchedule',
        'heatingModeAvailable' => 'heatingModeAvailable',
        'coolingModeAvailable' => 'coolingModeAvailable',
        'temperatures' => 'temperatures',
        'temperatureConstraints' => 'temperatureConstraints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subfunction' => 'setSubfunction',
        'mainThermometerChannelId' => 'setMainThermometerChannelId',
        'auxThermometerChannelId' => 'setAuxThermometerChannelId',
        'auxThermometerType' => 'setAuxThermometerType',
        'binarySensorChannelId' => 'setBinarySensorChannelId',
        'antiFreezeAndOverheatProtectionEnabled' => 'setAntiFreezeAndOverheatProtectionEnabled',
        'auxMinMaxSetpointEnabled' => 'setAuxMinMaxSetpointEnabled',
        'temperatureSetpointChangeSwitchesToManualMode' => 'setTemperatureSetpointChangeSwitchesToManualMode',
        'availableAlgorithms' => 'setAvailableAlgorithms',
        'usedAlgorithm' => 'setUsedAlgorithm',
        'temperatureControlType' => 'setTemperatureControlType',
        'defaultTemperatureConstraintName' => 'setDefaultTemperatureConstraintName',
        'minOnTimeS' => 'setMinOnTimeS',
        'minOffTimeS' => 'setMinOffTimeS',
        'outputValueOnError' => 'setOutputValueOnError',
        'weeklySchedule' => 'setWeeklySchedule',
        'altWeeklySchedule' => 'setAltWeeklySchedule',
        'heatingModeAvailable' => 'setHeatingModeAvailable',
        'coolingModeAvailable' => 'setCoolingModeAvailable',
        'temperatures' => 'setTemperatures',
        'temperatureConstraints' => 'setTemperatureConstraints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subfunction' => 'getSubfunction',
        'mainThermometerChannelId' => 'getMainThermometerChannelId',
        'auxThermometerChannelId' => 'getAuxThermometerChannelId',
        'auxThermometerType' => 'getAuxThermometerType',
        'binarySensorChannelId' => 'getBinarySensorChannelId',
        'antiFreezeAndOverheatProtectionEnabled' => 'getAntiFreezeAndOverheatProtectionEnabled',
        'auxMinMaxSetpointEnabled' => 'getAuxMinMaxSetpointEnabled',
        'temperatureSetpointChangeSwitchesToManualMode' => 'getTemperatureSetpointChangeSwitchesToManualMode',
        'availableAlgorithms' => 'getAvailableAlgorithms',
        'usedAlgorithm' => 'getUsedAlgorithm',
        'temperatureControlType' => 'getTemperatureControlType',
        'defaultTemperatureConstraintName' => 'getDefaultTemperatureConstraintName',
        'minOnTimeS' => 'getMinOnTimeS',
        'minOffTimeS' => 'getMinOffTimeS',
        'outputValueOnError' => 'getOutputValueOnError',
        'weeklySchedule' => 'getWeeklySchedule',
        'altWeeklySchedule' => 'getAltWeeklySchedule',
        'heatingModeAvailable' => 'getHeatingModeAvailable',
        'coolingModeAvailable' => 'getCoolingModeAvailable',
        'temperatures' => 'getTemperatures',
        'temperatureConstraints' => 'getTemperatureConstraints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('subfunction', $data ?? [], null);
        $this->setIfExists('mainThermometerChannelId', $data ?? [], null);
        $this->setIfExists('auxThermometerChannelId', $data ?? [], null);
        $this->setIfExists('auxThermometerType', $data ?? [], null);
        $this->setIfExists('binarySensorChannelId', $data ?? [], null);
        $this->setIfExists('antiFreezeAndOverheatProtectionEnabled', $data ?? [], null);
        $this->setIfExists('auxMinMaxSetpointEnabled', $data ?? [], null);
        $this->setIfExists('temperatureSetpointChangeSwitchesToManualMode', $data ?? [], null);
        $this->setIfExists('availableAlgorithms', $data ?? [], null);
        $this->setIfExists('usedAlgorithm', $data ?? [], null);
        $this->setIfExists('temperatureControlType', $data ?? [], null);
        $this->setIfExists('defaultTemperatureConstraintName', $data ?? [], null);
        $this->setIfExists('minOnTimeS', $data ?? [], null);
        $this->setIfExists('minOffTimeS', $data ?? [], null);
        $this->setIfExists('outputValueOnError', $data ?? [], null);
        $this->setIfExists('weeklySchedule', $data ?? [], null);
        $this->setIfExists('altWeeklySchedule', $data ?? [], null);
        $this->setIfExists('heatingModeAvailable', $data ?? [], null);
        $this->setIfExists('coolingModeAvailable', $data ?? [], null);
        $this->setIfExists('temperatures', $data ?? [], null);
        $this->setIfExists('temperatureConstraints', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['minOnTimeS']) && ($this->container['minOnTimeS'] > 3600)) {
            $invalidProperties[] = "invalid value for 'minOnTimeS', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['minOnTimeS']) && ($this->container['minOnTimeS'] < 0)) {
            $invalidProperties[] = "invalid value for 'minOnTimeS', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['minOffTimeS']) && ($this->container['minOffTimeS'] > 3600)) {
            $invalidProperties[] = "invalid value for 'minOffTimeS', must be smaller than or equal to 3600.";
        }

        if (!is_null($this->container['minOffTimeS']) && ($this->container['minOffTimeS'] < 0)) {
            $invalidProperties[] = "invalid value for 'minOffTimeS', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['outputValueOnError']) && ($this->container['outputValueOnError'] > 100)) {
            $invalidProperties[] = "invalid value for 'outputValueOnError', must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['outputValueOnError']) && ($this->container['outputValueOnError'] < -100)) {
            $invalidProperties[] = "invalid value for 'outputValueOnError', must be bigger than or equal to -100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subfunction
     *
     * @return string|null
     */
    public function getSubfunction()
    {
        return $this->container['subfunction'];
    }

    /**
     * Sets subfunction
     *
     * @param string|null $subfunction Only for the `HVAC_THERMOSTAT` function.
     *
     * @return self
     */
    public function setSubfunction($subfunction)
    {
        if (is_null($subfunction)) {
            throw new \InvalidArgumentException('non-nullable subfunction cannot be null');
        }
        $this->container['subfunction'] = $subfunction;

        return $this;
    }

    /**
     * Gets mainThermometerChannelId
     *
     * @return int|null
     */
    public function getMainThermometerChannelId()
    {
        return $this->container['mainThermometerChannelId'];
    }

    /**
     * Sets mainThermometerChannelId
     *
     * @param int|null $mainThermometerChannelId mainThermometerChannelId
     *
     * @return self
     */
    public function setMainThermometerChannelId($mainThermometerChannelId)
    {
        if (is_null($mainThermometerChannelId)) {
            throw new \InvalidArgumentException('non-nullable mainThermometerChannelId cannot be null');
        }
        $this->container['mainThermometerChannelId'] = $mainThermometerChannelId;

        return $this;
    }

    /**
     * Gets auxThermometerChannelId
     *
     * @return int|null
     */
    public function getAuxThermometerChannelId()
    {
        return $this->container['auxThermometerChannelId'];
    }

    /**
     * Sets auxThermometerChannelId
     *
     * @param int|null $auxThermometerChannelId auxThermometerChannelId
     *
     * @return self
     */
    public function setAuxThermometerChannelId($auxThermometerChannelId)
    {
        if (is_null($auxThermometerChannelId)) {
            throw new \InvalidArgumentException('non-nullable auxThermometerChannelId cannot be null');
        }
        $this->container['auxThermometerChannelId'] = $auxThermometerChannelId;

        return $this;
    }

    /**
     * Gets auxThermometerType
     *
     * @return string|null
     */
    public function getAuxThermometerType()
    {
        return $this->container['auxThermometerType'];
    }

    /**
     * Sets auxThermometerType
     *
     * @param string|null $auxThermometerType auxThermometerType
     *
     * @return self
     */
    public function setAuxThermometerType($auxThermometerType)
    {
        if (is_null($auxThermometerType)) {
            throw new \InvalidArgumentException('non-nullable auxThermometerType cannot be null');
        }
        $this->container['auxThermometerType'] = $auxThermometerType;

        return $this;
    }

    /**
     * Gets binarySensorChannelId
     *
     * @return int|null
     */
    public function getBinarySensorChannelId()
    {
        return $this->container['binarySensorChannelId'];
    }

    /**
     * Sets binarySensorChannelId
     *
     * @param int|null $binarySensorChannelId binarySensorChannelId
     *
     * @return self
     */
    public function setBinarySensorChannelId($binarySensorChannelId)
    {
        if (is_null($binarySensorChannelId)) {
            throw new \InvalidArgumentException('non-nullable binarySensorChannelId cannot be null');
        }
        $this->container['binarySensorChannelId'] = $binarySensorChannelId;

        return $this;
    }

    /**
     * Gets antiFreezeAndOverheatProtectionEnabled
     *
     * @return bool|null
     */
    public function getAntiFreezeAndOverheatProtectionEnabled()
    {
        return $this->container['antiFreezeAndOverheatProtectionEnabled'];
    }

    /**
     * Sets antiFreezeAndOverheatProtectionEnabled
     *
     * @param bool|null $antiFreezeAndOverheatProtectionEnabled antiFreezeAndOverheatProtectionEnabled
     *
     * @return self
     */
    public function setAntiFreezeAndOverheatProtectionEnabled($antiFreezeAndOverheatProtectionEnabled)
    {
        if (is_null($antiFreezeAndOverheatProtectionEnabled)) {
            throw new \InvalidArgumentException('non-nullable antiFreezeAndOverheatProtectionEnabled cannot be null');
        }
        $this->container['antiFreezeAndOverheatProtectionEnabled'] = $antiFreezeAndOverheatProtectionEnabled;

        return $this;
    }

    /**
     * Gets auxMinMaxSetpointEnabled
     *
     * @return bool|null
     */
    public function getAuxMinMaxSetpointEnabled()
    {
        return $this->container['auxMinMaxSetpointEnabled'];
    }

    /**
     * Sets auxMinMaxSetpointEnabled
     *
     * @param bool|null $auxMinMaxSetpointEnabled auxMinMaxSetpointEnabled
     *
     * @return self
     */
    public function setAuxMinMaxSetpointEnabled($auxMinMaxSetpointEnabled)
    {
        if (is_null($auxMinMaxSetpointEnabled)) {
            throw new \InvalidArgumentException('non-nullable auxMinMaxSetpointEnabled cannot be null');
        }
        $this->container['auxMinMaxSetpointEnabled'] = $auxMinMaxSetpointEnabled;

        return $this;
    }

    /**
     * Gets temperatureSetpointChangeSwitchesToManualMode
     *
     * @return bool|null
     */
    public function getTemperatureSetpointChangeSwitchesToManualMode()
    {
        return $this->container['temperatureSetpointChangeSwitchesToManualMode'];
    }

    /**
     * Sets temperatureSetpointChangeSwitchesToManualMode
     *
     * @param bool|null $temperatureSetpointChangeSwitchesToManualMode temperatureSetpointChangeSwitchesToManualMode
     *
     * @return self
     */
    public function setTemperatureSetpointChangeSwitchesToManualMode($temperatureSetpointChangeSwitchesToManualMode)
    {
        if (is_null($temperatureSetpointChangeSwitchesToManualMode)) {
            throw new \InvalidArgumentException('non-nullable temperatureSetpointChangeSwitchesToManualMode cannot be null');
        }
        $this->container['temperatureSetpointChangeSwitchesToManualMode'] = $temperatureSetpointChangeSwitchesToManualMode;

        return $this;
    }

    /**
     * Gets availableAlgorithms
     *
     * @return string[]|null
     */
    public function getAvailableAlgorithms()
    {
        return $this->container['availableAlgorithms'];
    }

    /**
     * Sets availableAlgorithms
     *
     * @param string[]|null $availableAlgorithms availableAlgorithms
     *
     * @return self
     */
    public function setAvailableAlgorithms($availableAlgorithms)
    {
        if (is_null($availableAlgorithms)) {
            throw new \InvalidArgumentException('non-nullable availableAlgorithms cannot be null');
        }
        $this->container['availableAlgorithms'] = $availableAlgorithms;

        return $this;
    }

    /**
     * Gets usedAlgorithm
     *
     * @return string|null
     */
    public function getUsedAlgorithm()
    {
        return $this->container['usedAlgorithm'];
    }

    /**
     * Sets usedAlgorithm
     *
     * @param string|null $usedAlgorithm usedAlgorithm
     *
     * @return self
     */
    public function setUsedAlgorithm($usedAlgorithm)
    {
        if (is_null($usedAlgorithm)) {
            throw new \InvalidArgumentException('non-nullable usedAlgorithm cannot be null');
        }
        $this->container['usedAlgorithm'] = $usedAlgorithm;

        return $this;
    }

    /**
     * Gets temperatureControlType
     *
     * @return string|null
     */
    public function getTemperatureControlType()
    {
        return $this->container['temperatureControlType'];
    }

    /**
     * Sets temperatureControlType
     *
     * @param string|null $temperatureControlType temperatureControlType
     *
     * @return self
     */
    public function setTemperatureControlType($temperatureControlType)
    {
        if (is_null($temperatureControlType)) {
            throw new \InvalidArgumentException('non-nullable temperatureControlType cannot be null');
        }
        $this->container['temperatureControlType'] = $temperatureControlType;

        return $this;
    }

    /**
     * Gets defaultTemperatureConstraintName
     *
     * @return string|null
     */
    public function getDefaultTemperatureConstraintName()
    {
        return $this->container['defaultTemperatureConstraintName'];
    }

    /**
     * Sets defaultTemperatureConstraintName
     *
     * @param string|null $defaultTemperatureConstraintName defaultTemperatureConstraintName
     *
     * @return self
     */
    public function setDefaultTemperatureConstraintName($defaultTemperatureConstraintName)
    {
        if (is_null($defaultTemperatureConstraintName)) {
            throw new \InvalidArgumentException('non-nullable defaultTemperatureConstraintName cannot be null');
        }
        $this->container['defaultTemperatureConstraintName'] = $defaultTemperatureConstraintName;

        return $this;
    }

    /**
     * Gets minOnTimeS
     *
     * @return int|null
     */
    public function getMinOnTimeS()
    {
        return $this->container['minOnTimeS'];
    }

    /**
     * Sets minOnTimeS
     *
     * @param int|null $minOnTimeS minOnTimeS
     *
     * @return self
     */
    public function setMinOnTimeS($minOnTimeS)
    {
        if (is_null($minOnTimeS)) {
            throw new \InvalidArgumentException('non-nullable minOnTimeS cannot be null');
        }

        if (($minOnTimeS > 3600)) {
            throw new \InvalidArgumentException('invalid value for $minOnTimeS when calling ChannelConfigHvacThermostat., must be smaller than or equal to 3600.');
        }
        if (($minOnTimeS < 0)) {
            throw new \InvalidArgumentException('invalid value for $minOnTimeS when calling ChannelConfigHvacThermostat., must be bigger than or equal to 0.');
        }

        $this->container['minOnTimeS'] = $minOnTimeS;

        return $this;
    }

    /**
     * Gets minOffTimeS
     *
     * @return int|null
     */
    public function getMinOffTimeS()
    {
        return $this->container['minOffTimeS'];
    }

    /**
     * Sets minOffTimeS
     *
     * @param int|null $minOffTimeS minOffTimeS
     *
     * @return self
     */
    public function setMinOffTimeS($minOffTimeS)
    {
        if (is_null($minOffTimeS)) {
            throw new \InvalidArgumentException('non-nullable minOffTimeS cannot be null');
        }

        if (($minOffTimeS > 3600)) {
            throw new \InvalidArgumentException('invalid value for $minOffTimeS when calling ChannelConfigHvacThermostat., must be smaller than or equal to 3600.');
        }
        if (($minOffTimeS < 0)) {
            throw new \InvalidArgumentException('invalid value for $minOffTimeS when calling ChannelConfigHvacThermostat., must be bigger than or equal to 0.');
        }

        $this->container['minOffTimeS'] = $minOffTimeS;

        return $this;
    }

    /**
     * Gets outputValueOnError
     *
     * @return int|null
     */
    public function getOutputValueOnError()
    {
        return $this->container['outputValueOnError'];
    }

    /**
     * Sets outputValueOnError
     *
     * @param int|null $outputValueOnError outputValueOnError
     *
     * @return self
     */
    public function setOutputValueOnError($outputValueOnError)
    {
        if (is_null($outputValueOnError)) {
            throw new \InvalidArgumentException('non-nullable outputValueOnError cannot be null');
        }

        if (($outputValueOnError > 100)) {
            throw new \InvalidArgumentException('invalid value for $outputValueOnError when calling ChannelConfigHvacThermostat., must be smaller than or equal to 100.');
        }
        if (($outputValueOnError < -100)) {
            throw new \InvalidArgumentException('invalid value for $outputValueOnError when calling ChannelConfigHvacThermostat., must be bigger than or equal to -100.');
        }

        $this->container['outputValueOnError'] = $outputValueOnError;

        return $this;
    }

    /**
     * Gets weeklySchedule
     *
     * @return \Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule|null
     */
    public function getWeeklySchedule()
    {
        return $this->container['weeklySchedule'];
    }

    /**
     * Sets weeklySchedule
     *
     * @param \Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule|null $weeklySchedule weeklySchedule
     *
     * @return self
     */
    public function setWeeklySchedule($weeklySchedule)
    {
        if (is_null($weeklySchedule)) {
            throw new \InvalidArgumentException('non-nullable weeklySchedule cannot be null');
        }
        $this->container['weeklySchedule'] = $weeklySchedule;

        return $this;
    }

    /**
     * Gets altWeeklySchedule
     *
     * @return \Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule|null
     */
    public function getAltWeeklySchedule()
    {
        return $this->container['altWeeklySchedule'];
    }

    /**
     * Sets altWeeklySchedule
     *
     * @param \Supla\ApiClient\Model\ChannelConfigHvacThermostatSchedule|null $altWeeklySchedule altWeeklySchedule
     *
     * @return self
     */
    public function setAltWeeklySchedule($altWeeklySchedule)
    {
        if (is_null($altWeeklySchedule)) {
            throw new \InvalidArgumentException('non-nullable altWeeklySchedule cannot be null');
        }
        $this->container['altWeeklySchedule'] = $altWeeklySchedule;

        return $this;
    }

    /**
     * Gets heatingModeAvailable
     *
     * @return bool|null
     */
    public function getHeatingModeAvailable()
    {
        return $this->container['heatingModeAvailable'];
    }

    /**
     * Sets heatingModeAvailable
     *
     * @param bool|null $heatingModeAvailable heatingModeAvailable
     *
     * @return self
     */
    public function setHeatingModeAvailable($heatingModeAvailable)
    {
        if (is_null($heatingModeAvailable)) {
            throw new \InvalidArgumentException('non-nullable heatingModeAvailable cannot be null');
        }
        $this->container['heatingModeAvailable'] = $heatingModeAvailable;

        return $this;
    }

    /**
     * Gets coolingModeAvailable
     *
     * @return bool|null
     */
    public function getCoolingModeAvailable()
    {
        return $this->container['coolingModeAvailable'];
    }

    /**
     * Sets coolingModeAvailable
     *
     * @param bool|null $coolingModeAvailable coolingModeAvailable
     *
     * @return self
     */
    public function setCoolingModeAvailable($coolingModeAvailable)
    {
        if (is_null($coolingModeAvailable)) {
            throw new \InvalidArgumentException('non-nullable coolingModeAvailable cannot be null');
        }
        $this->container['coolingModeAvailable'] = $coolingModeAvailable;

        return $this;
    }

    /**
     * Gets temperatures
     *
     * @return \Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatures|null
     */
    public function getTemperatures()
    {
        return $this->container['temperatures'];
    }

    /**
     * Sets temperatures
     *
     * @param \Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatures|null $temperatures temperatures
     *
     * @return self
     */
    public function setTemperatures($temperatures)
    {
        if (is_null($temperatures)) {
            throw new \InvalidArgumentException('non-nullable temperatures cannot be null');
        }
        $this->container['temperatures'] = $temperatures;

        return $this;
    }

    /**
     * Gets temperatureConstraints
     *
     * @return \Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatureConstraints|null
     */
    public function getTemperatureConstraints()
    {
        return $this->container['temperatureConstraints'];
    }

    /**
     * Sets temperatureConstraints
     *
     * @param \Supla\ApiClient\Model\ChannelConfigHvacThermostatTemperatureConstraints|null $temperatureConstraints temperatureConstraints
     *
     * @return self
     */
    public function setTemperatureConstraints($temperatureConstraints)
    {
        if (is_null($temperatureConstraints)) {
            throw new \InvalidArgumentException('non-nullable temperatureConstraints cannot be null');
        }
        $this->container['temperatureConstraints'] = $temperatureConstraints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


