<?php
/**
 * ChannelsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.05
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Supla\ApiClient\ApiException;
use Supla\ApiClient\Configuration;
use Supla\ApiClient\HeaderSelector;
use Supla\ApiClient\ObjectSerializer;

/**
 * ChannelsApi Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ChannelsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation configureChannel
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject2 $inlineObject2 inlineObject2 (required)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\Channel
     */
    public function configureChannel($id, $inlineObject2)
    {
        list($response) = $this->configureChannelWithHttpInfo($id, $inlineObject2);
        return $response;
    }

    /**
     * Operation configureChannelWithHttpInfo
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject2 $inlineObject2 (required)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\Channel, HTTP status code, HTTP response headers (array of strings)
     */
    public function configureChannelWithHttpInfo($id, $inlineObject2)
    {
        $request = $this->configureChannelRequest($id, $inlineObject2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\Channel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\Channel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Supla\ApiClient\Model\Channel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\Channel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation configureChannelAsync
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject2 $inlineObject2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configureChannelAsync($id, $inlineObject2)
    {
        return $this->configureChannelAsyncWithHttpInfo($id, $inlineObject2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation configureChannelAsyncWithHttpInfo
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject2 $inlineObject2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configureChannelAsyncWithHttpInfo($id, $inlineObject2)
    {
        $returnType = '\Supla\ApiClient\Model\Channel';
        $request = $this->configureChannelRequest($id, $inlineObject2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'configureChannel'
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject2 $inlineObject2 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function configureChannelRequest($id, $inlineObject2)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling configureChannel'
            );
        }
        // verify the required parameter 'inlineObject2' is set
        if ($inlineObject2 === null || (is_array($inlineObject2) && count($inlineObject2) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inlineObject2 when calling configureChannel'
            );
        }

        $resourcePath = '/channels/{id}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inlineObject2)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inlineObject2));
            } else {
                $httpBody = $inlineObject2;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteChannelMeasurementLogs
     *
     * Delete channel measurement logs.
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteChannelMeasurementLogs($channel, $logsType = null)
    {
        $this->deleteChannelMeasurementLogsWithHttpInfo($channel, $logsType);
    }

    /**
     * Operation deleteChannelMeasurementLogsWithHttpInfo
     *
     * Delete channel measurement logs.
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteChannelMeasurementLogsWithHttpInfo($channel, $logsType = null)
    {
        $request = $this->deleteChannelMeasurementLogsRequest($channel, $logsType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteChannelMeasurementLogsAsync
     *
     * Delete channel measurement logs.
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChannelMeasurementLogsAsync($channel, $logsType = null)
    {
        return $this->deleteChannelMeasurementLogsAsyncWithHttpInfo($channel, $logsType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteChannelMeasurementLogsAsyncWithHttpInfo
     *
     * Delete channel measurement logs.
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteChannelMeasurementLogsAsyncWithHttpInfo($channel, $logsType = null)
    {
        $returnType = '';
        $request = $this->deleteChannelMeasurementLogsRequest($channel, $logsType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteChannelMeasurementLogs'
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteChannelMeasurementLogsRequest($channel, $logsType = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling deleteChannelMeasurementLogs'
            );
        }

        $resourcePath = '/channels/{channel}/measurement-logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($logsType !== null) {
            if('form' === 'form' && is_array($logsType)) {
                foreach($logsType as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logsType'] = $logsType;
            }
        }


        // path params
        if ($channel !== null) {
            $resourcePath = str_replace(
                '{' . 'channel' . '}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadChannelMeasurementLogs
     *
     * Get measurement logs as a zipped CSV file.
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function downloadChannelMeasurementLogs($channel, $logsType = null)
    {
        $this->downloadChannelMeasurementLogsWithHttpInfo($channel, $logsType);
    }

    /**
     * Operation downloadChannelMeasurementLogsWithHttpInfo
     *
     * Get measurement logs as a zipped CSV file.
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadChannelMeasurementLogsWithHttpInfo($channel, $logsType = null)
    {
        $request = $this->downloadChannelMeasurementLogsRequest($channel, $logsType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadChannelMeasurementLogsAsync
     *
     * Get measurement logs as a zipped CSV file.
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadChannelMeasurementLogsAsync($channel, $logsType = null)
    {
        return $this->downloadChannelMeasurementLogsAsyncWithHttpInfo($channel, $logsType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadChannelMeasurementLogsAsyncWithHttpInfo
     *
     * Get measurement logs as a zipped CSV file.
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadChannelMeasurementLogsAsyncWithHttpInfo($channel, $logsType = null)
    {
        $returnType = '';
        $request = $this->downloadChannelMeasurementLogsRequest($channel, $logsType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadChannelMeasurementLogs'
     *
     * @param  int $channel ID (required)
     * @param  string $logsType Type of the logs to delete. Some devices may gather multiple log types. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadChannelMeasurementLogsRequest($channel, $logsType = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling downloadChannelMeasurementLogs'
            );
        }

        $resourcePath = '/channels/{channel}/measurement-logs-download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($logsType !== null) {
            if('form' === 'form' && is_array($logsType)) {
                foreach($logsType as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logsType'] = $logsType;
            }
        }


        // path params
        if ($channel !== null) {
            $resourcePath = str_replace(
                '{' . 'channel' . '}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/zip', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/zip', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeAction
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE uNKNOWNBASETYPE (required)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function executeAction($id, $uNKNOWNBASETYPE)
    {
        $this->executeActionWithHttpInfo($id, $uNKNOWNBASETYPE);
    }

    /**
     * Operation executeActionWithHttpInfo
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (required)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeActionWithHttpInfo($id, $uNKNOWNBASETYPE)
    {
        $request = $this->executeActionRequest($id, $uNKNOWNBASETYPE);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeActionAsync
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeActionAsync($id, $uNKNOWNBASETYPE)
    {
        return $this->executeActionAsyncWithHttpInfo($id, $uNKNOWNBASETYPE)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeActionAsyncWithHttpInfo
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeActionAsyncWithHttpInfo($id, $uNKNOWNBASETYPE)
    {
        $returnType = '';
        $request = $this->executeActionRequest($id, $uNKNOWNBASETYPE);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeAction'
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function executeActionRequest($id, $uNKNOWNBASETYPE)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling executeAction'
            );
        }
        // verify the required parameter 'uNKNOWNBASETYPE' is set
        if ($uNKNOWNBASETYPE === null || (is_array($uNKNOWNBASETYPE) && count($uNKNOWNBASETYPE) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uNKNOWNBASETYPE when calling executeAction'
            );
        }

        $resourcePath = '/channels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($uNKNOWNBASETYPE)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($uNKNOWNBASETYPE));
            } else {
                $httpBody = $uNKNOWNBASETYPE;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannel
     *
     * Get Channel
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\Channel
     */
    public function getChannel($id, $include = null)
    {
        list($response) = $this->getChannelWithHttpInfo($id, $include);
        return $response;
    }

    /**
     * Operation getChannelWithHttpInfo
     *
     * Get Channel
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\Channel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelWithHttpInfo($id, $include = null)
    {
        $request = $this->getChannelRequest($id, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\Channel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\Channel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Supla\ApiClient\Model\Channel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\Channel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelAsync
     *
     * Get Channel
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelAsync($id, $include = null)
    {
        return $this->getChannelAsyncWithHttpInfo($id, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelAsyncWithHttpInfo
     *
     * Get Channel
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelAsyncWithHttpInfo($id, $include = null)
    {
        $returnType = '\Supla\ApiClient\Model\Channel';
        $request = $this->getChannelRequest($id, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannel'
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelRequest($id, $include = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getChannel'
            );
        }

        $resourcePath = '/channels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'form', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $include;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelChannelGroups
     *
     * Get Channel Groups that the given channel belongs to
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\ChannelGroup[]
     */
    public function getChannelChannelGroups($id, $include = null)
    {
        list($response) = $this->getChannelChannelGroupsWithHttpInfo($id, $include);
        return $response;
    }

    /**
     * Operation getChannelChannelGroupsWithHttpInfo
     *
     * Get Channel Groups that the given channel belongs to
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\ChannelGroup[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelChannelGroupsWithHttpInfo($id, $include = null)
    {
        $request = $this->getChannelChannelGroupsRequest($id, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\ChannelGroup[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\ChannelGroup[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Supla\ApiClient\Model\ChannelGroup[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\ChannelGroup[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelChannelGroupsAsync
     *
     * Get Channel Groups that the given channel belongs to
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelChannelGroupsAsync($id, $include = null)
    {
        return $this->getChannelChannelGroupsAsyncWithHttpInfo($id, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelChannelGroupsAsyncWithHttpInfo
     *
     * Get Channel Groups that the given channel belongs to
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelChannelGroupsAsyncWithHttpInfo($id, $include = null)
    {
        $returnType = '\Supla\ApiClient\Model\ChannelGroup[]';
        $request = $this->getChannelChannelGroupsRequest($id, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelChannelGroups'
     *
     * @param  int $id ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelChannelGroupsRequest($id, $include = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getChannelChannelGroups'
            );
        }

        $resourcePath = '/channels/{id}/channel-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'form', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $include;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelDirectLinks
     *
     * Get channel direct links
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\DirectLink[]
     */
    public function getChannelDirectLinks($channel, $include = null)
    {
        list($response) = $this->getChannelDirectLinksWithHttpInfo($channel, $include);
        return $response;
    }

    /**
     * Operation getChannelDirectLinksWithHttpInfo
     *
     * Get channel direct links
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\DirectLink[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelDirectLinksWithHttpInfo($channel, $include = null)
    {
        $request = $this->getChannelDirectLinksRequest($channel, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\DirectLink[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\DirectLink[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Supla\ApiClient\Model\DirectLink[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\DirectLink[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelDirectLinksAsync
     *
     * Get channel direct links
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelDirectLinksAsync($channel, $include = null)
    {
        return $this->getChannelDirectLinksAsyncWithHttpInfo($channel, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelDirectLinksAsyncWithHttpInfo
     *
     * Get channel direct links
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelDirectLinksAsyncWithHttpInfo($channel, $include = null)
    {
        $returnType = '\Supla\ApiClient\Model\DirectLink[]';
        $request = $this->getChannelDirectLinksRequest($channel, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelDirectLinks'
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelDirectLinksRequest($channel, $include = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getChannelDirectLinks'
            );
        }

        $resourcePath = '/channels/{channel}/direct-links';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'form', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $include;
        }


        // path params
        if ($channel !== null) {
            $resourcePath = str_replace(
                '{' . 'channel' . '}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelMeasurementLogs
     *
     * Get channel measurement logs.
     *
     * @param  int $channel ID (required)
     * @param  int $afterTimestamp Fetch log items created after this timestamp. (optional)
     * @param  int $beforeTimestamp Fetch log items created before this timestamp. (optional)
     * @param  string $order Whether to order items ascending or descending by creation date. (optional, default to 'DESC')
     * @param  int $sparse Set the maximum items to return from the given period. If specified, the &#x60;limit&#x60; and &#x60;offset&#x60; params are ignored. For example, if you fetches the logs from the whole year and set the &#x60;sparse&#x60; param to &#x60;12&#x60;, the API will try to return up to 12 log items, equally distributed throug the whole year. Min: 1, Max: 1000. (optional)
     * @param  string $logsType Type of the logs to return. Some devices may gather multiple log types. (optional)
     * @param  int $limit Maximum items count in response, from 1 to 5000. (optional, default to 5000)
     * @param  int $offset Pagination offset. (optional, default to 0)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return OneOfArrayArrayArrayArrayArrayArrayArray|\Supla\ApiClient\Model\ErrorResponse
     */
    public function getChannelMeasurementLogs($channel, $afterTimestamp = null, $beforeTimestamp = null, $order = 'DESC', $sparse = null, $logsType = null, $limit = 5000, $offset = 0)
    {
        list($response) = $this->getChannelMeasurementLogsWithHttpInfo($channel, $afterTimestamp, $beforeTimestamp, $order, $sparse, $logsType, $limit, $offset);
        return $response;
    }

    /**
     * Operation getChannelMeasurementLogsWithHttpInfo
     *
     * Get channel measurement logs.
     *
     * @param  int $channel ID (required)
     * @param  int $afterTimestamp Fetch log items created after this timestamp. (optional)
     * @param  int $beforeTimestamp Fetch log items created before this timestamp. (optional)
     * @param  string $order Whether to order items ascending or descending by creation date. (optional, default to 'DESC')
     * @param  int $sparse Set the maximum items to return from the given period. If specified, the &#x60;limit&#x60; and &#x60;offset&#x60; params are ignored. For example, if you fetches the logs from the whole year and set the &#x60;sparse&#x60; param to &#x60;12&#x60;, the API will try to return up to 12 log items, equally distributed throug the whole year. Min: 1, Max: 1000. (optional)
     * @param  string $logsType Type of the logs to return. Some devices may gather multiple log types. (optional)
     * @param  int $limit Maximum items count in response, from 1 to 5000. (optional, default to 5000)
     * @param  int $offset Pagination offset. (optional, default to 0)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of OneOfArrayArrayArrayArrayArrayArrayArray|\Supla\ApiClient\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelMeasurementLogsWithHttpInfo($channel, $afterTimestamp = null, $beforeTimestamp = null, $order = 'DESC', $sparse = null, $logsType = null, $limit = 5000, $offset = 0)
    {
        $request = $this->getChannelMeasurementLogsRequest($channel, $afterTimestamp, $beforeTimestamp, $order, $sparse, $logsType, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('OneOfArrayArrayArrayArrayArrayArrayArray' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'OneOfArrayArrayArrayArrayArrayArrayArray', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Supla\ApiClient\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'OneOfArrayArrayArrayArrayArrayArrayArray';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'OneOfArrayArrayArrayArrayArrayArrayArray',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelMeasurementLogsAsync
     *
     * Get channel measurement logs.
     *
     * @param  int $channel ID (required)
     * @param  int $afterTimestamp Fetch log items created after this timestamp. (optional)
     * @param  int $beforeTimestamp Fetch log items created before this timestamp. (optional)
     * @param  string $order Whether to order items ascending or descending by creation date. (optional, default to 'DESC')
     * @param  int $sparse Set the maximum items to return from the given period. If specified, the &#x60;limit&#x60; and &#x60;offset&#x60; params are ignored. For example, if you fetches the logs from the whole year and set the &#x60;sparse&#x60; param to &#x60;12&#x60;, the API will try to return up to 12 log items, equally distributed throug the whole year. Min: 1, Max: 1000. (optional)
     * @param  string $logsType Type of the logs to return. Some devices may gather multiple log types. (optional)
     * @param  int $limit Maximum items count in response, from 1 to 5000. (optional, default to 5000)
     * @param  int $offset Pagination offset. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelMeasurementLogsAsync($channel, $afterTimestamp = null, $beforeTimestamp = null, $order = 'DESC', $sparse = null, $logsType = null, $limit = 5000, $offset = 0)
    {
        return $this->getChannelMeasurementLogsAsyncWithHttpInfo($channel, $afterTimestamp, $beforeTimestamp, $order, $sparse, $logsType, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelMeasurementLogsAsyncWithHttpInfo
     *
     * Get channel measurement logs.
     *
     * @param  int $channel ID (required)
     * @param  int $afterTimestamp Fetch log items created after this timestamp. (optional)
     * @param  int $beforeTimestamp Fetch log items created before this timestamp. (optional)
     * @param  string $order Whether to order items ascending or descending by creation date. (optional, default to 'DESC')
     * @param  int $sparse Set the maximum items to return from the given period. If specified, the &#x60;limit&#x60; and &#x60;offset&#x60; params are ignored. For example, if you fetches the logs from the whole year and set the &#x60;sparse&#x60; param to &#x60;12&#x60;, the API will try to return up to 12 log items, equally distributed throug the whole year. Min: 1, Max: 1000. (optional)
     * @param  string $logsType Type of the logs to return. Some devices may gather multiple log types. (optional)
     * @param  int $limit Maximum items count in response, from 1 to 5000. (optional, default to 5000)
     * @param  int $offset Pagination offset. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelMeasurementLogsAsyncWithHttpInfo($channel, $afterTimestamp = null, $beforeTimestamp = null, $order = 'DESC', $sparse = null, $logsType = null, $limit = 5000, $offset = 0)
    {
        $returnType = 'OneOfArrayArrayArrayArrayArrayArrayArray';
        $request = $this->getChannelMeasurementLogsRequest($channel, $afterTimestamp, $beforeTimestamp, $order, $sparse, $logsType, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelMeasurementLogs'
     *
     * @param  int $channel ID (required)
     * @param  int $afterTimestamp Fetch log items created after this timestamp. (optional)
     * @param  int $beforeTimestamp Fetch log items created before this timestamp. (optional)
     * @param  string $order Whether to order items ascending or descending by creation date. (optional, default to 'DESC')
     * @param  int $sparse Set the maximum items to return from the given period. If specified, the &#x60;limit&#x60; and &#x60;offset&#x60; params are ignored. For example, if you fetches the logs from the whole year and set the &#x60;sparse&#x60; param to &#x60;12&#x60;, the API will try to return up to 12 log items, equally distributed throug the whole year. Min: 1, Max: 1000. (optional)
     * @param  string $logsType Type of the logs to return. Some devices may gather multiple log types. (optional)
     * @param  int $limit Maximum items count in response, from 1 to 5000. (optional, default to 5000)
     * @param  int $offset Pagination offset. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelMeasurementLogsRequest($channel, $afterTimestamp = null, $beforeTimestamp = null, $order = 'DESC', $sparse = null, $logsType = null, $limit = 5000, $offset = 0)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getChannelMeasurementLogs'
            );
        }
        if ($sparse !== null && $sparse > 1000) {
            throw new \InvalidArgumentException('invalid value for "$sparse" when calling ChannelsApi.getChannelMeasurementLogs, must be smaller than or equal to 1000.');
        }
        if ($sparse !== null && $sparse < 1) {
            throw new \InvalidArgumentException('invalid value for "$sparse" when calling ChannelsApi.getChannelMeasurementLogs, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 5000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ChannelsApi.getChannelMeasurementLogs, must be smaller than or equal to 5000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ChannelsApi.getChannelMeasurementLogs, must be bigger than or equal to 1.');
        }


        $resourcePath = '/channels/{channel}/measurement-logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($afterTimestamp !== null) {
            if('form' === 'form' && is_array($afterTimestamp)) {
                foreach($afterTimestamp as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['afterTimestamp'] = $afterTimestamp;
            }
        }
        // query params
        if ($beforeTimestamp !== null) {
            if('form' === 'form' && is_array($beforeTimestamp)) {
                foreach($beforeTimestamp as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['beforeTimestamp'] = $beforeTimestamp;
            }
        }
        // query params
        if ($order !== null) {
            if('form' === 'form' && is_array($order)) {
                foreach($order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['order'] = $order;
            }
        }
        // query params
        if ($sparse !== null) {
            if('form' === 'form' && is_array($sparse)) {
                foreach($sparse as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sparse'] = $sparse;
            }
        }
        // query params
        if ($logsType !== null) {
            if('form' === 'form' && is_array($logsType)) {
                foreach($logsType as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['logsType'] = $logsType;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($offset !== null) {
            if('form' === 'form' && is_array($offset)) {
                foreach($offset as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['offset'] = $offset;
            }
        }


        // path params
        if ($channel !== null) {
            $resourcePath = str_replace(
                '{' . 'channel' . '}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannelScenes
     *
     * Get channel scenes
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\Scene[]
     */
    public function getChannelScenes($channel, $include = null)
    {
        list($response) = $this->getChannelScenesWithHttpInfo($channel, $include);
        return $response;
    }

    /**
     * Operation getChannelScenesWithHttpInfo
     *
     * Get channel scenes
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\Scene[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelScenesWithHttpInfo($channel, $include = null)
    {
        $request = $this->getChannelScenesRequest($channel, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\Scene[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\Scene[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Supla\ApiClient\Model\Scene[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\Scene[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelScenesAsync
     *
     * Get channel scenes
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelScenesAsync($channel, $include = null)
    {
        return $this->getChannelScenesAsyncWithHttpInfo($channel, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelScenesAsyncWithHttpInfo
     *
     * Get channel scenes
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelScenesAsyncWithHttpInfo($channel, $include = null)
    {
        $returnType = '\Supla\ApiClient\Model\Scene[]';
        $request = $this->getChannelScenesRequest($channel, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannelScenes'
     *
     * @param  int $channel ID (required)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelScenesRequest($channel, $include = null)
    {
        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling getChannelScenes'
            );
        }

        $resourcePath = '/channels/{channel}/scenes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'form', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $include;
        }


        // path params
        if ($channel !== null) {
            $resourcePath = str_replace(
                '{' . 'channel' . '}',
                ObjectSerializer::toPathValue($channel),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChannels
     *
     * Get Channels
     *
     * @param  \Supla\ApiClient\Model\ChannelFunctionEnumNames[] $function function (optional)
     * @param  string $io Return only &#x60;input&#x60; or &#x60;output&#x60; channels. (optional)
     * @param  bool $hasFunction Return only channels with (&#x60;true&#x60;) or without (&#x60;false&#x60;) chosen functions. (optional)
     * @param  int[] $skipIds skipIds (optional)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     * @param  string $forIntegration Select an integration that the channels should be returned for. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\Channel[]
     */
    public function getChannels($function = null, $io = null, $hasFunction = null, $skipIds = null, $include = null, $forIntegration = null)
    {
        list($response) = $this->getChannelsWithHttpInfo($function, $io, $hasFunction, $skipIds, $include, $forIntegration);
        return $response;
    }

    /**
     * Operation getChannelsWithHttpInfo
     *
     * Get Channels
     *
     * @param  \Supla\ApiClient\Model\ChannelFunctionEnumNames[] $function (optional)
     * @param  string $io Return only &#x60;input&#x60; or &#x60;output&#x60; channels. (optional)
     * @param  bool $hasFunction Return only channels with (&#x60;true&#x60;) or without (&#x60;false&#x60;) chosen functions. (optional)
     * @param  int[] $skipIds (optional)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     * @param  string $forIntegration Select an integration that the channels should be returned for. (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\Channel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelsWithHttpInfo($function = null, $io = null, $hasFunction = null, $skipIds = null, $include = null, $forIntegration = null)
    {
        $request = $this->getChannelsRequest($function, $io, $hasFunction, $skipIds, $include, $forIntegration);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\Channel[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\Channel[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Supla\ApiClient\Model\Channel[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\Channel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChannelsAsync
     *
     * Get Channels
     *
     * @param  \Supla\ApiClient\Model\ChannelFunctionEnumNames[] $function (optional)
     * @param  string $io Return only &#x60;input&#x60; or &#x60;output&#x60; channels. (optional)
     * @param  bool $hasFunction Return only channels with (&#x60;true&#x60;) or without (&#x60;false&#x60;) chosen functions. (optional)
     * @param  int[] $skipIds (optional)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     * @param  string $forIntegration Select an integration that the channels should be returned for. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelsAsync($function = null, $io = null, $hasFunction = null, $skipIds = null, $include = null, $forIntegration = null)
    {
        return $this->getChannelsAsyncWithHttpInfo($function, $io, $hasFunction, $skipIds, $include, $forIntegration)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChannelsAsyncWithHttpInfo
     *
     * Get Channels
     *
     * @param  \Supla\ApiClient\Model\ChannelFunctionEnumNames[] $function (optional)
     * @param  string $io Return only &#x60;input&#x60; or &#x60;output&#x60; channels. (optional)
     * @param  bool $hasFunction Return only channels with (&#x60;true&#x60;) or without (&#x60;false&#x60;) chosen functions. (optional)
     * @param  int[] $skipIds (optional)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     * @param  string $forIntegration Select an integration that the channels should be returned for. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChannelsAsyncWithHttpInfo($function = null, $io = null, $hasFunction = null, $skipIds = null, $include = null, $forIntegration = null)
    {
        $returnType = '\Supla\ApiClient\Model\Channel[]';
        $request = $this->getChannelsRequest($function, $io, $hasFunction, $skipIds, $include, $forIntegration);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChannels'
     *
     * @param  \Supla\ApiClient\Model\ChannelFunctionEnumNames[] $function (optional)
     * @param  string $io Return only &#x60;input&#x60; or &#x60;output&#x60; channels. (optional)
     * @param  bool $hasFunction Return only channels with (&#x60;true&#x60;) or without (&#x60;false&#x60;) chosen functions. (optional)
     * @param  int[] $skipIds (optional)
     * @param  string[] $include List of extra fields to include in the response. (optional)
     * @param  string $forIntegration Select an integration that the channels should be returned for. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChannelsRequest($function = null, $io = null, $hasFunction = null, $skipIds = null, $include = null, $forIntegration = null)
    {

        $resourcePath = '/channels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($function)) {
            $function = ObjectSerializer::serializeCollection($function, 'form', true);
        }
        if ($function !== null) {
            $queryParams['function'] = $function;
        }
        // query params
        if ($io !== null) {
            if('form' === 'form' && is_array($io)) {
                foreach($io as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['io'] = $io;
            }
        }
        // query params
        if ($hasFunction !== null) {
            if('form' === 'form' && is_array($hasFunction)) {
                foreach($hasFunction as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['hasFunction'] = $hasFunction;
            }
        }
        // query params
        if (is_array($skipIds)) {
            $skipIds = ObjectSerializer::serializeCollection($skipIds, 'form', true);
        }
        if ($skipIds !== null) {
            $queryParams['skipIds'] = $skipIds;
        }
        // query params
        if (is_array($include)) {
            $include = ObjectSerializer::serializeCollection($include, 'form', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $include;
        }
        // query params
        if ($forIntegration !== null) {
            if('form' === 'form' && is_array($forIntegration)) {
                foreach($forIntegration as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['forIntegration'] = $forIntegration;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateChannel
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject1 $inlineObject1 inlineObject1 (required)
     * @param  bool $safe Whether to perform actions that require data loss (e.g. delete schedules when changing channel function) (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Supla\ApiClient\Model\Channel|\Supla\ApiClient\Model\InlineResponse409
     */
    public function updateChannel($id, $inlineObject1, $safe = null)
    {
        list($response) = $this->updateChannelWithHttpInfo($id, $inlineObject1, $safe);
        return $response;
    }

    /**
     * Operation updateChannelWithHttpInfo
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject1 $inlineObject1 (required)
     * @param  bool $safe Whether to perform actions that require data loss (e.g. delete schedules when changing channel function) (optional)
     *
     * @throws \Supla\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Supla\ApiClient\Model\Channel|\Supla\ApiClient\Model\InlineResponse409, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateChannelWithHttpInfo($id, $inlineObject1, $safe = null)
    {
        $request = $this->updateChannelRequest($id, $inlineObject1, $safe);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Supla\ApiClient\Model\Channel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\Channel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\Supla\ApiClient\Model\InlineResponse409' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Supla\ApiClient\Model\InlineResponse409', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Supla\ApiClient\Model\Channel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\Channel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Supla\ApiClient\Model\InlineResponse409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateChannelAsync
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject1 $inlineObject1 (required)
     * @param  bool $safe Whether to perform actions that require data loss (e.g. delete schedules when changing channel function) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelAsync($id, $inlineObject1, $safe = null)
    {
        return $this->updateChannelAsyncWithHttpInfo($id, $inlineObject1, $safe)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateChannelAsyncWithHttpInfo
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject1 $inlineObject1 (required)
     * @param  bool $safe Whether to perform actions that require data loss (e.g. delete schedules when changing channel function) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateChannelAsyncWithHttpInfo($id, $inlineObject1, $safe = null)
    {
        $returnType = '\Supla\ApiClient\Model\Channel';
        $request = $this->updateChannelRequest($id, $inlineObject1, $safe);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateChannel'
     *
     * @param  int $id ID (required)
     * @param  \Supla\ApiClient\Model\InlineObject1 $inlineObject1 (required)
     * @param  bool $safe Whether to perform actions that require data loss (e.g. delete schedules when changing channel function) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateChannelRequest($id, $inlineObject1, $safe = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateChannel'
            );
        }
        // verify the required parameter 'inlineObject1' is set
        if ($inlineObject1 === null || (is_array($inlineObject1) && count($inlineObject1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inlineObject1 when calling updateChannel'
            );
        }

        $resourcePath = '/channels/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($safe !== null) {
            if('form' === 'form' && is_array($safe)) {
                foreach($safe as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['safe'] = $safe;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inlineObject1)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inlineObject1));
            } else {
                $httpBody = $inlineObject1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
