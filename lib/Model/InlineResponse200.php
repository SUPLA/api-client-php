<?php
/**
 * InlineResponse200
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.3.37
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse200 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => 'string',
        'time' => 'string',
        'timezone' => '\Supla\ApiClient\Model\InlineResponse200Timezone',
        'authenticated' => 'bool',
        'cloudVersion' => 'string',
        'cloudVersionFull' => 'string',
        'apiVersion' => 'string',
        'serverStatus' => 'string',
        'supportedApiVersions' => 'string[]',
        'config' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'time' => 'datetime',
        'timezone' => null,
        'authenticated' => null,
        'cloudVersion' => null,
        'cloudVersionFull' => null,
        'apiVersion' => null,
        'serverStatus' => null,
        'supportedApiVersions' => null,
        'config' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'time' => 'time',
        'timezone' => 'timezone',
        'authenticated' => 'authenticated',
        'cloudVersion' => 'cloudVersion',
        'cloudVersionFull' => 'cloudVersionFull',
        'apiVersion' => 'apiVersion',
        'serverStatus' => 'serverStatus',
        'supportedApiVersions' => 'supportedApiVersions',
        'config' => 'config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'time' => 'setTime',
        'timezone' => 'setTimezone',
        'authenticated' => 'setAuthenticated',
        'cloudVersion' => 'setCloudVersion',
        'cloudVersionFull' => 'setCloudVersionFull',
        'apiVersion' => 'setApiVersion',
        'serverStatus' => 'setServerStatus',
        'supportedApiVersions' => 'setSupportedApiVersions',
        'config' => 'setConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'time' => 'getTime',
        'timezone' => 'getTimezone',
        'authenticated' => 'getAuthenticated',
        'cloudVersion' => 'getCloudVersion',
        'cloudVersionFull' => 'getCloudVersionFull',
        'apiVersion' => 'getApiVersion',
        'serverStatus' => 'getServerStatus',
        'supportedApiVersions' => 'getSupportedApiVersions',
        'config' => 'getConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = $data['address'] ?? null;
        $this->container['time'] = $data['time'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['authenticated'] = $data['authenticated'] ?? null;
        $this->container['cloudVersion'] = $data['cloudVersion'] ?? null;
        $this->container['cloudVersionFull'] = $data['cloudVersionFull'] ?? null;
        $this->container['apiVersion'] = $data['apiVersion'] ?? null;
        $this->container['serverStatus'] = $data['serverStatus'] ?? null;
        $this->container['supportedApiVersions'] = $data['supportedApiVersions'] ?? null;
        $this->container['config'] = $data['config'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address SUPLA Server address (to be used in smartphones)
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string|null
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string|null $time Current server time
     *
     * @return self
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return \Supla\ApiClient\Model\InlineResponse200Timezone|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param \Supla\ApiClient\Model\InlineResponse200Timezone|null $timezone timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets authenticated
     *
     * @return bool|null
     */
    public function getAuthenticated()
    {
        return $this->container['authenticated'];
    }

    /**
     * Sets authenticated
     *
     * @param bool|null $authenticated authenticated
     *
     * @return self
     */
    public function setAuthenticated($authenticated)
    {
        $this->container['authenticated'] = $authenticated;

        return $this;
    }

    /**
     * Gets cloudVersion
     *
     * @return string|null
     */
    public function getCloudVersion()
    {
        return $this->container['cloudVersion'];
    }

    /**
     * Sets cloudVersion
     *
     * @param string|null $cloudVersion cloudVersion
     *
     * @return self
     */
    public function setCloudVersion($cloudVersion)
    {
        $this->container['cloudVersion'] = $cloudVersion;

        return $this;
    }

    /**
     * Gets cloudVersionFull
     *
     * @return string|null
     */
    public function getCloudVersionFull()
    {
        return $this->container['cloudVersionFull'];
    }

    /**
     * Sets cloudVersionFull
     *
     * @param string|null $cloudVersionFull cloudVersionFull
     *
     * @return self
     */
    public function setCloudVersionFull($cloudVersionFull)
    {
        $this->container['cloudVersionFull'] = $cloudVersionFull;

        return $this;
    }

    /**
     * Gets apiVersion
     *
     * @return string|null
     */
    public function getApiVersion()
    {
        return $this->container['apiVersion'];
    }

    /**
     * Sets apiVersion
     *
     * @param string|null $apiVersion apiVersion
     *
     * @return self
     */
    public function setApiVersion($apiVersion)
    {
        $this->container['apiVersion'] = $apiVersion;

        return $this;
    }

    /**
     * Gets serverStatus
     *
     * @return string|null
     */
    public function getServerStatus()
    {
        return $this->container['serverStatus'];
    }

    /**
     * Sets serverStatus
     *
     * @param string|null $serverStatus SUPLA Server status
     *
     * @return self
     */
    public function setServerStatus($serverStatus)
    {
        $this->container['serverStatus'] = $serverStatus;

        return $this;
    }

    /**
     * Gets supportedApiVersions
     *
     * @return string[]|null
     */
    public function getSupportedApiVersions()
    {
        return $this->container['supportedApiVersions'];
    }

    /**
     * Sets supportedApiVersions
     *
     * @param string[]|null $supportedApiVersions supportedApiVersions
     *
     * @return self
     */
    public function setSupportedApiVersions($supportedApiVersions)
    {
        $this->container['supportedApiVersions'] = $supportedApiVersions;

        return $this;
    }

    /**
     * Gets config
     *
     * @return object|null
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object|null $config Configuration options for frontend webapp
     *
     * @return self
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


