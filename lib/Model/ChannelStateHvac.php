<?php
/**
 * ChannelStateHvac
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SUPLA Cloud API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.03
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Supla\ApiClient\Model;

use \ArrayAccess;
use \Supla\ApiClient\ObjectSerializer;

/**
 * ChannelStateHvac Class Doc Comment
 *
 * @category Class
 * @description State of &#x60;HVAC&#x60; thermostat channels.
 * @package  Supla\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ChannelStateHvac implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ChannelStateHvac';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connected' => 'bool',
        'heating' => 'bool',
        'cooling' => 'bool',
        'manual' => 'bool',
        'countdownTimer' => 'bool',
        'thermometerError' => 'bool',
        'clockError' => 'bool',
        'forcedOffBySensor' => 'bool',
        'weeklyScheduleTemporalOverride' => 'bool',
        'batteryCoverOpen' => 'bool',
        'calibrationError' => 'bool',
        'mode' => 'string',
        'temperatureHeat' => 'float',
        'temperatureCool' => 'float',
        'temperatureMain' => 'float',
        'humidityMain' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'connected' => null,
        'heating' => null,
        'cooling' => null,
        'manual' => null,
        'countdownTimer' => null,
        'thermometerError' => null,
        'clockError' => null,
        'forcedOffBySensor' => null,
        'weeklyScheduleTemporalOverride' => null,
        'batteryCoverOpen' => null,
        'calibrationError' => null,
        'mode' => null,
        'temperatureHeat' => null,
        'temperatureCool' => null,
        'temperatureMain' => null,
        'humidityMain' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'connected' => false,
        'heating' => false,
        'cooling' => false,
        'manual' => false,
        'countdownTimer' => false,
        'thermometerError' => false,
        'clockError' => false,
        'forcedOffBySensor' => false,
        'weeklyScheduleTemporalOverride' => false,
        'batteryCoverOpen' => false,
        'calibrationError' => false,
        'mode' => false,
        'temperatureHeat' => false,
        'temperatureCool' => false,
        'temperatureMain' => false,
        'humidityMain' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connected' => 'connected',
        'heating' => 'heating',
        'cooling' => 'cooling',
        'manual' => 'manual',
        'countdownTimer' => 'countdownTimer',
        'thermometerError' => 'thermometerError',
        'clockError' => 'clockError',
        'forcedOffBySensor' => 'forcedOffBySensor',
        'weeklyScheduleTemporalOverride' => 'weeklyScheduleTemporalOverride',
        'batteryCoverOpen' => 'batteryCoverOpen',
        'calibrationError' => 'calibrationError',
        'mode' => 'mode',
        'temperatureHeat' => 'temperatureHeat',
        'temperatureCool' => 'temperatureCool',
        'temperatureMain' => 'temperatureMain',
        'humidityMain' => 'humidityMain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connected' => 'setConnected',
        'heating' => 'setHeating',
        'cooling' => 'setCooling',
        'manual' => 'setManual',
        'countdownTimer' => 'setCountdownTimer',
        'thermometerError' => 'setThermometerError',
        'clockError' => 'setClockError',
        'forcedOffBySensor' => 'setForcedOffBySensor',
        'weeklyScheduleTemporalOverride' => 'setWeeklyScheduleTemporalOverride',
        'batteryCoverOpen' => 'setBatteryCoverOpen',
        'calibrationError' => 'setCalibrationError',
        'mode' => 'setMode',
        'temperatureHeat' => 'setTemperatureHeat',
        'temperatureCool' => 'setTemperatureCool',
        'temperatureMain' => 'setTemperatureMain',
        'humidityMain' => 'setHumidityMain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connected' => 'getConnected',
        'heating' => 'getHeating',
        'cooling' => 'getCooling',
        'manual' => 'getManual',
        'countdownTimer' => 'getCountdownTimer',
        'thermometerError' => 'getThermometerError',
        'clockError' => 'getClockError',
        'forcedOffBySensor' => 'getForcedOffBySensor',
        'weeklyScheduleTemporalOverride' => 'getWeeklyScheduleTemporalOverride',
        'batteryCoverOpen' => 'getBatteryCoverOpen',
        'calibrationError' => 'getCalibrationError',
        'mode' => 'getMode',
        'temperatureHeat' => 'getTemperatureHeat',
        'temperatureCool' => 'getTemperatureCool',
        'temperatureMain' => 'getTemperatureMain',
        'humidityMain' => 'getHumidityMain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('connected', $data ?? [], null);
        $this->setIfExists('heating', $data ?? [], null);
        $this->setIfExists('cooling', $data ?? [], null);
        $this->setIfExists('manual', $data ?? [], null);
        $this->setIfExists('countdownTimer', $data ?? [], null);
        $this->setIfExists('thermometerError', $data ?? [], null);
        $this->setIfExists('clockError', $data ?? [], null);
        $this->setIfExists('forcedOffBySensor', $data ?? [], null);
        $this->setIfExists('weeklyScheduleTemporalOverride', $data ?? [], null);
        $this->setIfExists('batteryCoverOpen', $data ?? [], null);
        $this->setIfExists('calibrationError', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('temperatureHeat', $data ?? [], null);
        $this->setIfExists('temperatureCool', $data ?? [], null);
        $this->setIfExists('temperatureMain', $data ?? [], null);
        $this->setIfExists('humidityMain', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connected
     *
     * @return bool|null
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param bool|null $connected connected
     *
     * @return self
     */
    public function setConnected($connected)
    {
        if (is_null($connected)) {
            throw new \InvalidArgumentException('non-nullable connected cannot be null');
        }
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets heating
     *
     * @return bool|null
     */
    public function getHeating()
    {
        return $this->container['heating'];
    }

    /**
     * Sets heating
     *
     * @param bool|null $heating heating
     *
     * @return self
     */
    public function setHeating($heating)
    {
        if (is_null($heating)) {
            throw new \InvalidArgumentException('non-nullable heating cannot be null');
        }
        $this->container['heating'] = $heating;

        return $this;
    }

    /**
     * Gets cooling
     *
     * @return bool|null
     */
    public function getCooling()
    {
        return $this->container['cooling'];
    }

    /**
     * Sets cooling
     *
     * @param bool|null $cooling cooling
     *
     * @return self
     */
    public function setCooling($cooling)
    {
        if (is_null($cooling)) {
            throw new \InvalidArgumentException('non-nullable cooling cannot be null');
        }
        $this->container['cooling'] = $cooling;

        return $this;
    }

    /**
     * Gets manual
     *
     * @return bool|null
     */
    public function getManual()
    {
        return $this->container['manual'];
    }

    /**
     * Sets manual
     *
     * @param bool|null $manual manual
     *
     * @return self
     */
    public function setManual($manual)
    {
        if (is_null($manual)) {
            throw new \InvalidArgumentException('non-nullable manual cannot be null');
        }
        $this->container['manual'] = $manual;

        return $this;
    }

    /**
     * Gets countdownTimer
     *
     * @return bool|null
     */
    public function getCountdownTimer()
    {
        return $this->container['countdownTimer'];
    }

    /**
     * Sets countdownTimer
     *
     * @param bool|null $countdownTimer countdownTimer
     *
     * @return self
     */
    public function setCountdownTimer($countdownTimer)
    {
        if (is_null($countdownTimer)) {
            throw new \InvalidArgumentException('non-nullable countdownTimer cannot be null');
        }
        $this->container['countdownTimer'] = $countdownTimer;

        return $this;
    }

    /**
     * Gets thermometerError
     *
     * @return bool|null
     */
    public function getThermometerError()
    {
        return $this->container['thermometerError'];
    }

    /**
     * Sets thermometerError
     *
     * @param bool|null $thermometerError thermometerError
     *
     * @return self
     */
    public function setThermometerError($thermometerError)
    {
        if (is_null($thermometerError)) {
            throw new \InvalidArgumentException('non-nullable thermometerError cannot be null');
        }
        $this->container['thermometerError'] = $thermometerError;

        return $this;
    }

    /**
     * Gets clockError
     *
     * @return bool|null
     */
    public function getClockError()
    {
        return $this->container['clockError'];
    }

    /**
     * Sets clockError
     *
     * @param bool|null $clockError clockError
     *
     * @return self
     */
    public function setClockError($clockError)
    {
        if (is_null($clockError)) {
            throw new \InvalidArgumentException('non-nullable clockError cannot be null');
        }
        $this->container['clockError'] = $clockError;

        return $this;
    }

    /**
     * Gets forcedOffBySensor
     *
     * @return bool|null
     */
    public function getForcedOffBySensor()
    {
        return $this->container['forcedOffBySensor'];
    }

    /**
     * Sets forcedOffBySensor
     *
     * @param bool|null $forcedOffBySensor forcedOffBySensor
     *
     * @return self
     */
    public function setForcedOffBySensor($forcedOffBySensor)
    {
        if (is_null($forcedOffBySensor)) {
            throw new \InvalidArgumentException('non-nullable forcedOffBySensor cannot be null');
        }
        $this->container['forcedOffBySensor'] = $forcedOffBySensor;

        return $this;
    }

    /**
     * Gets weeklyScheduleTemporalOverride
     *
     * @return bool|null
     */
    public function getWeeklyScheduleTemporalOverride()
    {
        return $this->container['weeklyScheduleTemporalOverride'];
    }

    /**
     * Sets weeklyScheduleTemporalOverride
     *
     * @param bool|null $weeklyScheduleTemporalOverride weeklyScheduleTemporalOverride
     *
     * @return self
     */
    public function setWeeklyScheduleTemporalOverride($weeklyScheduleTemporalOverride)
    {
        if (is_null($weeklyScheduleTemporalOverride)) {
            throw new \InvalidArgumentException('non-nullable weeklyScheduleTemporalOverride cannot be null');
        }
        $this->container['weeklyScheduleTemporalOverride'] = $weeklyScheduleTemporalOverride;

        return $this;
    }

    /**
     * Gets batteryCoverOpen
     *
     * @return bool|null
     */
    public function getBatteryCoverOpen()
    {
        return $this->container['batteryCoverOpen'];
    }

    /**
     * Sets batteryCoverOpen
     *
     * @param bool|null $batteryCoverOpen batteryCoverOpen
     *
     * @return self
     */
    public function setBatteryCoverOpen($batteryCoverOpen)
    {
        if (is_null($batteryCoverOpen)) {
            throw new \InvalidArgumentException('non-nullable batteryCoverOpen cannot be null');
        }
        $this->container['batteryCoverOpen'] = $batteryCoverOpen;

        return $this;
    }

    /**
     * Gets calibrationError
     *
     * @return bool|null
     */
    public function getCalibrationError()
    {
        return $this->container['calibrationError'];
    }

    /**
     * Sets calibrationError
     *
     * @param bool|null $calibrationError calibrationError
     *
     * @return self
     */
    public function setCalibrationError($calibrationError)
    {
        if (is_null($calibrationError)) {
            throw new \InvalidArgumentException('non-nullable calibrationError cannot be null');
        }
        $this->container['calibrationError'] = $calibrationError;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets temperatureHeat
     *
     * @return float|null
     */
    public function getTemperatureHeat()
    {
        return $this->container['temperatureHeat'];
    }

    /**
     * Sets temperatureHeat
     *
     * @param float|null $temperatureHeat temperatureHeat
     *
     * @return self
     */
    public function setTemperatureHeat($temperatureHeat)
    {
        if (is_null($temperatureHeat)) {
            throw new \InvalidArgumentException('non-nullable temperatureHeat cannot be null');
        }
        $this->container['temperatureHeat'] = $temperatureHeat;

        return $this;
    }

    /**
     * Gets temperatureCool
     *
     * @return float|null
     */
    public function getTemperatureCool()
    {
        return $this->container['temperatureCool'];
    }

    /**
     * Sets temperatureCool
     *
     * @param float|null $temperatureCool temperatureCool
     *
     * @return self
     */
    public function setTemperatureCool($temperatureCool)
    {
        if (is_null($temperatureCool)) {
            throw new \InvalidArgumentException('non-nullable temperatureCool cannot be null');
        }
        $this->container['temperatureCool'] = $temperatureCool;

        return $this;
    }

    /**
     * Gets temperatureMain
     *
     * @return float|null
     */
    public function getTemperatureMain()
    {
        return $this->container['temperatureMain'];
    }

    /**
     * Sets temperatureMain
     *
     * @param float|null $temperatureMain temperatureMain
     *
     * @return self
     */
    public function setTemperatureMain($temperatureMain)
    {
        if (is_null($temperatureMain)) {
            throw new \InvalidArgumentException('non-nullable temperatureMain cannot be null');
        }
        $this->container['temperatureMain'] = $temperatureMain;

        return $this;
    }

    /**
     * Gets humidityMain
     *
     * @return float|null
     */
    public function getHumidityMain()
    {
        return $this->container['humidityMain'];
    }

    /**
     * Sets humidityMain
     *
     * @param float|null $humidityMain humidityMain
     *
     * @return self
     */
    public function setHumidityMain($humidityMain)
    {
        if (is_null($humidityMain)) {
            throw new \InvalidArgumentException('non-nullable humidityMain cannot be null');
        }
        $this->container['humidityMain'] = $humidityMain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


